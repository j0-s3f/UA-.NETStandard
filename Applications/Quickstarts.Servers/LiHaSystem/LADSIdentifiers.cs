/******************************************************************************
**
** <auto-generated>
**     This code was generated by a tool: UaModeler
**     Runtime Version: 1.6.5, using .NET Server 2.6.0 template (version 2)
**
**     Changes to this file may cause incorrect behavior and will be lost if
**     the code is regenerated.
**
**     Generated by Dr. Matthias Arnold <M.Arnold@AixEngineers.de>
** </auto-generated>
**
** Copyright (c) 2006-2022 Unified Automation GmbH All rights reserved.
**
** Software License Agreement ("SLA") Version 2.7
**
** Unless explicitly acquired and licensed from Licensor under another
** license, the contents of this file are subject to the Software License
** Agreement ("SLA") Version 2.7, or subsequent versions
** as allowed by the SLA, and You may not copy or use this file in either
** source code or executable form, except in compliance with the terms and
** conditions of the SLA.
**
** All software distributed under the SLA is provided strictly on an
** "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
** AND LICENSOR HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT
** LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the SLA for specific
** language governing rights and limitations under the SLA.
**
** Project: .NET OPC UA SDK information model for namespace http://spectaris.de/LADS/
**
** Description: OPC Unified Architecture Software Development Kit.
**
** The complete license agreement can be found here:
** http://unifiedautomation.com/License/SLA/2.7/
**
** Created: 01.04.2022
**
******************************************************************************/

using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using System.Xml;
using System.Runtime.Serialization;
using Opc.Ua;
#pragma warning disable CS1570

namespace spectaris.LADS
{
    #region DataType Identifiers
    /// <summary>
    /// A class that declares constants for all DataTypes in the Model.
    /// </summary>

    public static partial class DataTypes
    {
        /// <summary>
        /// The identifier for the ResultPropertiesDataType DataType.
        /// </summary>
        public const uint ResultPropertiesDataType = 3003;

        /// <summary>
        /// The identifier for the TemplatePropertiesDataType DataType.
        /// </summary>
        public const uint TemplatePropertiesDataType = 3002;

    }
    #endregion

    #region Object Identifiers
    /// <summary>
    /// A class that declares constants for all Objects in the Model.
    /// </summary>

    public static partial class Objects
    {
        /// <summary>
        /// The identifier for the Default Binary Object.
        /// </summary>
        public const uint ResultPropertiesDataType_Encoding_DefaultBinary = 5077;

        /// <summary>
        /// The identifier for the Default JSON Object.
        /// </summary>
        public const uint ResultPropertiesDataType_Encoding_DefaultJson = 5079;

        /// <summary>
        /// The identifier for the Default XML Object.
        /// </summary>
        public const uint ResultPropertiesDataType_Encoding_DefaultXml = 5078;

        /// <summary>
        /// The identifier for the Default Binary Object.
        /// </summary>
        public const uint TemplatePropertiesDataType_Encoding_DefaultBinary = 5073;

        /// <summary>
        /// The identifier for the Default JSON Object.
        /// </summary>
        public const uint TemplatePropertiesDataType_Encoding_DefaultJson = 5075;

        /// <summary>
        /// The identifier for the Default XML Object.
        /// </summary>
        public const uint TemplatePropertiesDataType_Encoding_DefaultXml = 5074;

        /// <summary>
        /// The identifier for the ProgramTemplate Object.
        /// </summary>
        public const uint ActiveProgramType_ProgramTemplate = 5247;

        /// <summary>
        /// The identifier for the StateMachine Object.
        /// </summary>
        public const uint ActiveProgramType_StateMachine = 5047;

        /// <summary>
        /// The identifier for the ClearedStateMachine Object.
        /// </summary>
        public const uint ActiveProgramType_StateMachine_ClearedStateMachine = 5164;

        /// <summary>
        /// The identifier for the Clearing Object.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_Clearing = 5150;

        /// <summary>
        /// The identifier for the ClearingToStopped Object.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_ClearingToStopped = 5156;

        /// <summary>
        /// The identifier for the Stopped Object.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_Stopped = 5148;

        /// <summary>
        /// The identifier for the Running Object.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_Running = 5151;

        /// <summary>
        /// The identifier for the RunningStateMachine Object.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_RunningStateMachine = 5152;

        /// <summary>
        /// The identifier for the CompleteToResetting Object.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_RunningStateMachine_CompleteToResetting = 5216;

        /// <summary>
        /// The identifier for the CompletingToComplete Object.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_RunningStateMachine_CompletingToComplete = 5221;

        /// <summary>
        /// The identifier for the ExecuteToCompleting Object.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_RunningStateMachine_ExecuteToCompleting = 5226;

        /// <summary>
        /// The identifier for the ExecuteToHolding Object.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_RunningStateMachine_ExecuteToHolding = 5231;

        /// <summary>
        /// The identifier for the ExecuteToSuspending Object.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_RunningStateMachine_ExecuteToSuspending = 5236;

        /// <summary>
        /// The identifier for the HeldToUnholding Object.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_RunningStateMachine_HeldToUnholding = 5241;

        /// <summary>
        /// The identifier for the Complete Object.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_Complete = 5128;

        /// <summary>
        /// The identifier for the CompleteToResetting Object.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_CompleteToResetting = 5141;

        /// <summary>
        /// The identifier for the Resetting Object.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_Resetting = 5119;

        /// <summary>
        /// The identifier for the Completing Object.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_Completing = 5127;

        /// <summary>
        /// The identifier for the CompletingToComplete Object.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_CompletingToComplete = 5140;

        /// <summary>
        /// The identifier for the Execute Object.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_Execute = 5168;

        /// <summary>
        /// The identifier for the ExecuteToCompleting Object.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_ExecuteToCompleting = 5139;

        /// <summary>
        /// The identifier for the ExecuteToHolding Object.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_ExecuteToHolding = 5135;

        /// <summary>
        /// The identifier for the Holding Object.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_Holding = 5123;

        /// <summary>
        /// The identifier for the ExecuteToSuspending Object.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_ExecuteToSuspending = 5132;

        /// <summary>
        /// The identifier for the Suspending Object.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_Suspending = 5118;

        /// <summary>
        /// The identifier for the Held Object.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_Held = 5124;

        /// <summary>
        /// The identifier for the HeldToUnholding Object.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_HeldToUnholding = 5137;

        /// <summary>
        /// The identifier for the Unholding Object.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_Unholding = 5125;

        /// <summary>
        /// The identifier for the HoldingToHeld Object.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_HoldingToHeld = 5136;

        /// <summary>
        /// The identifier for the Idle Object.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_Idle = 5120;

        /// <summary>
        /// The identifier for the IdleToStarting Object.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_IdleToStarting = 5130;

        /// <summary>
        /// The identifier for the Starting Object.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_Starting = 5117;

        /// <summary>
        /// The identifier for the ResettingToIdle Object.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_ResettingToIdle = 5129;

        /// <summary>
        /// The identifier for the StartingToExecute Object.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_StartingToExecute = 5131;

        /// <summary>
        /// The identifier for the StartingToHolding Object.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_StartingToHolding = 5142;

        /// <summary>
        /// The identifier for the Suspended Object.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_Suspended = 5121;

        /// <summary>
        /// The identifier for the SuspendedToHolding Object.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_SuspendedToHolding = 5145;

        /// <summary>
        /// The identifier for the SuspendedToUnsuspending Object.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_SuspendedToUnsuspending = 5169;

        /// <summary>
        /// The identifier for the Unsuspending Object.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_Unsuspending = 5122;

        /// <summary>
        /// The identifier for the SuspendingToHolding Object.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_SuspendingToHolding = 5146;

        /// <summary>
        /// The identifier for the SuspendingToSuspended Object.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_SuspendingToSuspended = 5133;

        /// <summary>
        /// The identifier for the UnholdingToExecute Object.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_UnholdingToExecute = 5138;

        /// <summary>
        /// The identifier for the UnholdingToHolding Object.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_UnholdingToHolding = 5147;

        /// <summary>
        /// The identifier for the UnsuspendingToExecute Object.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_UnsuspendingToExecute = 5134;

        /// <summary>
        /// The identifier for the UnsuspendingToHolding Object.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_UnsuspendingToHolding = 5144;

        /// <summary>
        /// The identifier for the RunningToStopped Object.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_RunningToStopped = 5158;

        /// <summary>
        /// The identifier for the Stopping Object.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_Stopping = 5149;

        /// <summary>
        /// The identifier for the StoppedToRunning Object.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_StoppedToRunning = 5157;

        /// <summary>
        /// The identifier for the StoppingToStopped Object.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_StoppingToStopped = 5155;

        /// <summary>
        /// The identifier for the RunningStateMachine Object.
        /// </summary>
        public const uint ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine = 5170;

        /// <summary>
        /// The identifier for the Aborted Object.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_Aborted = 5160;

        /// <summary>
        /// The identifier for the AbortedToCleared Object.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_AbortedToCleared = 5165;

        /// <summary>
        /// The identifier for the Cleared Object.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_Cleared = 5143;

        /// <summary>
        /// The identifier for the ClearedStateMachine Object.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine = 5048;

        /// <summary>
        /// The identifier for the ClearingToStopped Object.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_ClearingToStopped = 5196;

        /// <summary>
        /// The identifier for the Running Object.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_Running = 5200;

        /// <summary>
        /// The identifier for the RunningStateMachine Object.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine = 5153;

        /// <summary>
        /// The identifier for the CompleteToResetting Object.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_CompleteToResetting = 5217;

        /// <summary>
        /// The identifier for the CompletingToComplete Object.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_CompletingToComplete = 5222;

        /// <summary>
        /// The identifier for the ExecuteToCompleting Object.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_ExecuteToCompleting = 5227;

        /// <summary>
        /// The identifier for the ExecuteToHolding Object.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_ExecuteToHolding = 5232;

        /// <summary>
        /// The identifier for the ExecuteToSuspending Object.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_ExecuteToSuspending = 5237;

        /// <summary>
        /// The identifier for the HeldToUnholding Object.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_HeldToUnholding = 5242;

        /// <summary>
        /// The identifier for the RunningToStopped Object.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_RunningToStopped = 5204;

        /// <summary>
        /// The identifier for the StoppedToRunning Object.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_StoppedToRunning = 5208;

        /// <summary>
        /// The identifier for the StoppingToStopped Object.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_StoppingToStopped = 5212;

        /// <summary>
        /// The identifier for the Aborting Object.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_Aborting = 5159;

        /// <summary>
        /// The identifier for the AbortingToAborted Object.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_AbortingToAborted = 5126;

        /// <summary>
        /// The identifier for the ClearedToAborting Object.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedToAborting = 5167;

        /// <summary>
        /// The identifier for the Component Object.
        /// </summary>
        public const uint ComponentSetType_Component = 5088;

        /// <summary>
        /// The identifier for the Components Object.
        /// </summary>
        public const uint LADSDeviceType_Components = 5111;

        /// <summary>
        /// The identifier for the ComponentSet Object.
        /// </summary>
        public const uint LADSDeviceType_ComponentSet = 5086;

        /// <summary>
        /// The identifier for the DeviceHealthAlarms Object.
        /// </summary>
        public const uint LADSDeviceType_DeviceHealthAlarms = 5107;

        /// <summary>
        /// The identifier for the FunctionalUnitSet Object.
        /// </summary>
        public const uint LADSDeviceType_FunctionalUnitSet = 5002;

        /// <summary>
        /// The identifier for the <FunctionalUnit> Object.
        /// </summary>
        public const uint FunctionalUnitSetType_FunctionalUnit = 5091;

        /// <summary>
        /// The identifier for the FunctionSet Object.
        /// </summary>
        public const uint FunctionalUnitSetType_FunctionalUnit_FunctionSet = 5097;

        /// <summary>
        /// The identifier for the <Function> Object.
        /// </summary>
        public const uint FunctionSetType_Function = 5089;

        /// <summary>
        /// The identifier for the AlarmMonitor Object.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor = 5068;

        /// <summary>
        /// The identifier for the LimitState Object.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_LimitState = 5071;

        /// <summary>
        /// The identifier for the ParameterSet Object.
        /// </summary>
        public const uint AnalogControlFunctionType_ParameterSet = 5016;

        /// <summary>
        /// The identifier for the ParameterSet Object.
        /// </summary>
        public const uint AnalogControlFunctionWithTotalizerType_ParameterSet = 5029;

        /// <summary>
        /// The identifier for the StateMachine Object.
        /// </summary>
        public const uint DiscreteControlFunctionType_StateMachine = 5098;

        /// <summary>
        /// The identifier for the Error Object.
        /// </summary>
        public const uint FunctionStateMachineType_Error = 5033;

        /// <summary>
        /// The identifier for the ErrorToOff Object.
        /// </summary>
        public const uint FunctionStateMachineType_ErrorToOff = 5037;

        /// <summary>
        /// The identifier for the Off Object.
        /// </summary>
        public const uint FunctionStateMachineType_Off = 5031;

        /// <summary>
        /// The identifier for the OffToOn Object.
        /// </summary>
        public const uint FunctionStateMachineType_OffToOn = 5034;

        /// <summary>
        /// The identifier for the On Object.
        /// </summary>
        public const uint FunctionStateMachineType_On = 5032;

        /// <summary>
        /// The identifier for the OnToError Object.
        /// </summary>
        public const uint FunctionStateMachineType_OnToError = 5036;

        /// <summary>
        /// The identifier for the OnToOff Object.
        /// </summary>
        public const uint FunctionStateMachineType_OnToOff = 5035;

        /// <summary>
        /// The identifier for the FunctionSet Object.
        /// </summary>
        public const uint BaseControlFunctionType_FunctionSet = 5027;

        /// <summary>
        /// The identifier for the Operational Object.
        /// </summary>
        public const uint BaseControlFunctionType_Operational = 5046;

        /// <summary>
        /// The identifier for the ParameterSet Object.
        /// </summary>
        public const uint BaseControlFunctionType_ParameterSet = 5006;

        /// <summary>
        /// The identifier for the StateMachine Object.
        /// </summary>
        public const uint BaseControlFunctionType_StateMachine = 5038;

        /// <summary>
        /// The identifier for the Tuning Object.
        /// </summary>
        public const uint BaseControlFunctionType_Tuning = 5017;

        /// <summary>
        /// The identifier for the AlarmMonitor Object.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor = 5069;

        /// <summary>
        /// The identifier for the LimitState Object.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_LimitState = 5070;

        /// <summary>
        /// The identifier for the ParameterSet Object.
        /// </summary>
        public const uint AnalogSensorFunctionType_ParameterSet = 5066;

        /// <summary>
        /// The identifier for the ParameterSet Object.
        /// </summary>
        public const uint AnalogSensorFunctionWithCompensationType_ParameterSet = 5067;

        /// <summary>
        /// The identifier for the Configuration Object.
        /// </summary>
        public const uint BaseSensorFunctionType_Configuration = 5030;

        /// <summary>
        /// The identifier for the Operational Object.
        /// </summary>
        public const uint BaseSensorFunctionType_Operational = 5011;

        /// <summary>
        /// The identifier for the ParameterSet Object.
        /// </summary>
        public const uint BaseSensorFunctionType_ParameterSet = 5010;

        /// <summary>
        /// The identifier for the Tuning Object.
        /// </summary>
        public const uint BaseSensorFunctionType_Tuning = 5014;

        /// <summary>
        /// The identifier for the Configuration Object.
        /// </summary>
        public const uint FunctionType_Configuration = 5012;

        /// <summary>
        /// The identifier for the Operational Object.
        /// </summary>
        public const uint CoverFunctionType_Operational = 5064;

        /// <summary>
        /// The identifier for the StateMachine Object.
        /// </summary>
        public const uint CoverFunctionType_StateMachine = 5055;

        /// <summary>
        /// The identifier for the Closed Object.
        /// </summary>
        public const uint CoverFunctionType_StateMachine_Closed = 5056;

        /// <summary>
        /// The identifier for the ClosedToLocked Object.
        /// </summary>
        public const uint CoverFunctionType_StateMachine_ClosedToLocked = 5057;

        /// <summary>
        /// The identifier for the ClosedToOpen Object.
        /// </summary>
        public const uint CoverFunctionType_StateMachine_ClosedToOpen = 5058;

        /// <summary>
        /// The identifier for the Closed Object.
        /// </summary>
        public const uint CoverStateMachineType_Closed = 5028;

        /// <summary>
        /// The identifier for the ClosedToLocked Object.
        /// </summary>
        public const uint CoverStateMachineType_ClosedToLocked = 5052;

        /// <summary>
        /// The identifier for the ClosedToOpen Object.
        /// </summary>
        public const uint CoverStateMachineType_ClosedToOpen = 5054;

        /// <summary>
        /// The identifier for the Error Object.
        /// </summary>
        public const uint CoverStateMachineType_Error = 5050;

        /// <summary>
        /// The identifier for the Locked Object.
        /// </summary>
        public const uint CoverStateMachineType_Locked = 5049;

        /// <summary>
        /// The identifier for the LockedToClosed Object.
        /// </summary>
        public const uint CoverStateMachineType_LockedToClosed = 5053;

        /// <summary>
        /// The identifier for the Opened Object.
        /// </summary>
        public const uint CoverStateMachineType_Opened = 5025;

        /// <summary>
        /// The identifier for the OpenToClosed Object.
        /// </summary>
        public const uint CoverStateMachineType_OpenToClosed = 5051;

        /// <summary>
        /// The identifier for the Error Object.
        /// </summary>
        public const uint CoverFunctionType_StateMachine_Error = 5059;

        /// <summary>
        /// The identifier for the Locked Object.
        /// </summary>
        public const uint CoverFunctionType_StateMachine_Locked = 5060;

        /// <summary>
        /// The identifier for the LockedToClosed Object.
        /// </summary>
        public const uint CoverFunctionType_StateMachine_LockedToClosed = 5061;

        /// <summary>
        /// The identifier for the Opened Object.
        /// </summary>
        public const uint CoverFunctionType_StateMachine_Opened = 5062;

        /// <summary>
        /// The identifier for the OpenToClosed Object.
        /// </summary>
        public const uint CoverFunctionType_StateMachine_OpenToClosed = 5063;

        /// <summary>
        /// The identifier for the FunctionSet Object.
        /// </summary>
        public const uint FunctionType_FunctionSet = 5013;

        /// <summary>
        /// The identifier for the ParameterSet Object.
        /// </summary>
        public const uint FunctionType_ParameterSet = 5009;

        /// <summary>
        /// The identifier for the FunctionSet Object.
        /// </summary>
        public const uint FunctionalUnitType_FunctionSet = 5008;

        /// <summary>
        /// The identifier for the Identification Object.
        /// </summary>
        public const uint FunctionalUnitType_Identification = 5003;

        /// <summary>
        /// The identifier for the ActiveProgram Object.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram = 5190;

        /// <summary>
        /// The identifier for the ProgramTemplate Object.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_ProgramTemplate = 5215;

        /// <summary>
        /// The identifier for the StateMachine Object.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine = 5192;

        /// <summary>
        /// The identifier for the Aborted Object.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_Aborted = 5193;

        /// <summary>
        /// The identifier for the Aborting Object.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_Aborting = 5266;

        /// <summary>
        /// The identifier for the ClearedStateMachine Object.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine = 5198;

        /// <summary>
        /// The identifier for the ClearingToStopped Object.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_ClearingToStopped = 5187;

        /// <summary>
        /// The identifier for the Running Object.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_Running = 5188;

        /// <summary>
        /// The identifier for the RunningStateMachine Object.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine = 5201;

        /// <summary>
        /// The identifier for the RunningToStopped Object.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningToStopped = 5189;

        /// <summary>
        /// The identifier for the StoppedToRunning Object.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_StoppedToRunning = 5194;

        /// <summary>
        /// The identifier for the StoppingToStopped Object.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_StoppingToStopped = 5195;

        /// <summary>
        /// The identifier for the ClearedToAborting Object.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_ClearedToAborting = 5161;

        /// <summary>
        /// The identifier for the Operational Object.
        /// </summary>
        public const uint ProgramManagerType_Operational = 5023;

        /// <summary>
        /// The identifier for the ProgramTemplateSet Object.
        /// </summary>
        public const uint ProgramManagerType_ProgramTemplateSet = 5020;

        /// <summary>
        /// The identifier for the <TemplateName> Object.
        /// </summary>
        public const uint ProgramTemplateSetType_TemplateName_PlaceHolder = 5072;

        /// <summary>
        /// The identifier for the ResultSet Object.
        /// </summary>
        public const uint ProgramManagerType_ResultSet = 5019;

        /// <summary>
        /// The identifier for the <ResultName> Object.
        /// </summary>
        public const uint ResultSetType_ResultName_Placeholder = 5076;

        /// <summary>
        /// The identifier for the FileSet Object.
        /// </summary>
        public const uint ResultSetType_ResultName_Placeholder_FileSet = 5084;

        /// <summary>
        /// The identifier for the <ResultFileName> Object.
        /// </summary>
        public const uint ResultFileSetType_ResultFileName_Placeholder = 5080;

        /// <summary>
        /// The identifier for the FileSet Object.
        /// </summary>
        public const uint ResultType_FileSet = 5081;

        /// <summary>
        /// The identifier for the Template Object.
        /// </summary>
        public const uint ResultType_Template = 5112;

        /// <summary>
        /// The identifier for the VariableSet Object.
        /// </summary>
        public const uint ResultType_VariableSet = 5082;

        /// <summary>
        /// The identifier for the Template Object.
        /// </summary>
        public const uint ResultSetType_ResultName_Placeholder_Template = 5113;

        /// <summary>
        /// The identifier for the VariableSet Object.
        /// </summary>
        public const uint ResultSetType_ResultName_Placeholder_VariableSet = 5085;

        /// <summary>
        /// The identifier for the Lock Object.
        /// </summary>
        public const uint FunctionalUnitType_Lock = 5004;

        /// <summary>
        /// The identifier for the MethodSet Object.
        /// </summary>
        public const uint FunctionalUnitType_MethodSet = 5005;

        /// <summary>
        /// The identifier for the Operational Object.
        /// </summary>
        public const uint FunctionalUnitType_Operational = 5007;

        /// <summary>
        /// The identifier for the ProgramManager Object.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager = 5015;

        /// <summary>
        /// The identifier for the ActiveProgram Object.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram = 5218;

        /// <summary>
        /// The identifier for the ProgramTemplate Object.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate = 5250;

        /// <summary>
        /// The identifier for the StateMachine Object.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine = 5220;

        /// <summary>
        /// The identifier for the ClearedStateMachine Object.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine = 5229;

        /// <summary>
        /// The identifier for the RunningStateMachine Object.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine = 5233;

        /// <summary>
        /// The identifier for the Operational Object.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_Operational = 5018;

        /// <summary>
        /// The identifier for the ProgramTemplateSet Object.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ProgramTemplateSet = 5021;

        /// <summary>
        /// The identifier for the ResultSet Object.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ResultSet = 5022;

        /// <summary>
        /// The identifier for the SupportedPropertySet Object.
        /// </summary>
        public const uint FunctionalUnitType_SupportedPropertySet = 5116;

        /// <summary>
        /// The identifier for the <Property> Object.
        /// </summary>
        public const uint PropertySetType_Property = 5115;

        /// <summary>
        /// The identifier for the Lock Object.
        /// </summary>
        public const uint FunctionalUnitSetType_FunctionalUnit_Lock = 5110;

        /// <summary>
        /// The identifier for the MethodSet Object.
        /// </summary>
        public const uint FunctionalUnitSetType_FunctionalUnit_MethodSet = 5114;

        /// <summary>
        /// The identifier for the Identification Object.
        /// </summary>
        public const uint LADSDeviceType_Identification = 5096;

        /// <summary>
        /// The identifier for the Lock Object.
        /// </summary>
        public const uint LADSDeviceType_Lock = 5001;

        /// <summary>
        /// The identifier for the Maintenance Object.
        /// </summary>
        public const uint LADSDeviceType_Maintenance = 5108;

        /// <summary>
        /// The identifier for the Operational Object.
        /// </summary>
        public const uint LADSDeviceType_Operational = 5154;

        /// <summary>
        /// The identifier for the StateMachine Object.
        /// </summary>
        public const uint LADSDeviceType_StateMachine = 5191;

        /// <summary>
        /// The identifier for the Maintenance Object.
        /// </summary>
        public const uint LADSDeviceStateMachineType_Maintenance = 5179;

        /// <summary>
        /// The identifier for the MaintenanceToOperatingTransition Object.
        /// </summary>
        public const uint LADSDeviceStateMachineType_MaintenanceToOperatingTransition = 5183;

        /// <summary>
        /// The identifier for the Operating Object.
        /// </summary>
        public const uint LADSDeviceStateMachineType_Operating = 5178;

        /// <summary>
        /// The identifier for the MaintenanceToShutdownTransition Object.
        /// </summary>
        public const uint LADSDeviceStateMachineType_MaintenanceToShutdownTransition = 5185;

        /// <summary>
        /// The identifier for the Shutdown Object.
        /// </summary>
        public const uint LADSDeviceStateMachineType_Shutdown = 5180;

        /// <summary>
        /// The identifier for the OperatingToMaintenanceTransition Object.
        /// </summary>
        public const uint LADSDeviceStateMachineType_OperatingToMaintenanceTransition = 5182;

        /// <summary>
        /// The identifier for the OperatingToShutdownTransition Object.
        /// </summary>
        public const uint LADSDeviceStateMachineType_OperatingToShutdownTransition = 5184;

        /// <summary>
        /// The identifier for the OperatingToStandbyTransition Object.
        /// </summary>
        public const uint LADSDeviceStateMachineType_OperatingToStandbyTransition = 5260;

        /// <summary>
        /// The identifier for the Standby Object.
        /// </summary>
        public const uint LADSDeviceStateMachineType_Standby = 5259;

        /// <summary>
        /// The identifier for the Powerup Object.
        /// </summary>
        public const uint LADSDeviceStateMachineType_Powerup = 5177;

        /// <summary>
        /// The identifier for the PowerupToOperatingTransition Object.
        /// </summary>
        public const uint LADSDeviceStateMachineType_PowerupToOperatingTransition = 5181;

        /// <summary>
        /// The identifier for the StandbyToOperatingTransition Object.
        /// </summary>
        public const uint LADSDeviceStateMachineType_StandbyToOperatingTransition = 5263;

        /// <summary>
        /// The identifier for the SupplySet Object.
        /// </summary>
        public const uint LADSDeviceType_SupplySet = 5094;

        /// <summary>
        /// The identifier for the Supply Object.
        /// </summary>
        public const uint SupplySetType_Supply = 5093;

        /// <summary>
        /// The identifier for the TaskSet Object.
        /// </summary>
        public const uint LADSDeviceType_TaskSet = 5092;

        /// <summary>
        /// The identifier for the Task Object.
        /// </summary>
        public const uint TaskSetType_Task = 5090;

        /// <summary>
        /// The identifier for the ComponentSet Object.
        /// </summary>
        public const uint LADSComponentType_ComponentSet = 5087;

        /// <summary>
        /// The identifier for the DeviceHealthAlarms Object.
        /// </summary>
        public const uint LADSComponentType_DeviceHealthAlarms = 5258;

        /// <summary>
        /// The identifier for the Identification Object.
        /// </summary>
        public const uint LADSComponentType_Identification = 5095;

        /// <summary>
        /// The identifier for the Maintenance Object.
        /// </summary>
        public const uint LADSComponentType_Maintenance = 5109;

        /// <summary>
        /// The identifier for the TaskSet Object.
        /// </summary>
        public const uint LADSComponentType_TaskSet = 5106;

        /// <summary>
        /// The identifier for the http://spectaris.de/LADS/ Object.
        /// </summary>
        public const uint Namespaces_http___spectaris_de_LADS_ = 5026;

    }
    #endregion

    #region ObjectType Identifiers
    /// <summary>
    /// A class that declares constants for all ObjectTypes in the Model.
    /// </summary>

    public static partial class ObjectTypes
    {
        /// <summary>
        /// The identifier for the ActiveProgramType ObjectType.
        /// </summary>
        public const uint ActiveProgramType = 1040;

        /// <summary>
        /// The identifier for the BaseControlFunctionMethodSetType ObjectType.
        /// </summary>
        public const uint BaseControlFunctionMethodSetType = 1013;

        /// <summary>
        /// The identifier for the BaseControlFunctionParameterSetType ObjectType.
        /// </summary>
        public const uint BaseControlFunctionParameterSetType = 1012;

        /// <summary>
        /// The identifier for the BaseSensorFunctionParameterSetType ObjectType.
        /// </summary>
        public const uint BaseSensorFunctionParameterSetType = 1015;

        /// <summary>
        /// The identifier for the ComponentSetType ObjectType.
        /// </summary>
        public const uint ComponentSetType = 1025;

        /// <summary>
        /// The identifier for the BaseMaintenanceInformationType ObjectType.
        /// </summary>
        public const uint BaseMaintenanceInformationType = 1034;

        /// <summary>
        /// The identifier for the FunctionalUnitSetType ObjectType.
        /// </summary>
        public const uint FunctionalUnitSetType = 1023;

        /// <summary>
        /// The identifier for the FunctionSetType ObjectType.
        /// </summary>
        public const uint FunctionSetType = 1026;

        /// <summary>
        /// The identifier for the ProgramTemplateSetType ObjectType.
        /// </summary>
        public const uint ProgramTemplateSetType = 1019;

        /// <summary>
        /// The identifier for the ProgramTemplateType ObjectType.
        /// </summary>
        public const uint ProgramTemplateType = 1018;

        /// <summary>
        /// The identifier for the PropertySetType ObjectType.
        /// </summary>
        public const uint PropertySetType = 1033;

        /// <summary>
        /// The identifier for the PropertyType ObjectType.
        /// </summary>
        public const uint PropertyType = 1035;

        /// <summary>
        /// The identifier for the ResultFileSetType ObjectType.
        /// </summary>
        public const uint ResultFileSetType = 1022;

        /// <summary>
        /// The identifier for the ResultFileType ObjectType.
        /// </summary>
        public const uint ResultFileType = 1001;

        /// <summary>
        /// The identifier for the ResultSetType ObjectType.
        /// </summary>
        public const uint ResultSetType = 1020;

        /// <summary>
        /// The identifier for the ResultType ObjectType.
        /// </summary>
        public const uint ResultType = 1021;

        /// <summary>
        /// The identifier for the CoverStateMachineType ObjectType.
        /// </summary>
        public const uint CoverStateMachineType = 1010;

        /// <summary>
        /// The identifier for the FunctionStateMachineType ObjectType.
        /// </summary>
        public const uint FunctionStateMachineType = 1008;

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType ObjectType.
        /// </summary>
        public const uint LADSDeviceStateMachineType = 1039;

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType ObjectType.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType = 1038;

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType ObjectType.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType = 1037;

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType ObjectType.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType = 1036;

        /// <summary>
        /// The identifier for the SupplySetType ObjectType.
        /// </summary>
        public const uint SupplySetType = 1031;

        /// <summary>
        /// The identifier for the SupplyType ObjectType.
        /// </summary>
        public const uint SupplyType = 1030;

        /// <summary>
        /// The identifier for the TaskSetType ObjectType.
        /// </summary>
        public const uint TaskSetType = 1027;

        /// <summary>
        /// The identifier for the TaskType ObjectType.
        /// </summary>
        public const uint TaskType = 1028;

        /// <summary>
        /// The identifier for the LADSDeviceType ObjectType.
        /// </summary>
        public const uint LADSDeviceType = 1002;

        /// <summary>
        /// The identifier for the LADSComponentType ObjectType.
        /// </summary>
        public const uint LADSComponentType = 1024;

        /// <summary>
        /// The identifier for the FunctionalUnitType ObjectType.
        /// </summary>
        public const uint FunctionalUnitType = 1003;

        /// <summary>
        /// The identifier for the FunctionType ObjectType.
        /// </summary>
        public const uint FunctionType = 1004;

        /// <summary>
        /// The identifier for the BaseControlFunctionType ObjectType.
        /// </summary>
        public const uint BaseControlFunctionType = 1007;

        /// <summary>
        /// The identifier for the AnalogControlFunctionType ObjectType.
        /// </summary>
        public const uint AnalogControlFunctionType = 1009;

        /// <summary>
        /// The identifier for the AnalogControlFunctionWithTotalizerType ObjectType.
        /// </summary>
        public const uint AnalogControlFunctionWithTotalizerType = 1014;

        /// <summary>
        /// The identifier for the DiscreteControlFunctionType ObjectType.
        /// </summary>
        public const uint DiscreteControlFunctionType = 1032;

        /// <summary>
        /// The identifier for the BaseSensorFunctionType ObjectType.
        /// </summary>
        public const uint BaseSensorFunctionType = 1005;

        /// <summary>
        /// The identifier for the AnalogSensorFunctionType ObjectType.
        /// </summary>
        public const uint AnalogSensorFunctionType = 1016;

        /// <summary>
        /// The identifier for the AnalogSensorFunctionWithCompensationType ObjectType.
        /// </summary>
        public const uint AnalogSensorFunctionWithCompensationType = 1017;

        /// <summary>
        /// The identifier for the CoverFunctionType ObjectType.
        /// </summary>
        public const uint CoverFunctionType = 1011;

        /// <summary>
        /// The identifier for the ProgramManagerType ObjectType.
        /// </summary>
        public const uint ProgramManagerType = 1006;

    }
    #endregion

    #region Method Identifiers
    /// <summary>
    /// A class that declares constants for all Methods in the Model.
    /// </summary>

    public static partial class Methods
    {
        /// <summary>
        /// The identifier for the Abort Method.
        /// </summary>
        public const uint ActiveProgramType_StateMachine_Abort = 7033;

        /// <summary>
        /// The identifier for the Clear Method.
        /// </summary>
        public const uint ActiveProgramType_StateMachine_Clear = 7036;

        /// <summary>
        /// The identifier for the Reset Method.
        /// </summary>
        public const uint ActiveProgramType_StateMachine_ClearedStateMachine_Reset = 7112;

        /// <summary>
        /// The identifier for the Hold Method.
        /// </summary>
        public const uint ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_Hold = 7096;

        /// <summary>
        /// The identifier for the Reset Method.
        /// </summary>
        public const uint ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_Reset = 7009;

        /// <summary>
        /// The identifier for the Start Method.
        /// </summary>
        public const uint ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_Start = 7010;

        /// <summary>
        /// The identifier for the Suspend Method.
        /// </summary>
        public const uint ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_Suspend = 7092;

        /// <summary>
        /// The identifier for the ToComplete Method.
        /// </summary>
        public const uint ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_ToComplete = 7093;

        /// <summary>
        /// The identifier for the Unhold Method.
        /// </summary>
        public const uint ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_Unhold = 7094;

        /// <summary>
        /// The identifier for the Unsuspend Method.
        /// </summary>
        public const uint ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_Unsuspend = 7095;

        /// <summary>
        /// The identifier for the Stop Method.
        /// </summary>
        public const uint ActiveProgramType_StateMachine_ClearedStateMachine_Stop = 7113;

        /// <summary>
        /// The identifier for the ResetTotalizer Method.
        /// </summary>
        public const uint BaseControlFunctionMethodSetType_ResetTotalizer = 7023;

        /// <summary>
        /// The identifier for the BreakLock Method.
        /// </summary>
        public const uint FunctionalUnitSetType_FunctionalUnit_Lock_BreakLock = 7063;

        /// <summary>
        /// The identifier for the ExitLock Method.
        /// </summary>
        public const uint FunctionalUnitSetType_FunctionalUnit_Lock_ExitLock = 7064;

        /// <summary>
        /// The identifier for the InitLock Method.
        /// </summary>
        public const uint FunctionalUnitSetType_FunctionalUnit_Lock_InitLock = 7065;

        /// <summary>
        /// The identifier for the RenewLock Method.
        /// </summary>
        public const uint FunctionalUnitSetType_FunctionalUnit_Lock_RenewLock = 7066;

        /// <summary>
        /// The identifier for the StartFunctions Method.
        /// </summary>
        public const uint FunctionalUnitSetType_FunctionalUnit_MethodSet_StartFunctions = 7067;

        /// <summary>
        /// The identifier for the StopFunctions Method.
        /// </summary>
        public const uint FunctionalUnitSetType_FunctionalUnit_MethodSet_StopFunctions = 7068;

        /// <summary>
        /// The identifier for the Select Method.
        /// </summary>
        public const uint ProgramTemplateSetType_TemplateName_PlaceHolder_Select = 7047;

        /// <summary>
        /// The identifier for the Download Method.
        /// </summary>
        public const uint ProgramTemplateSetType_Download = 7049;

        /// <summary>
        /// The identifier for the Remove Method.
        /// </summary>
        public const uint ProgramTemplateSetType_Remove = 7050;

        /// <summary>
        /// The identifier for the Upload Method.
        /// </summary>
        public const uint ProgramTemplateSetType_Upload = 7048;

        /// <summary>
        /// The identifier for the Select Method.
        /// </summary>
        public const uint ProgramTemplateType_Select = 7046;

        /// <summary>
        /// The identifier for the Close Method.
        /// </summary>
        public const uint CoverStateMachineType_Close = 7012;

        /// <summary>
        /// The identifier for the Lock Method.
        /// </summary>
        public const uint CoverStateMachineType_Lock = 7013;

        /// <summary>
        /// The identifier for the Open Method.
        /// </summary>
        public const uint CoverStateMachineType_Open = 7011;

        /// <summary>
        /// The identifier for the Unlock Method.
        /// </summary>
        public const uint CoverStateMachineType_Unlock = 7014;

        /// <summary>
        /// The identifier for the Reset Method.
        /// </summary>
        public const uint FunctionStateMachineType_Reset = 7026;

        /// <summary>
        /// The identifier for the Start Method.
        /// </summary>
        public const uint FunctionStateMachineType_Start = 7024;

        /// <summary>
        /// The identifier for the Stop Method.
        /// </summary>
        public const uint FunctionStateMachineType_Stop = 7025;

        /// <summary>
        /// The identifier for the GotoMaintenance Method.
        /// </summary>
        public const uint LADSDeviceStateMachineType_GotoMaintenance = 7030;

        /// <summary>
        /// The identifier for the GotoOperating Method.
        /// </summary>
        public const uint LADSDeviceStateMachineType_GotoOperating = 7021;

        /// <summary>
        /// The identifier for the GotoShutdown Method.
        /// </summary>
        public const uint LADSDeviceStateMachineType_GotoShutdown = 7031;

        /// <summary>
        /// The identifier for the GotoStandby Method.
        /// </summary>
        public const uint LADSDeviceStateMachineType_GotoStandby = 7032;

        /// <summary>
        /// The identifier for the Abort Method.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_Abort = 7078;

        /// <summary>
        /// The identifier for the Clear Method.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_Clear = 7079;

        /// <summary>
        /// The identifier for the Reset Method.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_Reset = 7111;

        /// <summary>
        /// The identifier for the Hold Method.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_Hold = 7090;

        /// <summary>
        /// The identifier for the Reset Method.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_Reset = 7086;

        /// <summary>
        /// The identifier for the Start Method.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_Start = 7087;

        /// <summary>
        /// The identifier for the Suspend Method.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_Suspend = 7089;

        /// <summary>
        /// The identifier for the ToComplete Method.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_ToComplete = 7119;

        /// <summary>
        /// The identifier for the Unhold Method.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_Unhold = 7088;

        /// <summary>
        /// The identifier for the Unsuspend Method.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_Unsuspend = 7091;

        /// <summary>
        /// The identifier for the Stop Method.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_Stop = 7110;

        /// <summary>
        /// The identifier for the Reset Method.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_Reset = 7077;

        /// <summary>
        /// The identifier for the Hold Method.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_RunningStateMachine_Hold = 7084;

        /// <summary>
        /// The identifier for the Reset Method.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_RunningStateMachine_Reset = 7080;

        /// <summary>
        /// The identifier for the Start Method.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_RunningStateMachine_Start = 7081;

        /// <summary>
        /// The identifier for the Suspend Method.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_RunningStateMachine_Suspend = 7083;

        /// <summary>
        /// The identifier for the ToComplete Method.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_RunningStateMachine_ToComplete = 7118;

        /// <summary>
        /// The identifier for the Unhold Method.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_RunningStateMachine_Unhold = 7082;

        /// <summary>
        /// The identifier for the Unsuspend Method.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_RunningStateMachine_Unsuspend = 7085;

        /// <summary>
        /// The identifier for the Stop Method.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_Stop = 7076;

        /// <summary>
        /// The identifier for the Hold Method.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_Hold = 7074;

        /// <summary>
        /// The identifier for the Reset Method.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_Reset = 7069;

        /// <summary>
        /// The identifier for the Start Method.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_Start = 7071;

        /// <summary>
        /// The identifier for the Suspend Method.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_Suspend = 7073;

        /// <summary>
        /// The identifier for the ToComplete Method.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_ToComplete = 7070;

        /// <summary>
        /// The identifier for the Unhold Method.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_Unhold = 7072;

        /// <summary>
        /// The identifier for the Unsuspend Method.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_Unsuspend = 7075;

        /// <summary>
        /// The identifier for the Execute Method.
        /// </summary>
        public const uint TaskSetType_Task_Execute = 7062;

        /// <summary>
        /// The identifier for the Execute Method.
        /// </summary>
        public const uint TaskType_Execute = 7061;

        /// <summary>
        /// The identifier for the BreakLock Method.
        /// </summary>
        public const uint LADSDeviceType_Lock_BreakLock = 7001;

        /// <summary>
        /// The identifier for the ExitLock Method.
        /// </summary>
        public const uint LADSDeviceType_Lock_ExitLock = 7002;

        /// <summary>
        /// The identifier for the InitLock Method.
        /// </summary>
        public const uint LADSDeviceType_Lock_InitLock = 7003;

        /// <summary>
        /// The identifier for the RenewLock Method.
        /// </summary>
        public const uint LADSDeviceType_Lock_RenewLock = 7004;

        /// <summary>
        /// The identifier for the GotoMaintenance Method.
        /// </summary>
        public const uint LADSDeviceType_StateMachine_GotoMaintenance = 7123;

        /// <summary>
        /// The identifier for the GotoOperating Method.
        /// </summary>
        public const uint LADSDeviceType_StateMachine_GotoOperating = 7124;

        /// <summary>
        /// The identifier for the GotoShutdown Method.
        /// </summary>
        public const uint LADSDeviceType_StateMachine_GotoShutdown = 7125;

        /// <summary>
        /// The identifier for the GotoStandby Method.
        /// </summary>
        public const uint LADSDeviceType_StateMachine_GotoStandby = 7126;

        /// <summary>
        /// The identifier for the BreakLock Method.
        /// </summary>
        public const uint FunctionalUnitType_Lock_BreakLock = 7005;

        /// <summary>
        /// The identifier for the ExitLock Method.
        /// </summary>
        public const uint FunctionalUnitType_Lock_ExitLock = 7006;

        /// <summary>
        /// The identifier for the InitLock Method.
        /// </summary>
        public const uint FunctionalUnitType_Lock_InitLock = 7007;

        /// <summary>
        /// The identifier for the RenewLock Method.
        /// </summary>
        public const uint FunctionalUnitType_Lock_RenewLock = 7008;

        /// <summary>
        /// The identifier for the StartFunctions Method.
        /// </summary>
        public const uint FunctionalUnitType_MethodSet_StartFunctions = 7019;

        /// <summary>
        /// The identifier for the StopFunctions Method.
        /// </summary>
        public const uint FunctionalUnitType_MethodSet_StopFunctions = 7020;

        /// <summary>
        /// The identifier for the Abort Method.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_Abort = 7035;

        /// <summary>
        /// The identifier for the Clear Method.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_Clear = 7058;

        /// <summary>
        /// The identifier for the Reset Method.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_Reset = 7116;

        /// <summary>
        /// The identifier for the Hold Method.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Hold = 7108;

        /// <summary>
        /// The identifier for the Reset Method.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Reset = 7104;

        /// <summary>
        /// The identifier for the Start Method.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start = 7105;

        /// <summary>
        /// The identifier for the Suspend Method.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Suspend = 7107;

        /// <summary>
        /// The identifier for the ToComplete Method.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_ToComplete = 7122;

        /// <summary>
        /// The identifier for the Unhold Method.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Unhold = 7106;

        /// <summary>
        /// The identifier for the Unsuspend Method.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Unsuspend = 7109;

        /// <summary>
        /// The identifier for the Stop Method.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_Stop = 7117;

        /// <summary>
        /// The identifier for the Download Method.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ProgramTemplateSet_Download = 7054;

        /// <summary>
        /// The identifier for the Remove Method.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ProgramTemplateSet_Remove = 7055;

        /// <summary>
        /// The identifier for the Upload Method.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ProgramTemplateSet_Upload = 7056;

        /// <summary>
        /// The identifier for the Acknowledge Method.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_Acknowledge = 7042;

        /// <summary>
        /// The identifier for the AddComment Method.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_AddComment = 7043;

        /// <summary>
        /// The identifier for the Disable Method.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_Disable = 7044;

        /// <summary>
        /// The identifier for the Enable Method.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_Enable = 7045;

        /// <summary>
        /// The identifier for the Start Method.
        /// </summary>
        public const uint DiscreteControlFunctionType_StateMachine_Start = 7059;

        /// <summary>
        /// The identifier for the Stop Method.
        /// </summary>
        public const uint DiscreteControlFunctionType_StateMachine_Stop = 7060;

        /// <summary>
        /// The identifier for the Reset Method.
        /// </summary>
        public const uint BaseControlFunctionType_StateMachine_Reset = 7029;

        /// <summary>
        /// The identifier for the Start Method.
        /// </summary>
        public const uint BaseControlFunctionType_StateMachine_Start = 7027;

        /// <summary>
        /// The identifier for the Stop Method.
        /// </summary>
        public const uint BaseControlFunctionType_StateMachine_Stop = 7028;

        /// <summary>
        /// The identifier for the Acknowledge Method.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_Acknowledge = 7038;

        /// <summary>
        /// The identifier for the AddComment Method.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_AddComment = 7039;

        /// <summary>
        /// The identifier for the Disable Method.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_Disable = 7040;

        /// <summary>
        /// The identifier for the Enable Method.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_Enable = 7041;

        /// <summary>
        /// The identifier for the Close Method.
        /// </summary>
        public const uint CoverFunctionType_StateMachine_Close = 7015;

        /// <summary>
        /// The identifier for the Lock Method.
        /// </summary>
        public const uint CoverFunctionType_StateMachine_Lock = 7016;

        /// <summary>
        /// The identifier for the Open Method.
        /// </summary>
        public const uint CoverFunctionType_StateMachine_Open = 7017;

        /// <summary>
        /// The identifier for the Unlock Method.
        /// </summary>
        public const uint CoverFunctionType_StateMachine_Unlock = 7018;

        /// <summary>
        /// The identifier for the Abort Method.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_Abort = 7034;

        /// <summary>
        /// The identifier for the Clear Method.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_Clear = 7057;

        /// <summary>
        /// The identifier for the Reset Method.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_Reset = 7115;

        /// <summary>
        /// The identifier for the Hold Method.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Hold = 7102;

        /// <summary>
        /// The identifier for the Reset Method.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Reset = 7098;

        /// <summary>
        /// The identifier for the Start Method.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start = 7099;

        /// <summary>
        /// The identifier for the Suspend Method.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Suspend = 7101;

        /// <summary>
        /// The identifier for the ToComplete Method.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_ToComplete = 7121;

        /// <summary>
        /// The identifier for the Unhold Method.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Unhold = 7100;

        /// <summary>
        /// The identifier for the Unsuspend Method.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Unsuspend = 7103;

        /// <summary>
        /// The identifier for the Stop Method.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_Stop = 7114;

        /// <summary>
        /// The identifier for the Download Method.
        /// </summary>
        public const uint ProgramManagerType_ProgramTemplateSet_Download = 7051;

        /// <summary>
        /// The identifier for the Remove Method.
        /// </summary>
        public const uint ProgramManagerType_ProgramTemplateSet_Remove = 7052;

        /// <summary>
        /// The identifier for the Upload Method.
        /// </summary>
        public const uint ProgramManagerType_ProgramTemplateSet_Upload = 7053;

    }
    #endregion

    #region ReferenceType Identifiers
    /// <summary>
    /// A class that declares constants for all ReferenceTyped in the Model.
    /// </summary>

    public static partial class ReferenceTypes
    {
        /// <summary>
        /// The identifier for the Utilizes ReferenceType.
        /// </summary>
        public const uint Utilizes = 4002;

    }
    #endregion

    #region Variable Identifiers
    /// <summary>
    /// A class that declares constants for all Variables in the Model.
    /// </summary>

    public static partial class Variables
    {
        /// <summary>
        /// The identifier for the TypeDictionary Variable.
        /// </summary>
        public const uint TypeDictionary_BinarySchema = 6275;

        /// <summary>
        /// The identifier for the NamespaceUri Variable.
        /// </summary>
        public const uint TypeDictionary_BinarySchema_NamespaceUri = 6276;

        /// <summary>
        /// The identifier for the ResultPropertiesDataType Variable.
        /// </summary>
        public const uint TypeDictionary_BinarySchema_ResultPropertiesDataType = 6263;

        /// <summary>
        /// The identifier for the TemplatePropertiesDataType Variable.
        /// </summary>
        public const uint TypeDictionary_BinarySchema_TemplatePropertiesDataType = 6279;

        /// <summary>
        /// The identifier for the TypeDictionary Variable.
        /// </summary>
        public const uint TypeDictionary_XmlSchema = 6277;

        /// <summary>
        /// The identifier for the NamespaceUri Variable.
        /// </summary>
        public const uint TypeDictionary_XmlSchema_NamespaceUri = 6278;

        /// <summary>
        /// The identifier for the ResultPropertiesDataType Variable.
        /// </summary>
        public const uint TypeDictionary_XmlSchema_ResultPropertiesDataType = 6264;

        /// <summary>
        /// The identifier for the TemplatePropertiesDataType Variable.
        /// </summary>
        public const uint TypeDictionary_XmlSchema_TemplatePropertiesDataType = 6280;

        /// <summary>
        /// The identifier for the Author Variable.
        /// </summary>
        public const uint ActiveProgramType_ProgramTemplate_Author = 6557;

        /// <summary>
        /// The identifier for the Created Variable.
        /// </summary>
        public const uint ActiveProgramType_ProgramTemplate_Created = 6558;

        /// <summary>
        /// The identifier for the Description Variable.
        /// </summary>
        public const uint ActiveProgramType_ProgramTemplate_Description = 6559;

        /// <summary>
        /// The identifier for the Modified Variable.
        /// </summary>
        public const uint ActiveProgramType_ProgramTemplate_Modified = 6560;

        /// <summary>
        /// The identifier for the Name Variable.
        /// </summary>
        public const uint ActiveProgramType_ProgramTemplate_Name = 6561;

        /// <summary>
        /// The identifier for the Status Variable.
        /// </summary>
        public const uint ActiveProgramType_ProgramTemplate_Status = 6562;

        /// <summary>
        /// The identifier for the Type Variable.
        /// </summary>
        public const uint ActiveProgramType_ProgramTemplate_Type = 6563;

        /// <summary>
        /// The identifier for the Version Variable.
        /// </summary>
        public const uint ActiveProgramType_ProgramTemplate_Version = 6564;

        /// <summary>
        /// The identifier for the AvailableStates Variable.
        /// </summary>
        public const uint ActiveProgramType_StateMachine_AvailableStates = 6100;

        /// <summary>
        /// The identifier for the AvailableTransitions Variable.
        /// </summary>
        public const uint ActiveProgramType_StateMachine_AvailableTransitions = 6101;

        /// <summary>
        /// The identifier for the AvailableStates Variable.
        /// </summary>
        public const uint ActiveProgramType_StateMachine_ClearedStateMachine_AvailableStates = 6104;

        /// <summary>
        /// The identifier for the AvailableTransitions Variable.
        /// </summary>
        public const uint ActiveProgramType_StateMachine_ClearedStateMachine_AvailableTransitions = 6105;

        /// <summary>
        /// The identifier for the CurrentState Variable.
        /// </summary>
        public const uint ActiveProgramType_StateMachine_ClearedStateMachine_CurrentState = 6109;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint ActiveProgramType_StateMachine_ClearedStateMachine_CurrentState_Id = 6110;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint ActiveProgramType_StateMachine_CurrentState_Id = 6479;

        /// <summary>
        /// The identifier for the AvailableStates Variable.
        /// </summary>
        public const uint ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableStates = 6111;

        /// <summary>
        /// The identifier for the AvailableTransitions Variable.
        /// </summary>
        public const uint ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableTransitions = 6320;

        /// <summary>
        /// The identifier for the CurrentState Variable.
        /// </summary>
        public const uint ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState = 6328;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState_Id = 6357;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_Start_InputArguments = 6088;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_Start_OutputArguments = 6102;

        /// <summary>
        /// The identifier for the CurrentState Variable.
        /// </summary>
        public const uint ActiveProgramType_StateMachine_CurrentState = 6478;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint BaseControlFunctionMethodSetType_ResetTotalizer_InputArguments = 6188;

        /// <summary>
        /// The identifier for the CtrlP Variable.
        /// </summary>
        public const uint BaseControlFunctionParameterSetType_CtrlP = 6135;

        /// <summary>
        /// The identifier for the CtrlTd Variable.
        /// </summary>
        public const uint BaseControlFunctionParameterSetType_CtrlTd = 6137;

        /// <summary>
        /// The identifier for the CtrlTi Variable.
        /// </summary>
        public const uint BaseControlFunctionParameterSetType_CtrlTi = 6136;

        /// <summary>
        /// The identifier for the CurrentValue Variable.
        /// </summary>
        public const uint BaseControlFunctionParameterSetType_CurrentValue = 6034;

        /// <summary>
        /// The identifier for the EngineeringUnits Variable.
        /// </summary>
        public const uint BaseControlFunctionParameterSetType_CurrentValue_EngineeringUnits = 6035;

        /// <summary>
        /// The identifier for the EURange Variable.
        /// </summary>
        public const uint BaseControlFunctionParameterSetType_CurrentValue_EURange = 6036;

        /// <summary>
        /// The identifier for the IsEnabled Variable.
        /// </summary>
        public const uint BaseControlFunctionParameterSetType_IsEnabled = 6138;

        /// <summary>
        /// The identifier for the TargetValue Variable.
        /// </summary>
        public const uint BaseControlFunctionParameterSetType_TargetValue = 6031;

        /// <summary>
        /// The identifier for the EngineeringUnits Variable.
        /// </summary>
        public const uint BaseControlFunctionParameterSetType_TargetValue_EngineeringUnits = 6032;

        /// <summary>
        /// The identifier for the EURange Variable.
        /// </summary>
        public const uint BaseControlFunctionParameterSetType_TargetValue_EURange = 6033;

        /// <summary>
        /// The identifier for the TotalizedValue Variable.
        /// </summary>
        public const uint BaseControlFunctionParameterSetType_TotalizedValue = 6037;

        /// <summary>
        /// The identifier for the EngineeringUnits Variable.
        /// </summary>
        public const uint BaseControlFunctionParameterSetType_TotalizedValue_EngineeringUnits = 6038;

        /// <summary>
        /// The identifier for the EURange Variable.
        /// </summary>
        public const uint BaseControlFunctionParameterSetType_TotalizedValue_EURange = 6039;

        /// <summary>
        /// The identifier for the CalibrationValues Variable.
        /// </summary>
        public const uint BaseSensorFunctionParameterSetType_CalibrationValues = 6165;

        /// <summary>
        /// The identifier for the CompensationValue Variable.
        /// </summary>
        public const uint BaseSensorFunctionParameterSetType_CompensationValue = 6161;

        /// <summary>
        /// The identifier for the EngineeringUnits Variable.
        /// </summary>
        public const uint BaseSensorFunctionParameterSetType_CompensationValue_EngineeringUnits = 6162;

        /// <summary>
        /// The identifier for the EURange Variable.
        /// </summary>
        public const uint BaseSensorFunctionParameterSetType_CompensationValue_EURange = 6163;

        /// <summary>
        /// The identifier for the Damping Variable.
        /// </summary>
        public const uint BaseSensorFunctionParameterSetType_Damping = 6164;

        /// <summary>
        /// The identifier for the RawValue Variable.
        /// </summary>
        public const uint BaseSensorFunctionParameterSetType_RawValue = 6155;

        /// <summary>
        /// The identifier for the EngineeringUnits Variable.
        /// </summary>
        public const uint BaseSensorFunctionParameterSetType_RawValue_EngineeringUnits = 6156;

        /// <summary>
        /// The identifier for the EURange Variable.
        /// </summary>
        public const uint BaseSensorFunctionParameterSetType_RawValue_EURange = 6157;

        /// <summary>
        /// The identifier for the SensorValue Variable.
        /// </summary>
        public const uint BaseSensorFunctionParameterSetType_SensorValue = 6158;

        /// <summary>
        /// The identifier for the EngineeringUnits Variable.
        /// </summary>
        public const uint BaseSensorFunctionParameterSetType_SensorValue_EngineeringUnits = 6159;

        /// <summary>
        /// The identifier for the EURange Variable.
        /// </summary>
        public const uint BaseSensorFunctionParameterSetType_SensorValue_EURange = 6160;

        /// <summary>
        /// The identifier for the TotalOperationCycles Variable.
        /// </summary>
        public const uint BaseMaintenanceInformationType_TotalOperationCycles = 6368;

        /// <summary>
        /// The identifier for the TotalOperationDuration Variable.
        /// </summary>
        public const uint BaseMaintenanceInformationType_TotalOperationDuration = 6369;

        /// <summary>
        /// The identifier for the ComponentName Variable.
        /// </summary>
        public const uint FunctionalUnitSetType_FunctionalUnit_ComponentName = 6361;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint FunctionalUnitSetType_FunctionalUnit_Lock_BreakLock_OutputArguments = 6363;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint FunctionalUnitSetType_FunctionalUnit_Lock_ExitLock_OutputArguments = 6381;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint FunctionalUnitSetType_FunctionalUnit_Lock_InitLock_InputArguments = 6382;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint FunctionalUnitSetType_FunctionalUnit_Lock_InitLock_OutputArguments = 6383;

        /// <summary>
        /// The identifier for the Locked Variable.
        /// </summary>
        public const uint FunctionalUnitSetType_FunctionalUnit_Lock_Locked = 6384;

        /// <summary>
        /// The identifier for the LockingClient Variable.
        /// </summary>
        public const uint FunctionalUnitSetType_FunctionalUnit_Lock_LockingClient = 6385;

        /// <summary>
        /// The identifier for the LockingUser Variable.
        /// </summary>
        public const uint FunctionalUnitSetType_FunctionalUnit_Lock_LockingUser = 6386;

        /// <summary>
        /// The identifier for the RemainingLockTime Variable.
        /// </summary>
        public const uint FunctionalUnitSetType_FunctionalUnit_Lock_RemainingLockTime = 6387;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint FunctionalUnitSetType_FunctionalUnit_Lock_RenewLock_OutputArguments = 6388;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint FunctionalUnitSetType_FunctionalUnit_MethodSet_StartFunctions_InputArguments = 6420;

        /// <summary>
        /// The identifier for the Author Variable.
        /// </summary>
        public const uint ProgramTemplateSetType_TemplateName_PlaceHolder_Author = 6349;

        /// <summary>
        /// The identifier for the Created Variable.
        /// </summary>
        public const uint ProgramTemplateSetType_TemplateName_PlaceHolder_Created = 6343;

        /// <summary>
        /// The identifier for the Description Variable.
        /// </summary>
        public const uint ProgramTemplateSetType_TemplateName_PlaceHolder_Description = 6342;

        /// <summary>
        /// The identifier for the Modified Variable.
        /// </summary>
        public const uint ProgramTemplateSetType_TemplateName_PlaceHolder_Modified = 6345;

        /// <summary>
        /// The identifier for the Name Variable.
        /// </summary>
        public const uint ProgramTemplateSetType_TemplateName_PlaceHolder_Name = 6260;

        /// <summary>
        /// The identifier for the Status Variable.
        /// </summary>
        public const uint ProgramTemplateSetType_TemplateName_PlaceHolder_Status = 6392;

        /// <summary>
        /// The identifier for the Type Variable.
        /// </summary>
        public const uint ProgramTemplateSetType_TemplateName_PlaceHolder_Type = 6391;

        /// <summary>
        /// The identifier for the Version Variable.
        /// </summary>
        public const uint ProgramTemplateSetType_TemplateName_PlaceHolder_Version = 6347;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint ProgramTemplateSetType_Download_InputArguments = 6273;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint ProgramTemplateSetType_Download_OutputArguments = 6274;

        /// <summary>
        /// The identifier for the NodeVersion Variable.
        /// </summary>
        public const uint ProgramTemplateSetType_NodeVersion = 6256;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint ProgramTemplateSetType_Remove_InputArguments = 6272;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint ProgramTemplateSetType_Upload_InputArguments = 6271;

        /// <summary>
        /// The identifier for the Author Variable.
        /// </summary>
        public const uint ProgramTemplateType_Author = 6348;

        /// <summary>
        /// The identifier for the Created Variable.
        /// </summary>
        public const uint ProgramTemplateType_Created = 6341;

        /// <summary>
        /// The identifier for the Description Variable.
        /// </summary>
        public const uint ProgramTemplateType_Description = 6340;

        /// <summary>
        /// The identifier for the Modified Variable.
        /// </summary>
        public const uint ProgramTemplateType_Modified = 6344;

        /// <summary>
        /// The identifier for the Name Variable.
        /// </summary>
        public const uint ProgramTemplateType_Name = 6259;

        /// <summary>
        /// The identifier for the Status Variable.
        /// </summary>
        public const uint ProgramTemplateType_Status = 6390;

        /// <summary>
        /// The identifier for the Type Variable.
        /// </summary>
        public const uint ProgramTemplateType_Type = 6389;

        /// <summary>
        /// The identifier for the Version Variable.
        /// </summary>
        public const uint ProgramTemplateType_Version = 6346;

        /// <summary>
        /// The identifier for the MimeType Variable.
        /// </summary>
        public const uint ResultFileSetType_ResultFileName_Placeholder_MimeType = 6300;

        /// <summary>
        /// The identifier for the Name Variable.
        /// </summary>
        public const uint ResultFileSetType_ResultFileName_Placeholder_Name = 6301;

        /// <summary>
        /// The identifier for the URL Variable.
        /// </summary>
        public const uint ResultFileSetType_ResultFileName_Placeholder_URL = 6302;

        /// <summary>
        /// The identifier for the NodeVersion Variable.
        /// </summary>
        public const uint ResultFileSetType_NodeVersion = 6287;

        /// <summary>
        /// The identifier for the MimeType Variable.
        /// </summary>
        public const uint ResultFileType_MimeType = 6297;

        /// <summary>
        /// The identifier for the Name Variable.
        /// </summary>
        public const uint ResultFileType_Name = 6298;

        /// <summary>
        /// The identifier for the URL Variable.
        /// </summary>
        public const uint ResultFileType_URL = 6299;

        /// <summary>
        /// The identifier for the Client Variable.
        /// </summary>
        public const uint ResultSetType_ResultName_Placeholder_Client = 6399;

        /// <summary>
        /// The identifier for the Descrition Variable.
        /// </summary>
        public const uint ResultSetType_ResultName_Placeholder_Descrition = 6398;

        /// <summary>
        /// The identifier for the NodeVersion Variable.
        /// </summary>
        public const uint ResultSetType_ResultName_Placeholder_FileSet_NodeVersion = 6306;

        /// <summary>
        /// The identifier for the JobId Variable.
        /// </summary>
        public const uint ResultSetType_ResultName_Placeholder_JobId = 6400;

        /// <summary>
        /// The identifier for the Name Variable.
        /// </summary>
        public const uint ResultSetType_ResultName_Placeholder_Name = 6397;

        /// <summary>
        /// The identifier for the SampleIds Variable.
        /// </summary>
        public const uint ResultSetType_ResultName_Placeholder_SampleIds = 6395;

        /// <summary>
        /// The identifier for the Started Variable.
        /// </summary>
        public const uint ResultSetType_ResultName_Placeholder_Started = 6402;

        /// <summary>
        /// The identifier for the Stopped Variable.
        /// </summary>
        public const uint ResultSetType_ResultName_Placeholder_Stopped = 6403;

        /// <summary>
        /// The identifier for the Author Variable.
        /// </summary>
        public const uint ResultSetType_ResultName_Placeholder_Template_Author = 6411;

        /// <summary>
        /// The identifier for the Created Variable.
        /// </summary>
        public const uint ResultSetType_ResultName_Placeholder_Template_Created = 6412;

        /// <summary>
        /// The identifier for the Description Variable.
        /// </summary>
        public const uint ResultSetType_ResultName_Placeholder_Template_Description = 6413;

        /// <summary>
        /// The identifier for the Modified Variable.
        /// </summary>
        public const uint ResultSetType_ResultName_Placeholder_Template_Modified = 6414;

        /// <summary>
        /// The identifier for the Name Variable.
        /// </summary>
        public const uint ResultSetType_ResultName_Placeholder_Template_Name = 6415;

        /// <summary>
        /// The identifier for the Status Variable.
        /// </summary>
        public const uint ResultSetType_ResultName_Placeholder_Template_Status = 6416;

        /// <summary>
        /// The identifier for the Type Variable.
        /// </summary>
        public const uint ResultSetType_ResultName_Placeholder_Template_Type = 6417;

        /// <summary>
        /// The identifier for the Version Variable.
        /// </summary>
        public const uint ResultSetType_ResultName_Placeholder_Template_Version = 6418;

        /// <summary>
        /// The identifier for the User Variable.
        /// </summary>
        public const uint ResultSetType_ResultName_Placeholder_User = 6405;

        /// <summary>
        /// The identifier for the NodeVersion Variable.
        /// </summary>
        public const uint ResultSetType_NodeVersion = 6261;

        /// <summary>
        /// The identifier for the Client Variable.
        /// </summary>
        public const uint ResultType_Client = 6281;

        /// <summary>
        /// The identifier for the Descrition Variable.
        /// </summary>
        public const uint ResultType_Descrition = 6396;

        /// <summary>
        /// The identifier for the NodeVersion Variable.
        /// </summary>
        public const uint ResultType_FileSet_NodeVersion = 6288;

        /// <summary>
        /// The identifier for the JobId Variable.
        /// </summary>
        public const uint ResultType_JobId = 6393;

        /// <summary>
        /// The identifier for the Name Variable.
        /// </summary>
        public const uint ResultType_Name = 6286;

        /// <summary>
        /// The identifier for the SampleIds Variable.
        /// </summary>
        public const uint ResultType_SampleIds = 6308;

        /// <summary>
        /// The identifier for the Started Variable.
        /// </summary>
        public const uint ResultType_Started = 6307;

        /// <summary>
        /// The identifier for the Stopped Variable.
        /// </summary>
        public const uint ResultType_Stopped = 6394;

        /// <summary>
        /// The identifier for the Author Variable.
        /// </summary>
        public const uint ResultType_Template_Author = 6262;

        /// <summary>
        /// The identifier for the Created Variable.
        /// </summary>
        public const uint ResultType_Template_Created = 6401;

        /// <summary>
        /// The identifier for the Description Variable.
        /// </summary>
        public const uint ResultType_Template_Description = 6404;

        /// <summary>
        /// The identifier for the Modified Variable.
        /// </summary>
        public const uint ResultType_Template_Modified = 6406;

        /// <summary>
        /// The identifier for the Name Variable.
        /// </summary>
        public const uint ResultType_Template_Name = 6407;

        /// <summary>
        /// The identifier for the Status Variable.
        /// </summary>
        public const uint ResultType_Template_Status = 6408;

        /// <summary>
        /// The identifier for the Type Variable.
        /// </summary>
        public const uint ResultType_Template_Type = 6409;

        /// <summary>
        /// The identifier for the Version Variable.
        /// </summary>
        public const uint ResultType_Template_Version = 6410;

        /// <summary>
        /// The identifier for the User Variable.
        /// </summary>
        public const uint ResultType_User = 6282;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint CoverStateMachineType_Closed_StateNumber = 6044;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint CoverStateMachineType_ClosedToLocked_TransitionNumber = 6048;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint CoverStateMachineType_ClosedToOpen_TransitionNumber = 6050;

        /// <summary>
        /// The identifier for the CurrentState Variable.
        /// </summary>
        public const uint CoverStateMachineType_CurrentState = 6040;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint CoverStateMachineType_CurrentState_Id = 6042;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint CoverStateMachineType_Error_StateNumber = 6046;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint CoverStateMachineType_Locked_StateNumber = 6045;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint CoverStateMachineType_LockedToClosed_TransitionNumber = 6049;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint CoverStateMachineType_Opened_StateNumber = 6043;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint CoverStateMachineType_OpenToClosed_TransitionNumber = 6047;

        /// <summary>
        /// The identifier for the CurrentState Variable.
        /// </summary>
        public const uint FunctionStateMachineType_CurrentState = 6074;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint FunctionStateMachineType_CurrentState_Id = 6075;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint FunctionStateMachineType_Error_StateNumber = 6072;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint FunctionStateMachineType_ErrorToOff_TransitionNumber = 6078;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint FunctionStateMachineType_Off_StateNumber = 6070;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint FunctionStateMachineType_OffToOn_TransitionNumber = 6073;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint FunctionStateMachineType_On_StateNumber = 6071;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint FunctionStateMachineType_OnToError_TransitionNumber = 6077;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint FunctionStateMachineType_OnToOff_TransitionNumber = 6076;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint LADSDeviceStateMachineType_Maintenance_StateNumber = 6350;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSDeviceStateMachineType_MaintenanceToOperatingTransition_TransitionNumber = 6354;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSDeviceStateMachineType_MaintenanceToShutdownTransition_TransitionNumber = 6356;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint LADSDeviceStateMachineType_Operating_StateNumber = 6330;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSDeviceStateMachineType_OperatingToMaintenanceTransition_TransitionNumber = 6353;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSDeviceStateMachineType_OperatingToShutdownTransition_TransitionNumber = 6355;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSDeviceStateMachineType_OperatingToStandbyTransition_TransitionNumber = 6556;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint LADSDeviceStateMachineType_Powerup_StateNumber = 6329;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSDeviceStateMachineType_PowerupToOperatingTransition_TransitionNumber = 6352;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint LADSDeviceStateMachineType_Shutdown_StateNumber = 6351;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint LADSDeviceStateMachineType_Standby_StateNumber = 6525;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint LADSDeviceStateMachineType_StandbyToOperatingTransition_StateNumber = 6584;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_Aborted_StateNumber = 6475;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_AbortedToCleared_TransitionNumber = 6486;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_Aborting_StateNumber = 6474;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_AbortingToAborted_TransitionNumber = 6432;

        /// <summary>
        /// The identifier for the AvailableStates Variable.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_AvailableStates = 6473;

        /// <summary>
        /// The identifier for the AvailableTransitions Variable.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_AvailableTransitions = 6472;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_Cleared_StateNumber = 6449;

        /// <summary>
        /// The identifier for the AvailableStates Variable.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_AvailableStates = 6090;

        /// <summary>
        /// The identifier for the AvailableTransitions Variable.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_AvailableTransitions = 6091;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_ClearingToStopped_TransitionNumber = 6506;

        /// <summary>
        /// The identifier for the CurrentState Variable.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_CurrentState = 6098;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_CurrentState_Id = 6099;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_Running_StateNumber = 6510;

        /// <summary>
        /// The identifier for the AvailableStates Variable.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_AvailableStates = 6096;

        /// <summary>
        /// The identifier for the AvailableTransitions Variable.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_AvailableTransitions = 6097;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_CompleteToResetting_TransitionNumber = 6527;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_CompletingToComplete_TransitionNumber = 6532;

        /// <summary>
        /// The identifier for the CurrentState Variable.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_CurrentState = 6106;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_CurrentState_Id = 6107;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_ExecuteToCompleting_TransitionNumber = 6537;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_ExecuteToHolding_TransitionNumber = 6542;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_ExecuteToSuspending_TransitionNumber = 6547;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_HeldToUnholding_TransitionNumber = 6552;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_Start_InputArguments = 6602;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_Start_OutputArguments = 6603;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_RunningToStopped_TransitionNumber = 6514;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_StoppedToRunning_TransitionNumber = 6518;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedStateMachine_StoppingToStopped_TransitionNumber = 6522;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramBaseStateMachineType_ClearedToAborting_TransitionNumber = 6488;

        /// <summary>
        /// The identifier for the AvailableStates Variable.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_AvailableStates = 6457;

        /// <summary>
        /// The identifier for the AvailableTransitions Variable.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_AvailableTransitions = 6456;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_Clearing_StateNumber = 6460;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_ClearingToStopped_TransitionNumber = 6469;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_Running_StateNumber = 6461;

        /// <summary>
        /// The identifier for the AvailableStates Variable.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_RunningStateMachine_AvailableStates = 6092;

        /// <summary>
        /// The identifier for the AvailableTransitions Variable.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_RunningStateMachine_AvailableTransitions = 6093;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_RunningStateMachine_CompleteToResetting_TransitionNumber = 6526;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_RunningStateMachine_CompletingToComplete_TransitionNumber = 6531;

        /// <summary>
        /// The identifier for the CurrentState Variable.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_RunningStateMachine_CurrentState = 6094;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_RunningStateMachine_CurrentState_Id = 6095;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_RunningStateMachine_ExecuteToCompleting_TransitionNumber = 6536;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_RunningStateMachine_ExecuteToHolding_TransitionNumber = 6541;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_RunningStateMachine_ExecuteToSuspending_TransitionNumber = 6546;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_RunningStateMachine_HeldToUnholding_TransitionNumber = 6551;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_RunningStateMachine_Start_InputArguments = 6589;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_RunningStateMachine_Start_OutputArguments = 6590;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_RunningToStopped_TransitionNumber = 6471;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_Stopped_StateNumber = 6458;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_StoppedToRunning_TransitionNumber = 6470;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_Stopping_StateNumber = 6459;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramClearedStateMachineType_StoppingToStopped_TransitionNumber = 6468;

        /// <summary>
        /// The identifier for the AvailableStates Variable.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_AvailableStates = 6422;

        /// <summary>
        /// The identifier for the AvailableTransitions Variable.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_AvailableTransitions = 6421;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_Complete_StateNumber = 6434;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_CompleteToResetting_TransitionNumber = 6447;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_Completing_StateNumber = 6433;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_CompletingToComplete_TransitionNumber = 6446;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_Execute_StateNumber = 6489;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_ExecuteToCompleting_TransitionNumber = 6445;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_ExecuteToHolding_TransitionNumber = 6441;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_ExecuteToSuspending_TransitionNumber = 6438;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_Held_StateNumber = 6430;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_HeldToUnholding_TransitionNumber = 6443;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_Holding_StateNumber = 6429;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_HoldingToHeld_TransitionNumber = 6442;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_Idle_StateNumber = 6426;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_IdleToStarting_TransitionNumber = 6436;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_Resetting_StateNumber = 6425;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_ResettingToIdle_TransitionNumber = 6435;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_Start_InputArguments = 6454;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_Start_OutputArguments = 6455;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_Starting_StateNumber = 6423;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_StartingToExecute_TransitionNumber = 6437;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_StartingToHolding_TransitionNumber = 6448;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_Suspended_StateNumber = 6427;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_SuspendedToHolding_TransitionNumber = 6451;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_SuspendedToUnsuspending_TransitionNumber = 6490;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_Suspending_StateNumber = 6424;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_SuspendingToHolding_TransitionNumber = 6452;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_SuspendingToSuspended_TransitionNumber = 6439;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_Unholding_StateNumber = 6431;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_UnholdingToExecute_TransitionNumber = 6444;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_UnholdingToHolding_TransitionNumber = 6453;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_Unsuspending_StateNumber = 6428;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_UnsuspendingToExecute_TransitionNumber = 6440;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint LADSProgramRunningStateMachineType_UnsuspendingToHolding_TransitionNumber = 6450;

        /// <summary>
        /// The identifier for the Name Variable.
        /// </summary>
        public const uint SupplySetType_Supply_Name = 6359;

        /// <summary>
        /// The identifier for the Name Variable.
        /// </summary>
        public const uint SupplyType_Name = 6358;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint TaskSetType_Task_Execute_InputArguments = 6365;

        /// <summary>
        /// The identifier for the LastExecution Variable.
        /// </summary>
        public const uint TaskSetType_Task_LastExecution = 6366;

        /// <summary>
        /// The identifier for the LastResult Variable.
        /// </summary>
        public const uint TaskSetType_Task_LastResult = 6367;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint TaskType_Execute_InputArguments = 6364;

        /// <summary>
        /// The identifier for the LastExecution Variable.
        /// </summary>
        public const uint TaskType_LastExecution = 6360;

        /// <summary>
        /// The identifier for the LastResult Variable.
        /// </summary>
        public const uint TaskType_LastResult = 6362;

        /// <summary>
        /// The identifier for the AssetId Variable.
        /// </summary>
        public const uint LADSDeviceType_AssetId = 6001;

        /// <summary>
        /// The identifier for the ComponentName Variable.
        /// </summary>
        public const uint LADSDeviceType_ComponentName = 6002;

        /// <summary>
        /// The identifier for the DeviceHealth Variable.
        /// </summary>
        public const uint LADSDeviceType_DeviceHealth = 6012;

        /// <summary>
        /// The identifier for the DeviceManual Variable.
        /// </summary>
        public const uint LADSDeviceType_DeviceManual = 6062;

        /// <summary>
        /// The identifier for the DeviceRevision Variable.
        /// </summary>
        public const uint LADSDeviceType_DeviceRevision = 6063;

        /// <summary>
        /// The identifier for the HardwareRevision Variable.
        /// </summary>
        public const uint LADSDeviceType_HardwareRevision = 6064;

        /// <summary>
        /// The identifier for the InitialOperationDate Variable.
        /// </summary>
        public const uint LADSDeviceType_Identification_InitialOperationDate = 6378;

        /// <summary>
        /// The identifier for the Manufacturer Variable.
        /// </summary>
        public const uint LADSDeviceType_Identification_Manufacturer = 6325;

        /// <summary>
        /// The identifier for the MonthOfConstruction Variable.
        /// </summary>
        public const uint LADSDeviceType_Identification_MonthOfConstruction = 6379;

        /// <summary>
        /// The identifier for the ProductInstanceUri Variable.
        /// </summary>
        public const uint LADSDeviceType_Identification_ProductInstanceUri = 6324;

        /// <summary>
        /// The identifier for the SerialNumber Variable.
        /// </summary>
        public const uint LADSDeviceType_Identification_SerialNumber = 6326;

        /// <summary>
        /// The identifier for the YearOfConstruction Variable.
        /// </summary>
        public const uint LADSDeviceType_Identification_YearOfConstruction = 6380;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint LADSDeviceType_Lock_BreakLock_OutputArguments = 6003;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint LADSDeviceType_Lock_ExitLock_OutputArguments = 6004;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint LADSDeviceType_Lock_InitLock_InputArguments = 6005;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint LADSDeviceType_Lock_InitLock_OutputArguments = 6006;

        /// <summary>
        /// The identifier for the Locked Variable.
        /// </summary>
        public const uint LADSDeviceType_Lock_Locked = 6007;

        /// <summary>
        /// The identifier for the LockingClient Variable.
        /// </summary>
        public const uint LADSDeviceType_Lock_LockingClient = 6008;

        /// <summary>
        /// The identifier for the LockingUser Variable.
        /// </summary>
        public const uint LADSDeviceType_Lock_LockingUser = 6009;

        /// <summary>
        /// The identifier for the RemainingLockTime Variable.
        /// </summary>
        public const uint LADSDeviceType_Lock_RemainingLockTime = 6010;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint LADSDeviceType_Lock_RenewLock_OutputArguments = 6011;

        /// <summary>
        /// The identifier for the TotalOperationCycles Variable.
        /// </summary>
        public const uint LADSDeviceType_Maintenance_TotalOperationCycles = 6370;

        /// <summary>
        /// The identifier for the TotalOperationDuration Variable.
        /// </summary>
        public const uint LADSDeviceType_Maintenance_TotalOperationDuration = 6373;

        /// <summary>
        /// The identifier for the Manufacturer Variable.
        /// </summary>
        public const uint LADSDeviceType_Manufacturer = 6065;

        /// <summary>
        /// The identifier for the ManufacturerUri Variable.
        /// </summary>
        public const uint LADSDeviceType_ManufacturerUri = 6066;

        /// <summary>
        /// The identifier for the Model Variable.
        /// </summary>
        public const uint LADSDeviceType_Model = 6067;

        /// <summary>
        /// The identifier for the CurrentState Variable.
        /// </summary>
        public const uint LADSDeviceType_StateMachine_CurrentState = 6600;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint LADSDeviceType_StateMachine_CurrentState_Id = 6601;

        /// <summary>
        /// The identifier for the SerialNumber Variable.
        /// </summary>
        public const uint LADSDeviceType_SerialNumber = 6068;

        /// <summary>
        /// The identifier for the SoftwareRevision Variable.
        /// </summary>
        public const uint LADSDeviceType_SoftwareRevision = 6069;

        /// <summary>
        /// The identifier for the ComponentName Variable.
        /// </summary>
        public const uint LADSComponentType_ComponentName = 6309;

        /// <summary>
        /// The identifier for the DeviceHealth Variable.
        /// </summary>
        public const uint LADSComponentType_DeviceHealth = 6480;

        /// <summary>
        /// The identifier for the DeviceManual Variable.
        /// </summary>
        public const uint LADSComponentType_DeviceManual = 6310;

        /// <summary>
        /// The identifier for the DeviceRevision Variable.
        /// </summary>
        public const uint LADSComponentType_DeviceRevision = 6311;

        /// <summary>
        /// The identifier for the HardwareRevision Variable.
        /// </summary>
        public const uint LADSComponentType_HardwareRevision = 6312;

        /// <summary>
        /// The identifier for the DeviceRevision Variable.
        /// </summary>
        public const uint LADSComponentType_Identification_DeviceRevision = 6374;

        /// <summary>
        /// The identifier for the InitialOperationDate Variable.
        /// </summary>
        public const uint LADSComponentType_Identification_InitialOperationDate = 6375;

        /// <summary>
        /// The identifier for the Manufacturer Variable.
        /// </summary>
        public const uint LADSComponentType_Identification_Manufacturer = 6322;

        /// <summary>
        /// The identifier for the MonthOfConstruction Variable.
        /// </summary>
        public const uint LADSComponentType_Identification_MonthOfConstruction = 6376;

        /// <summary>
        /// The identifier for the SerialNumber Variable.
        /// </summary>
        public const uint LADSComponentType_Identification_SerialNumber = 6323;

        /// <summary>
        /// The identifier for the YearOfConstruction Variable.
        /// </summary>
        public const uint LADSComponentType_Identification_YearOfConstruction = 6377;

        /// <summary>
        /// The identifier for the TotalOperationCycles Variable.
        /// </summary>
        public const uint LADSComponentType_Maintenance_TotalOperationCycles = 6371;

        /// <summary>
        /// The identifier for the TotalOperationDuration Variable.
        /// </summary>
        public const uint LADSComponentType_Maintenance_TotalOperationDuration = 6372;

        /// <summary>
        /// The identifier for the Manufacturer Variable.
        /// </summary>
        public const uint LADSComponentType_Manufacturer = 6313;

        /// <summary>
        /// The identifier for the ManufacturerUri Variable.
        /// </summary>
        public const uint LADSComponentType_ManufacturerUri = 6314;

        /// <summary>
        /// The identifier for the Model Variable.
        /// </summary>
        public const uint LADSComponentType_Model = 6315;

        /// <summary>
        /// The identifier for the ProductCode Variable.
        /// </summary>
        public const uint LADSComponentType_ProductCode = 6316;

        /// <summary>
        /// The identifier for the ProductInstanceUri Variable.
        /// </summary>
        public const uint LADSComponentType_ProductInstanceUri = 6317;

        /// <summary>
        /// The identifier for the SerialNumber Variable.
        /// </summary>
        public const uint LADSComponentType_SerialNumber = 6318;

        /// <summary>
        /// The identifier for the SoftwareRevision Variable.
        /// </summary>
        public const uint LADSComponentType_SoftwareRevision = 6319;

        /// <summary>
        /// The identifier for the AssetId Variable.
        /// </summary>
        public const uint FunctionalUnitType_AssetId = 6119;

        /// <summary>
        /// The identifier for the ComponentName Variable.
        /// </summary>
        public const uint FunctionalUnitType_ComponentName = 6120;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint FunctionalUnitType_Lock_BreakLock_OutputArguments = 6013;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint FunctionalUnitType_Lock_ExitLock_OutputArguments = 6014;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint FunctionalUnitType_Lock_InitLock_InputArguments = 6015;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint FunctionalUnitType_Lock_InitLock_OutputArguments = 6016;

        /// <summary>
        /// The identifier for the Locked Variable.
        /// </summary>
        public const uint FunctionalUnitType_Lock_Locked = 6017;

        /// <summary>
        /// The identifier for the LockingClient Variable.
        /// </summary>
        public const uint FunctionalUnitType_Lock_LockingClient = 6018;

        /// <summary>
        /// The identifier for the LockingUser Variable.
        /// </summary>
        public const uint FunctionalUnitType_Lock_LockingUser = 6019;

        /// <summary>
        /// The identifier for the RemainingLockTime Variable.
        /// </summary>
        public const uint FunctionalUnitType_Lock_RemainingLockTime = 6020;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint FunctionalUnitType_Lock_RenewLock_OutputArguments = 6021;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint FunctionalUnitType_MethodSet_StartFunctions_InputArguments = 6419;

        /// <summary>
        /// The identifier for the Author Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Author = 6574;

        /// <summary>
        /// The identifier for the Created Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Created = 6575;

        /// <summary>
        /// The identifier for the Description Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Description = 6576;

        /// <summary>
        /// The identifier for the Modified Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Modified = 6577;

        /// <summary>
        /// The identifier for the Name Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Name = 6578;

        /// <summary>
        /// The identifier for the Status Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Status = 6579;

        /// <summary>
        /// The identifier for the Type Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Type = 6580;

        /// <summary>
        /// The identifier for the Version Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Version = 6581;

        /// <summary>
        /// The identifier for the AvailableStates Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_AvailableStates = 6530;

        /// <summary>
        /// The identifier for the AvailableTransitions Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_AvailableTransitions = 6533;

        /// <summary>
        /// The identifier for the AvailableStates Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_AvailableStates = 6540;

        /// <summary>
        /// The identifier for the AvailableTransitions Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_AvailableTransitions = 6543;

        /// <summary>
        /// The identifier for the CurrentState Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_CurrentState = 6545;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_CurrentState_Id = 6548;

        /// <summary>
        /// The identifier for the AvailableStates Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableStates = 6549;

        /// <summary>
        /// The identifier for the AvailableTransitions Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableTransitions = 6550;

        /// <summary>
        /// The identifier for the CurrentState Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState = 6555;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState_Id = 6565;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start_InputArguments = 6608;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start_OutputArguments = 6609;

        /// <summary>
        /// The identifier for the CurrentState Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_CurrentState = 6538;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_CurrentState_Id = 6539;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ProgramTemplateSet_Download_InputArguments = 6293;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ProgramTemplateSet_Download_OutputArguments = 6294;

        /// <summary>
        /// The identifier for the NodeVersion Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ProgramTemplateSet_NodeVersion = 6258;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ProgramTemplateSet_Remove_InputArguments = 6295;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ProgramTemplateSet_Upload_InputArguments = 6296;

        /// <summary>
        /// The identifier for the NodeVersion Variable.
        /// </summary>
        public const uint FunctionalUnitType_ProgramManager_ResultSet_NodeVersion = 6052;

        /// <summary>
        /// The identifier for the AckedState Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_AckedState = 6232;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_AckedState_Id = 6233;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_Acknowledge_InputArguments = 6234;

        /// <summary>
        /// The identifier for the ActiveState Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_ActiveState = 6224;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_ActiveState_Id = 6225;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_AddComment_InputArguments = 6235;

        /// <summary>
        /// The identifier for the BranchId Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_BranchId = 6236;

        /// <summary>
        /// The identifier for the ClientUserId Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_ClientUserId = 6237;

        /// <summary>
        /// The identifier for the Comment Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_Comment = 6238;

        /// <summary>
        /// The identifier for the SourceTimestamp Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_Comment_SourceTimestamp = 6239;

        /// <summary>
        /// The identifier for the ConditionClassId Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_ConditionClassId = 6240;

        /// <summary>
        /// The identifier for the ConditionClassName Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_ConditionClassName = 6241;

        /// <summary>
        /// The identifier for the ConditionName Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_ConditionName = 6242;

        /// <summary>
        /// The identifier for the EnabledState Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_EnabledState = 6228;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_EnabledState_Id = 6229;

        /// <summary>
        /// The identifier for the EventId Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_EventId = 6248;

        /// <summary>
        /// The identifier for the EventType Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_EventType = 6249;

        /// <summary>
        /// The identifier for the InputNode Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_InputNode = 6230;

        /// <summary>
        /// The identifier for the LastSeverity Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_LastSeverity = 6243;

        /// <summary>
        /// The identifier for the SourceTimestamp Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_LastSeverity_SourceTimestamp = 6244;

        /// <summary>
        /// The identifier for the CurrentState Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_LimitState_CurrentState = 6226;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_LimitState_CurrentState_Id = 6227;

        /// <summary>
        /// The identifier for the Message Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_Message = 6250;

        /// <summary>
        /// The identifier for the Quality Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_Quality = 6245;

        /// <summary>
        /// The identifier for the SourceTimestamp Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_Quality_SourceTimestamp = 6246;

        /// <summary>
        /// The identifier for the ReceiveTime Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_ReceiveTime = 6251;

        /// <summary>
        /// The identifier for the Retain Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_Retain = 6247;

        /// <summary>
        /// The identifier for the SetpointNode Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_SetpointNode = 6223;

        /// <summary>
        /// The identifier for the Severity Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_Severity = 6252;

        /// <summary>
        /// The identifier for the SourceName Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_SourceName = 6253;

        /// <summary>
        /// The identifier for the SourceNode Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_SourceNode = 6254;

        /// <summary>
        /// The identifier for the SuppressedOrShelved Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_SuppressedOrShelved = 6231;

        /// <summary>
        /// The identifier for the Time Variable.
        /// </summary>
        public const uint BaseControlFunctionType_AlarmMonitor_Time = 6255;

        /// <summary>
        /// The identifier for the CtrlP Variable.
        /// </summary>
        public const uint AnalogControlFunctionType_ParameterSet_CtrlP = 6303;

        /// <summary>
        /// The identifier for the CtrlTd Variable.
        /// </summary>
        public const uint AnalogControlFunctionType_ParameterSet_CtrlTd = 6304;

        /// <summary>
        /// The identifier for the CtrlTi Variable.
        /// </summary>
        public const uint AnalogControlFunctionType_ParameterSet_CtrlTi = 6305;

        /// <summary>
        /// The identifier for the CurrentValue Variable.
        /// </summary>
        public const uint AnalogControlFunctionType_ParameterSet_CurrentValue = 6121;

        /// <summary>
        /// The identifier for the EngineeringUnits Variable.
        /// </summary>
        public const uint AnalogControlFunctionType_ParameterSet_CurrentValue_EngineeringUnits = 6122;

        /// <summary>
        /// The identifier for the EURange Variable.
        /// </summary>
        public const uint AnalogControlFunctionType_ParameterSet_CurrentValue_EURange = 6123;

        /// <summary>
        /// The identifier for the IsEnabled Variable.
        /// </summary>
        public const uint AnalogControlFunctionType_ParameterSet_IsEnabled = 6125;

        /// <summary>
        /// The identifier for the TargetValue Variable.
        /// </summary>
        public const uint AnalogControlFunctionType_ParameterSet_TargetValue = 6126;

        /// <summary>
        /// The identifier for the EngineeringUnits Variable.
        /// </summary>
        public const uint AnalogControlFunctionType_ParameterSet_TargetValue_EngineeringUnits = 6127;

        /// <summary>
        /// The identifier for the EURange Variable.
        /// </summary>
        public const uint AnalogControlFunctionType_ParameterSet_TargetValue_EURange = 6128;

        /// <summary>
        /// The identifier for the CurrentValue Variable.
        /// </summary>
        public const uint AnalogControlFunctionWithTotalizerType_ParameterSet_CurrentValue = 6124;

        /// <summary>
        /// The identifier for the EngineeringUnits Variable.
        /// </summary>
        public const uint AnalogControlFunctionWithTotalizerType_ParameterSet_CurrentValue_EngineeringUnits = 6134;

        /// <summary>
        /// The identifier for the EURange Variable.
        /// </summary>
        public const uint AnalogControlFunctionWithTotalizerType_ParameterSet_CurrentValue_EURange = 6140;

        /// <summary>
        /// The identifier for the IsEnabled Variable.
        /// </summary>
        public const uint AnalogControlFunctionWithTotalizerType_ParameterSet_IsEnabled = 6148;

        /// <summary>
        /// The identifier for the TargetValue Variable.
        /// </summary>
        public const uint AnalogControlFunctionWithTotalizerType_ParameterSet_TargetValue = 6149;

        /// <summary>
        /// The identifier for the EngineeringUnits Variable.
        /// </summary>
        public const uint AnalogControlFunctionWithTotalizerType_ParameterSet_TargetValue_EngineeringUnits = 6150;

        /// <summary>
        /// The identifier for the EURange Variable.
        /// </summary>
        public const uint AnalogControlFunctionWithTotalizerType_ParameterSet_TargetValue_EURange = 6151;

        /// <summary>
        /// The identifier for the TotalizedValue Variable.
        /// </summary>
        public const uint AnalogControlFunctionWithTotalizerType_ParameterSet_TotalizedValue = 6152;

        /// <summary>
        /// The identifier for the EngineeringUnits Variable.
        /// </summary>
        public const uint AnalogControlFunctionWithTotalizerType_ParameterSet_TotalizedValue_EngineeringUnits = 6153;

        /// <summary>
        /// The identifier for the EURange Variable.
        /// </summary>
        public const uint AnalogControlFunctionWithTotalizerType_ParameterSet_TotalizedValue_EURange = 6154;

        /// <summary>
        /// The identifier for the CurrentState Variable.
        /// </summary>
        public const uint DiscreteControlFunctionType_StateMachine_CurrentState = 6331;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint DiscreteControlFunctionType_StateMachine_CurrentState_Id = 6332;

        /// <summary>
        /// The identifier for the CurrentState Variable.
        /// </summary>
        public const uint BaseControlFunctionType_StateMachine_CurrentState = 6079;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint BaseControlFunctionType_StateMachine_CurrentState_Id = 6080;

        /// <summary>
        /// The identifier for the CurrentValue Variable.
        /// </summary>
        public const uint BaseControlFunctionType_ParameterSet_CurrentValue = 6132;

        /// <summary>
        /// The identifier for the EngineeringUnits Variable.
        /// </summary>
        public const uint BaseControlFunctionType_ParameterSet_CurrentValue_EngineeringUnits = 6133;

        /// <summary>
        /// The identifier for the EURange Variable.
        /// </summary>
        public const uint BaseControlFunctionType_ParameterSet_CurrentValue_EURange = 6139;

        /// <summary>
        /// The identifier for the TargetValue Variable.
        /// </summary>
        public const uint BaseControlFunctionType_ParameterSet_TargetValue = 6142;

        /// <summary>
        /// The identifier for the EngineeringUnits Variable.
        /// </summary>
        public const uint BaseControlFunctionType_ParameterSet_TargetValue_EngineeringUnits = 6143;

        /// <summary>
        /// The identifier for the EURange Variable.
        /// </summary>
        public const uint BaseControlFunctionType_ParameterSet_TargetValue_EURange = 6144;

        /// <summary>
        /// The identifier for the TotalizedValue Variable.
        /// </summary>
        public const uint BaseControlFunctionType_ParameterSet_TotalizedValue = 6145;

        /// <summary>
        /// The identifier for the EngineeringUnits Variable.
        /// </summary>
        public const uint BaseControlFunctionType_ParameterSet_TotalizedValue_EngineeringUnits = 6146;

        /// <summary>
        /// The identifier for the EURange Variable.
        /// </summary>
        public const uint BaseControlFunctionType_ParameterSet_TotalizedValue_EURange = 6147;

        /// <summary>
        /// The identifier for the CtrlP Variable.
        /// </summary>
        public const uint BaseControlFunctionType_ParameterSet_CtrlP = 6129;

        /// <summary>
        /// The identifier for the CtrlTd Variable.
        /// </summary>
        public const uint BaseControlFunctionType_ParameterSet_CtrlTd = 6130;

        /// <summary>
        /// The identifier for the CtrlTi Variable.
        /// </summary>
        public const uint BaseControlFunctionType_ParameterSet_CtrlTi = 6131;

        /// <summary>
        /// The identifier for the IsEnabled Variable.
        /// </summary>
        public const uint BaseControlFunctionType_ParameterSet_IsEnabled = 6141;

        /// <summary>
        /// The identifier for the AckedState Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_AckedState = 6199;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_AckedState_Id = 6200;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_Acknowledge_InputArguments = 6201;

        /// <summary>
        /// The identifier for the ActiveState Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_ActiveState = 6191;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_ActiveState_Id = 6192;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_AddComment_InputArguments = 6202;

        /// <summary>
        /// The identifier for the BranchId Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_BranchId = 6203;

        /// <summary>
        /// The identifier for the ClientUserId Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_ClientUserId = 6204;

        /// <summary>
        /// The identifier for the Comment Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_Comment = 6205;

        /// <summary>
        /// The identifier for the SourceTimestamp Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_Comment_SourceTimestamp = 6206;

        /// <summary>
        /// The identifier for the ConditionClassId Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_ConditionClassId = 6207;

        /// <summary>
        /// The identifier for the ConditionClassName Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_ConditionClassName = 6208;

        /// <summary>
        /// The identifier for the ConditionName Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_ConditionName = 6209;

        /// <summary>
        /// The identifier for the EnabledState Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_EnabledState = 6195;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_EnabledState_Id = 6196;

        /// <summary>
        /// The identifier for the EventId Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_EventId = 6215;

        /// <summary>
        /// The identifier for the EventType Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_EventType = 6216;

        /// <summary>
        /// The identifier for the InputNode Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_InputNode = 6197;

        /// <summary>
        /// The identifier for the LastSeverity Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_LastSeverity = 6210;

        /// <summary>
        /// The identifier for the SourceTimestamp Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_LastSeverity_SourceTimestamp = 6211;

        /// <summary>
        /// The identifier for the CurrentState Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_LimitState_CurrentState = 6193;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_LimitState_CurrentState_Id = 6194;

        /// <summary>
        /// The identifier for the Message Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_Message = 6217;

        /// <summary>
        /// The identifier for the Quality Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_Quality = 6212;

        /// <summary>
        /// The identifier for the SourceTimestamp Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_Quality_SourceTimestamp = 6213;

        /// <summary>
        /// The identifier for the ReceiveTime Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_ReceiveTime = 6218;

        /// <summary>
        /// The identifier for the Retain Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_Retain = 6214;

        /// <summary>
        /// The identifier for the Severity Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_Severity = 6219;

        /// <summary>
        /// The identifier for the SourceName Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_SourceName = 6220;

        /// <summary>
        /// The identifier for the SourceNode Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_SourceNode = 6221;

        /// <summary>
        /// The identifier for the SuppressedOrShelved Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_SuppressedOrShelved = 6198;

        /// <summary>
        /// The identifier for the Time Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_AlarmMonitor_Time = 6222;

        /// <summary>
        /// The identifier for the CalibrationValues Variable.
        /// </summary>
        public const uint AnalogSensorFunctionType_ParameterSet_CalibrationValues = 6176;

        /// <summary>
        /// The identifier for the Damping Variable.
        /// </summary>
        public const uint AnalogSensorFunctionType_ParameterSet_Damping = 6169;

        /// <summary>
        /// The identifier for the RawValue Variable.
        /// </summary>
        public const uint AnalogSensorFunctionType_ParameterSet_RawValue = 6170;

        /// <summary>
        /// The identifier for the EngineeringUnits Variable.
        /// </summary>
        public const uint AnalogSensorFunctionType_ParameterSet_RawValue_EngineeringUnits = 6171;

        /// <summary>
        /// The identifier for the EURange Variable.
        /// </summary>
        public const uint AnalogSensorFunctionType_ParameterSet_RawValue_EURange = 6172;

        /// <summary>
        /// The identifier for the SensorValue Variable.
        /// </summary>
        public const uint AnalogSensorFunctionType_ParameterSet_SensorValue = 6173;

        /// <summary>
        /// The identifier for the EngineeringUnits Variable.
        /// </summary>
        public const uint AnalogSensorFunctionType_ParameterSet_SensorValue_EngineeringUnits = 6174;

        /// <summary>
        /// The identifier for the EURange Variable.
        /// </summary>
        public const uint AnalogSensorFunctionType_ParameterSet_SensorValue_EURange = 6175;

        /// <summary>
        /// The identifier for the CalibrationValues Variable.
        /// </summary>
        public const uint AnalogSensorFunctionWithCompensationType_ParameterSet_CalibrationValues = 6177;

        /// <summary>
        /// The identifier for the CompensationValue Variable.
        /// </summary>
        public const uint AnalogSensorFunctionWithCompensationType_ParameterSet_CompensationValue = 6178;

        /// <summary>
        /// The identifier for the EngineeringUnits Variable.
        /// </summary>
        public const uint AnalogSensorFunctionWithCompensationType_ParameterSet_CompensationValue_EngineeringUnits = 6179;

        /// <summary>
        /// The identifier for the EURange Variable.
        /// </summary>
        public const uint AnalogSensorFunctionWithCompensationType_ParameterSet_CompensationValue_EURange = 6180;

        /// <summary>
        /// The identifier for the Damping Variable.
        /// </summary>
        public const uint AnalogSensorFunctionWithCompensationType_ParameterSet_Damping = 6181;

        /// <summary>
        /// The identifier for the RawValue Variable.
        /// </summary>
        public const uint AnalogSensorFunctionWithCompensationType_ParameterSet_RawValue = 6182;

        /// <summary>
        /// The identifier for the EngineeringUnits Variable.
        /// </summary>
        public const uint AnalogSensorFunctionWithCompensationType_ParameterSet_RawValue_EngineeringUnits = 6183;

        /// <summary>
        /// The identifier for the EURange Variable.
        /// </summary>
        public const uint AnalogSensorFunctionWithCompensationType_ParameterSet_RawValue_EURange = 6184;

        /// <summary>
        /// The identifier for the SensorValue Variable.
        /// </summary>
        public const uint AnalogSensorFunctionWithCompensationType_ParameterSet_SensorValue = 6185;

        /// <summary>
        /// The identifier for the EngineeringUnits Variable.
        /// </summary>
        public const uint AnalogSensorFunctionWithCompensationType_ParameterSet_SensorValue_EngineeringUnits = 6186;

        /// <summary>
        /// The identifier for the EURange Variable.
        /// </summary>
        public const uint AnalogSensorFunctionWithCompensationType_ParameterSet_SensorValue_EURange = 6187;

        /// <summary>
        /// The identifier for the IsEnabled Variable.
        /// </summary>
        public const uint FunctionType_ParameterSet_IsEnabled = 6022;

        /// <summary>
        /// The identifier for the CompensationValue Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_ParameterSet_CompensationValue = 6024;

        /// <summary>
        /// The identifier for the EngineeringUnits Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_ParameterSet_CompensationValue_EngineeringUnits = 6025;

        /// <summary>
        /// The identifier for the EURange Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_ParameterSet_CompensationValue_EURange = 6026;

        /// <summary>
        /// The identifier for the RawValue Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_ParameterSet_RawValue = 6028;

        /// <summary>
        /// The identifier for the EngineeringUnits Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_ParameterSet_RawValue_EngineeringUnits = 6029;

        /// <summary>
        /// The identifier for the EURange Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_ParameterSet_RawValue_EURange = 6030;

        /// <summary>
        /// The identifier for the SensorValue Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_ParameterSet_SensorValue = 6166;

        /// <summary>
        /// The identifier for the EngineeringUnits Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_ParameterSet_SensorValue_EngineeringUnits = 6167;

        /// <summary>
        /// The identifier for the EURange Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_ParameterSet_SensorValue_EURange = 6168;

        /// <summary>
        /// The identifier for the CalibrationValues Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_ParameterSet_CalibrationValues = 6023;

        /// <summary>
        /// The identifier for the Damping Variable.
        /// </summary>
        public const uint BaseSensorFunctionType_ParameterSet_Damping = 6027;

        /// <summary>
        /// The identifier for the CurrentState Variable.
        /// </summary>
        public const uint CoverFunctionType_StateMachine_CurrentState = 6112;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint CoverFunctionType_StateMachine_CurrentState_Id = 6113;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint CoverFunctionType_StateMachine_Closed_StateNumber = 6051;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint CoverFunctionType_StateMachine_ClosedToLocked_TransitionNumber = 6060;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint CoverFunctionType_StateMachine_ClosedToOpen_TransitionNumber = 6061;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint CoverFunctionType_StateMachine_Error_StateNumber = 6114;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint CoverFunctionType_StateMachine_Locked_StateNumber = 6115;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint CoverFunctionType_StateMachine_LockedToClosed_TransitionNumber = 6116;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint CoverFunctionType_StateMachine_Opened_StateNumber = 6117;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint CoverFunctionType_StateMachine_OpenToClosed_TransitionNumber = 6118;

        /// <summary>
        /// The identifier for the Author Variable.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_ProgramTemplate_Author = 6515;

        /// <summary>
        /// The identifier for the Created Variable.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_ProgramTemplate_Created = 6516;

        /// <summary>
        /// The identifier for the Description Variable.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_ProgramTemplate_Description = 6517;

        /// <summary>
        /// The identifier for the Modified Variable.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_ProgramTemplate_Modified = 6519;

        /// <summary>
        /// The identifier for the Name Variable.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_ProgramTemplate_Name = 6520;

        /// <summary>
        /// The identifier for the Status Variable.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_ProgramTemplate_Status = 6521;

        /// <summary>
        /// The identifier for the Type Variable.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_ProgramTemplate_Type = 6523;

        /// <summary>
        /// The identifier for the Version Variable.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_ProgramTemplate_Version = 6524;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_Aborted_StateNumber = 6481;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_Aborting_StateNumber = 6587;

        /// <summary>
        /// The identifier for the AvailableStates Variable.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_AvailableStates = 6483;

        /// <summary>
        /// The identifier for the AvailableTransitions Variable.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_AvailableTransitions = 6484;

        /// <summary>
        /// The identifier for the AvailableStates Variable.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_AvailableStates = 6493;

        /// <summary>
        /// The identifier for the AvailableTransitions Variable.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_AvailableTransitions = 6494;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_ClearingToStopped_TransitionNumber = 6477;

        /// <summary>
        /// The identifier for the CurrentState Variable.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_CurrentState = 6496;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_CurrentState_Id = 6497;

        /// <summary>
        /// The identifier for the StateNumber Variable.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_Running_StateNumber = 6482;

        /// <summary>
        /// The identifier for the AvailableStates Variable.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableStates = 6498;

        /// <summary>
        /// The identifier for the AvailableTransitions Variable.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableTransitions = 6499;

        /// <summary>
        /// The identifier for the CurrentState Variable.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState = 6502;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState_Id = 6503;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start_InputArguments = 6606;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start_OutputArguments = 6607;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningToStopped_TransitionNumber = 6485;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_StoppedToRunning_TransitionNumber = 6487;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_StoppingToStopped_TransitionNumber = 6495;

        /// <summary>
        /// The identifier for the TransitionNumber Variable.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_ClearedToAborting_TransitionNumber = 6089;

        /// <summary>
        /// The identifier for the CurrentState Variable.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_CurrentState = 6491;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint ProgramManagerType_ActiveProgram_StateMachine_CurrentState_Id = 6492;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint ProgramManagerType_ProgramTemplateSet_Download_InputArguments = 6289;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint ProgramManagerType_ProgramTemplateSet_Download_OutputArguments = 6290;

        /// <summary>
        /// The identifier for the NodeVersion Variable.
        /// </summary>
        public const uint ProgramManagerType_ProgramTemplateSet_NodeVersion = 6257;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint ProgramManagerType_ProgramTemplateSet_Remove_InputArguments = 6291;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint ProgramManagerType_ProgramTemplateSet_Upload_InputArguments = 6292;

        /// <summary>
        /// The identifier for the NodeVersion Variable.
        /// </summary>
        public const uint ProgramManagerType_ResultSet_NodeVersion = 6041;

        /// <summary>
        /// The identifier for the Client Variable.
        /// </summary>
        public const uint ResultPropertiesType_Client = 6270;

        /// <summary>
        /// The identifier for the Description Variable.
        /// </summary>
        public const uint ResultPropertiesType_Description = 6267;

        /// <summary>
        /// The identifier for the JobID Variable.
        /// </summary>
        public const uint ResultPropertiesType_JobID = 6284;

        /// <summary>
        /// The identifier for the Name Variable.
        /// </summary>
        public const uint ResultPropertiesType_Name = 6265;

        /// <summary>
        /// The identifier for the SampleIDs Variable.
        /// </summary>
        public const uint ResultPropertiesType_SampleIDs = 6285;

        /// <summary>
        /// The identifier for the Started Variable.
        /// </summary>
        public const uint ResultPropertiesType_Started = 6268;

        /// <summary>
        /// The identifier for the Stopped Variable.
        /// </summary>
        public const uint ResultPropertiesType_Stopped = 6269;

        /// <summary>
        /// The identifier for the Template Variable.
        /// </summary>
        public const uint ResultPropertiesType_Template = 6266;

        /// <summary>
        /// The identifier for the User Variable.
        /// </summary>
        public const uint ResultPropertiesType_User = 6283;

        /// <summary>
        /// The identifier for the IsNamespaceSubset Object.
        /// </summary>
        public const uint Namespaces_http___spectaris_de_LADS__IsNamespaceSubset = 6053;

        /// <summary>
        /// The identifier for the NamespacePublicationDate Object.
        /// </summary>
        public const uint Namespaces_http___spectaris_de_LADS__NamespacePublicationDate = 6054;

        /// <summary>
        /// The identifier for the NamespaceUri Object.
        /// </summary>
        public const uint Namespaces_http___spectaris_de_LADS__NamespaceUri = 6055;

        /// <summary>
        /// The identifier for the NamespaceVersion Object.
        /// </summary>
        public const uint Namespaces_http___spectaris_de_LADS__NamespaceVersion = 6056;

        /// <summary>
        /// The identifier for the StaticNodeIdTypes Object.
        /// </summary>
        public const uint Namespaces_http___spectaris_de_LADS__StaticNodeIdTypes = 6057;

        /// <summary>
        /// The identifier for the StaticNumericNodeIdRange Object.
        /// </summary>
        public const uint Namespaces_http___spectaris_de_LADS__StaticNumericNodeIdRange = 6058;

        /// <summary>
        /// The identifier for the StaticStringNodeIdPattern Object.
        /// </summary>
        public const uint Namespaces_http___spectaris_de_LADS__StaticStringNodeIdPattern = 6059;

    }
    #endregion

    #region VariableTypes Identifiers
    /// <summary>
    /// A class that declares constants for all VariableTypes in the Model.
    /// </summary>

    public static partial class VariableTypes
    {
        /// <summary>
        /// The identifier for the ResultPropertiesType VariableType.
        /// </summary>
        public const uint ResultPropertiesType = 2001;

    }
    #endregion

    #region DataType Node Identifiers
    /// <summary>
    /// A class that declares constants for all DataTypes in the Model.
    /// </summary>

    public static partial class DataTypeIds
    {
        /// <summary>
        /// The identifier for the BaseDataType DataType.
        /// </summary>
        public static readonly ExpandedNodeId ResultPropertiesDataType = new ExpandedNodeId(DataTypes.ResultPropertiesDataType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseDataType DataType.
        /// </summary>
        public static readonly ExpandedNodeId TemplatePropertiesDataType = new ExpandedNodeId(DataTypes.TemplatePropertiesDataType, Namespaces.LADS);

    }
    #endregion

    #region Method Node Identifiers
    /// <summary>
    /// A class that declares constants for all Methods in the Model.
    /// </summary>

    public static partial class MethodIds
    {
        /// <summary>
        /// The identifier for the ActiveProgramType_StateMachine_Abort Method.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_StateMachine_Abort = new ExpandedNodeId(Methods.ActiveProgramType_StateMachine_Abort, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ActiveProgramType_StateMachine_Clear Method.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_StateMachine_Clear = new ExpandedNodeId(Methods.ActiveProgramType_StateMachine_Clear, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ActiveProgramType_StateMachine_ClearedStateMachine_Reset Method.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_StateMachine_ClearedStateMachine_Reset = new ExpandedNodeId(Methods.ActiveProgramType_StateMachine_ClearedStateMachine_Reset, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_Hold Method.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_Hold = new ExpandedNodeId(Methods.ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_Hold, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_Reset Method.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_Reset = new ExpandedNodeId(Methods.ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_Reset, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_Start Method.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_Start = new ExpandedNodeId(Methods.ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_Start, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_Suspend Method.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_Suspend = new ExpandedNodeId(Methods.ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_Suspend, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_ToComplete Method.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_ToComplete = new ExpandedNodeId(Methods.ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_ToComplete, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_Unhold Method.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_Unhold = new ExpandedNodeId(Methods.ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_Unhold, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_Unsuspend Method.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_Unsuspend = new ExpandedNodeId(Methods.ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_Unsuspend, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ActiveProgramType_StateMachine_ClearedStateMachine_Stop Method.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_StateMachine_ClearedStateMachine_Stop = new ExpandedNodeId(Methods.ActiveProgramType_StateMachine_ClearedStateMachine_Stop, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionMethodSetType_ResetTotalizer Method.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionMethodSetType_ResetTotalizer = new ExpandedNodeId(Methods.BaseControlFunctionMethodSetType_ResetTotalizer, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitSetType_FunctionalUnit_Lock_BreakLock Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitSetType_FunctionalUnit_Lock_BreakLock = new ExpandedNodeId(Methods.FunctionalUnitSetType_FunctionalUnit_Lock_BreakLock, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitSetType_FunctionalUnit_Lock_ExitLock Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitSetType_FunctionalUnit_Lock_ExitLock = new ExpandedNodeId(Methods.FunctionalUnitSetType_FunctionalUnit_Lock_ExitLock, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitSetType_FunctionalUnit_Lock_InitLock Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitSetType_FunctionalUnit_Lock_InitLock = new ExpandedNodeId(Methods.FunctionalUnitSetType_FunctionalUnit_Lock_InitLock, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitSetType_FunctionalUnit_Lock_RenewLock Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitSetType_FunctionalUnit_Lock_RenewLock = new ExpandedNodeId(Methods.FunctionalUnitSetType_FunctionalUnit_Lock_RenewLock, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitSetType_FunctionalUnit_MethodSet_StartFunctions Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitSetType_FunctionalUnit_MethodSet_StartFunctions = new ExpandedNodeId(Methods.FunctionalUnitSetType_FunctionalUnit_MethodSet_StartFunctions, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitSetType_FunctionalUnit_MethodSet_StopFunctions Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitSetType_FunctionalUnit_MethodSet_StopFunctions = new ExpandedNodeId(Methods.FunctionalUnitSetType_FunctionalUnit_MethodSet_StopFunctions, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramTemplateSetType_TemplateName_PlaceHolder_Select Method.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateSetType_TemplateName_PlaceHolder_Select = new ExpandedNodeId(Methods.ProgramTemplateSetType_TemplateName_PlaceHolder_Select, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramTemplateSetType_Download Method.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateSetType_Download = new ExpandedNodeId(Methods.ProgramTemplateSetType_Download, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramTemplateSetType_Remove Method.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateSetType_Remove = new ExpandedNodeId(Methods.ProgramTemplateSetType_Remove, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramTemplateSetType_Upload Method.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateSetType_Upload = new ExpandedNodeId(Methods.ProgramTemplateSetType_Upload, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramTemplateType_Select Method.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateType_Select = new ExpandedNodeId(Methods.ProgramTemplateType_Select, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverStateMachineType_Close Method.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_Close = new ExpandedNodeId(Methods.CoverStateMachineType_Close, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverStateMachineType_Lock Method.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_Lock = new ExpandedNodeId(Methods.CoverStateMachineType_Lock, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverStateMachineType_Open Method.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_Open = new ExpandedNodeId(Methods.CoverStateMachineType_Open, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverStateMachineType_Unlock Method.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_Unlock = new ExpandedNodeId(Methods.CoverStateMachineType_Unlock, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionStateMachineType_Reset Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionStateMachineType_Reset = new ExpandedNodeId(Methods.FunctionStateMachineType_Reset, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionStateMachineType_Start Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionStateMachineType_Start = new ExpandedNodeId(Methods.FunctionStateMachineType_Start, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionStateMachineType_Stop Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionStateMachineType_Stop = new ExpandedNodeId(Methods.FunctionStateMachineType_Stop, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_GotoMaintenance Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_GotoMaintenance = new ExpandedNodeId(Methods.LADSDeviceStateMachineType_GotoMaintenance, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_GotoOperating Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_GotoOperating = new ExpandedNodeId(Methods.LADSDeviceStateMachineType_GotoOperating, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_GotoShutdown Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_GotoShutdown = new ExpandedNodeId(Methods.LADSDeviceStateMachineType_GotoShutdown, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_GotoStandby Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_GotoStandby = new ExpandedNodeId(Methods.LADSDeviceStateMachineType_GotoStandby, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_Abort Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_Abort = new ExpandedNodeId(Methods.LADSProgramBaseStateMachineType_Abort, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_Clear Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_Clear = new ExpandedNodeId(Methods.LADSProgramBaseStateMachineType_Clear, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_Reset Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_Reset = new ExpandedNodeId(Methods.LADSProgramBaseStateMachineType_ClearedStateMachine_Reset, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_Hold Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_Hold = new ExpandedNodeId(Methods.LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_Hold, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_Reset Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_Reset = new ExpandedNodeId(Methods.LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_Reset, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_Start Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_Start = new ExpandedNodeId(Methods.LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_Start, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_Suspend Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_Suspend = new ExpandedNodeId(Methods.LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_Suspend, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_ToComplete Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_ToComplete = new ExpandedNodeId(Methods.LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_ToComplete, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_Unhold Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_Unhold = new ExpandedNodeId(Methods.LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_Unhold, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_Unsuspend Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_Unsuspend = new ExpandedNodeId(Methods.LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_Unsuspend, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_Stop Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_Stop = new ExpandedNodeId(Methods.LADSProgramBaseStateMachineType_ClearedStateMachine_Stop, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_Reset Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_Reset = new ExpandedNodeId(Methods.LADSProgramClearedStateMachineType_Reset, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_RunningStateMachine_Hold Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_RunningStateMachine_Hold = new ExpandedNodeId(Methods.LADSProgramClearedStateMachineType_RunningStateMachine_Hold, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_RunningStateMachine_Reset Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_RunningStateMachine_Reset = new ExpandedNodeId(Methods.LADSProgramClearedStateMachineType_RunningStateMachine_Reset, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_RunningStateMachine_Start Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_RunningStateMachine_Start = new ExpandedNodeId(Methods.LADSProgramClearedStateMachineType_RunningStateMachine_Start, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_RunningStateMachine_Suspend Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_RunningStateMachine_Suspend = new ExpandedNodeId(Methods.LADSProgramClearedStateMachineType_RunningStateMachine_Suspend, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_RunningStateMachine_ToComplete Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_RunningStateMachine_ToComplete = new ExpandedNodeId(Methods.LADSProgramClearedStateMachineType_RunningStateMachine_ToComplete, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_RunningStateMachine_Unhold Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_RunningStateMachine_Unhold = new ExpandedNodeId(Methods.LADSProgramClearedStateMachineType_RunningStateMachine_Unhold, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_RunningStateMachine_Unsuspend Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_RunningStateMachine_Unsuspend = new ExpandedNodeId(Methods.LADSProgramClearedStateMachineType_RunningStateMachine_Unsuspend, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_Stop Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_Stop = new ExpandedNodeId(Methods.LADSProgramClearedStateMachineType_Stop, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_Hold Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_Hold = new ExpandedNodeId(Methods.LADSProgramRunningStateMachineType_Hold, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_Reset Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_Reset = new ExpandedNodeId(Methods.LADSProgramRunningStateMachineType_Reset, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_Start Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_Start = new ExpandedNodeId(Methods.LADSProgramRunningStateMachineType_Start, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_Suspend Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_Suspend = new ExpandedNodeId(Methods.LADSProgramRunningStateMachineType_Suspend, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_ToComplete Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_ToComplete = new ExpandedNodeId(Methods.LADSProgramRunningStateMachineType_ToComplete, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_Unhold Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_Unhold = new ExpandedNodeId(Methods.LADSProgramRunningStateMachineType_Unhold, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_Unsuspend Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_Unsuspend = new ExpandedNodeId(Methods.LADSProgramRunningStateMachineType_Unsuspend, Namespaces.LADS);

        /// <summary>
        /// The identifier for the TaskSetType_Task_Execute Method.
        /// </summary>
        public static readonly ExpandedNodeId TaskSetType_Task_Execute = new ExpandedNodeId(Methods.TaskSetType_Task_Execute, Namespaces.LADS);

        /// <summary>
        /// The identifier for the TaskType_Execute Method.
        /// </summary>
        public static readonly ExpandedNodeId TaskType_Execute = new ExpandedNodeId(Methods.TaskType_Execute, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_Lock_BreakLock Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_Lock_BreakLock = new ExpandedNodeId(Methods.LADSDeviceType_Lock_BreakLock, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_Lock_ExitLock Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_Lock_ExitLock = new ExpandedNodeId(Methods.LADSDeviceType_Lock_ExitLock, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_Lock_InitLock Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_Lock_InitLock = new ExpandedNodeId(Methods.LADSDeviceType_Lock_InitLock, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_Lock_RenewLock Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_Lock_RenewLock = new ExpandedNodeId(Methods.LADSDeviceType_Lock_RenewLock, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_StateMachine_GotoMaintenance Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_StateMachine_GotoMaintenance = new ExpandedNodeId(Methods.LADSDeviceType_StateMachine_GotoMaintenance, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_StateMachine_GotoOperating Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_StateMachine_GotoOperating = new ExpandedNodeId(Methods.LADSDeviceType_StateMachine_GotoOperating, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_StateMachine_GotoShutdown Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_StateMachine_GotoShutdown = new ExpandedNodeId(Methods.LADSDeviceType_StateMachine_GotoShutdown, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_StateMachine_GotoStandby Method.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_StateMachine_GotoStandby = new ExpandedNodeId(Methods.LADSDeviceType_StateMachine_GotoStandby, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_Lock_BreakLock Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_Lock_BreakLock = new ExpandedNodeId(Methods.FunctionalUnitType_Lock_BreakLock, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_Lock_ExitLock Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_Lock_ExitLock = new ExpandedNodeId(Methods.FunctionalUnitType_Lock_ExitLock, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_Lock_InitLock Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_Lock_InitLock = new ExpandedNodeId(Methods.FunctionalUnitType_Lock_InitLock, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_Lock_RenewLock Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_Lock_RenewLock = new ExpandedNodeId(Methods.FunctionalUnitType_Lock_RenewLock, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_MethodSet_StartFunctions Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_MethodSet_StartFunctions = new ExpandedNodeId(Methods.FunctionalUnitType_MethodSet_StartFunctions, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_MethodSet_StopFunctions Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_MethodSet_StopFunctions = new ExpandedNodeId(Methods.FunctionalUnitType_MethodSet_StopFunctions, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_Abort Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_Abort = new ExpandedNodeId(Methods.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_Abort, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_Clear Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_Clear = new ExpandedNodeId(Methods.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_Clear, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_Reset Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_Reset = new ExpandedNodeId(Methods.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_Reset, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Hold Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Hold = new ExpandedNodeId(Methods.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Hold, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Reset Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Reset = new ExpandedNodeId(Methods.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Reset, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start = new ExpandedNodeId(Methods.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Suspend Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Suspend = new ExpandedNodeId(Methods.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Suspend, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_ToComplete Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_ToComplete = new ExpandedNodeId(Methods.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_ToComplete, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Unhold Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Unhold = new ExpandedNodeId(Methods.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Unhold, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Unsuspend Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Unsuspend = new ExpandedNodeId(Methods.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Unsuspend, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_Stop Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_Stop = new ExpandedNodeId(Methods.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_Stop, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ProgramTemplateSet_Download Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ProgramTemplateSet_Download = new ExpandedNodeId(Methods.FunctionalUnitType_ProgramManager_ProgramTemplateSet_Download, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ProgramTemplateSet_Remove Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ProgramTemplateSet_Remove = new ExpandedNodeId(Methods.FunctionalUnitType_ProgramManager_ProgramTemplateSet_Remove, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ProgramTemplateSet_Upload Method.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ProgramTemplateSet_Upload = new ExpandedNodeId(Methods.FunctionalUnitType_ProgramManager_ProgramTemplateSet_Upload, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_Acknowledge Method.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_Acknowledge = new ExpandedNodeId(Methods.BaseControlFunctionType_AlarmMonitor_Acknowledge, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_AddComment Method.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_AddComment = new ExpandedNodeId(Methods.BaseControlFunctionType_AlarmMonitor_AddComment, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_Disable Method.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_Disable = new ExpandedNodeId(Methods.BaseControlFunctionType_AlarmMonitor_Disable, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_Enable Method.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_Enable = new ExpandedNodeId(Methods.BaseControlFunctionType_AlarmMonitor_Enable, Namespaces.LADS);

        /// <summary>
        /// The identifier for the DiscreteControlFunctionType_StateMachine_Start Method.
        /// </summary>
        public static readonly ExpandedNodeId DiscreteControlFunctionType_StateMachine_Start = new ExpandedNodeId(Methods.DiscreteControlFunctionType_StateMachine_Start, Namespaces.LADS);

        /// <summary>
        /// The identifier for the DiscreteControlFunctionType_StateMachine_Stop Method.
        /// </summary>
        public static readonly ExpandedNodeId DiscreteControlFunctionType_StateMachine_Stop = new ExpandedNodeId(Methods.DiscreteControlFunctionType_StateMachine_Stop, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_StateMachine_Reset Method.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_StateMachine_Reset = new ExpandedNodeId(Methods.BaseControlFunctionType_StateMachine_Reset, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_StateMachine_Start Method.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_StateMachine_Start = new ExpandedNodeId(Methods.BaseControlFunctionType_StateMachine_Start, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_StateMachine_Stop Method.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_StateMachine_Stop = new ExpandedNodeId(Methods.BaseControlFunctionType_StateMachine_Stop, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_Acknowledge Method.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_Acknowledge = new ExpandedNodeId(Methods.BaseSensorFunctionType_AlarmMonitor_Acknowledge, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_AddComment Method.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_AddComment = new ExpandedNodeId(Methods.BaseSensorFunctionType_AlarmMonitor_AddComment, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_Disable Method.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_Disable = new ExpandedNodeId(Methods.BaseSensorFunctionType_AlarmMonitor_Disable, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_Enable Method.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_Enable = new ExpandedNodeId(Methods.BaseSensorFunctionType_AlarmMonitor_Enable, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverFunctionType_StateMachine_Close Method.
        /// </summary>
        public static readonly ExpandedNodeId CoverFunctionType_StateMachine_Close = new ExpandedNodeId(Methods.CoverFunctionType_StateMachine_Close, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverFunctionType_StateMachine_Lock Method.
        /// </summary>
        public static readonly ExpandedNodeId CoverFunctionType_StateMachine_Lock = new ExpandedNodeId(Methods.CoverFunctionType_StateMachine_Lock, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverFunctionType_StateMachine_Open Method.
        /// </summary>
        public static readonly ExpandedNodeId CoverFunctionType_StateMachine_Open = new ExpandedNodeId(Methods.CoverFunctionType_StateMachine_Open, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverFunctionType_StateMachine_Unlock Method.
        /// </summary>
        public static readonly ExpandedNodeId CoverFunctionType_StateMachine_Unlock = new ExpandedNodeId(Methods.CoverFunctionType_StateMachine_Unlock, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_Abort Method.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_Abort = new ExpandedNodeId(Methods.ProgramManagerType_ActiveProgram_StateMachine_Abort, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_Clear Method.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_Clear = new ExpandedNodeId(Methods.ProgramManagerType_ActiveProgram_StateMachine_Clear, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_Reset Method.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_Reset = new ExpandedNodeId(Methods.ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_Reset, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Hold Method.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Hold = new ExpandedNodeId(Methods.ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Hold, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Reset Method.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Reset = new ExpandedNodeId(Methods.ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Reset, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start Method.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start = new ExpandedNodeId(Methods.ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Suspend Method.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Suspend = new ExpandedNodeId(Methods.ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Suspend, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_ToComplete Method.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_ToComplete = new ExpandedNodeId(Methods.ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_ToComplete, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Unhold Method.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Unhold = new ExpandedNodeId(Methods.ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Unhold, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Unsuspend Method.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Unsuspend = new ExpandedNodeId(Methods.ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Unsuspend, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_Stop Method.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_Stop = new ExpandedNodeId(Methods.ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_Stop, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ProgramTemplateSet_Download Method.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ProgramTemplateSet_Download = new ExpandedNodeId(Methods.ProgramManagerType_ProgramTemplateSet_Download, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ProgramTemplateSet_Remove Method.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ProgramTemplateSet_Remove = new ExpandedNodeId(Methods.ProgramManagerType_ProgramTemplateSet_Remove, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ProgramTemplateSet_Upload Method.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ProgramTemplateSet_Upload = new ExpandedNodeId(Methods.ProgramManagerType_ProgramTemplateSet_Upload, Namespaces.LADS);

    }
    #endregion

    #region Object Node Identifiers
    /// <summary>
    /// A class that declares constants for all Objects in the Model.
    /// </summary>

    public static partial class ObjectIds
    {
        /// <summary>
        /// The identifier for the ResultPropertiesDataType_Encoding_DefaultBinary Object.
        /// </summary>
        public static readonly ExpandedNodeId ResultPropertiesDataType_Encoding_DefaultBinary = new ExpandedNodeId(Objects.ResultPropertiesDataType_Encoding_DefaultBinary, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultPropertiesDataType_Encoding_DefaultJson Object.
        /// </summary>
        public static readonly ExpandedNodeId ResultPropertiesDataType_Encoding_DefaultJson = new ExpandedNodeId(Objects.ResultPropertiesDataType_Encoding_DefaultJson, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultPropertiesDataType_Encoding_DefaultXml Object.
        /// </summary>
        public static readonly ExpandedNodeId ResultPropertiesDataType_Encoding_DefaultXml = new ExpandedNodeId(Objects.ResultPropertiesDataType_Encoding_DefaultXml, Namespaces.LADS);

        /// <summary>
        /// The identifier for the TemplatePropertiesDataType_Encoding_DefaultBinary Object.
        /// </summary>
        public static readonly ExpandedNodeId TemplatePropertiesDataType_Encoding_DefaultBinary = new ExpandedNodeId(Objects.TemplatePropertiesDataType_Encoding_DefaultBinary, Namespaces.LADS);

        /// <summary>
        /// The identifier for the TemplatePropertiesDataType_Encoding_DefaultJson Object.
        /// </summary>
        public static readonly ExpandedNodeId TemplatePropertiesDataType_Encoding_DefaultJson = new ExpandedNodeId(Objects.TemplatePropertiesDataType_Encoding_DefaultJson, Namespaces.LADS);

        /// <summary>
        /// The identifier for the TemplatePropertiesDataType_Encoding_DefaultXml Object.
        /// </summary>
        public static readonly ExpandedNodeId TemplatePropertiesDataType_Encoding_DefaultXml = new ExpandedNodeId(Objects.TemplatePropertiesDataType_Encoding_DefaultXml, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ActiveProgramType_ProgramTemplate Object.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_ProgramTemplate = new ExpandedNodeId(Objects.ActiveProgramType_ProgramTemplate, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ActiveProgramType_StateMachine Object.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_StateMachine = new ExpandedNodeId(Objects.ActiveProgramType_StateMachine, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ActiveProgramType_StateMachine_ClearedStateMachine Object.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_StateMachine_ClearedStateMachine = new ExpandedNodeId(Objects.ActiveProgramType_StateMachine_ClearedStateMachine, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_Clearing Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_Clearing = new ExpandedNodeId(Objects.LADSProgramClearedStateMachineType_Clearing, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_ClearingToStopped Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_ClearingToStopped = new ExpandedNodeId(Objects.LADSProgramClearedStateMachineType_ClearingToStopped, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_Stopped Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_Stopped = new ExpandedNodeId(Objects.LADSProgramClearedStateMachineType_Stopped, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_Running Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_Running = new ExpandedNodeId(Objects.LADSProgramClearedStateMachineType_Running, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_RunningStateMachine Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_RunningStateMachine = new ExpandedNodeId(Objects.LADSProgramClearedStateMachineType_RunningStateMachine, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_RunningStateMachine_CompleteToResetting Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_RunningStateMachine_CompleteToResetting = new ExpandedNodeId(Objects.LADSProgramClearedStateMachineType_RunningStateMachine_CompleteToResetting, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_RunningStateMachine_CompletingToComplete Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_RunningStateMachine_CompletingToComplete = new ExpandedNodeId(Objects.LADSProgramClearedStateMachineType_RunningStateMachine_CompletingToComplete, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_RunningStateMachine_ExecuteToCompleting Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_RunningStateMachine_ExecuteToCompleting = new ExpandedNodeId(Objects.LADSProgramClearedStateMachineType_RunningStateMachine_ExecuteToCompleting, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_RunningStateMachine_ExecuteToHolding Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_RunningStateMachine_ExecuteToHolding = new ExpandedNodeId(Objects.LADSProgramClearedStateMachineType_RunningStateMachine_ExecuteToHolding, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_RunningStateMachine_ExecuteToSuspending Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_RunningStateMachine_ExecuteToSuspending = new ExpandedNodeId(Objects.LADSProgramClearedStateMachineType_RunningStateMachine_ExecuteToSuspending, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_RunningStateMachine_HeldToUnholding Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_RunningStateMachine_HeldToUnholding = new ExpandedNodeId(Objects.LADSProgramClearedStateMachineType_RunningStateMachine_HeldToUnholding, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_Complete Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_Complete = new ExpandedNodeId(Objects.LADSProgramRunningStateMachineType_Complete, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_CompleteToResetting Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_CompleteToResetting = new ExpandedNodeId(Objects.LADSProgramRunningStateMachineType_CompleteToResetting, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_Resetting Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_Resetting = new ExpandedNodeId(Objects.LADSProgramRunningStateMachineType_Resetting, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_Completing Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_Completing = new ExpandedNodeId(Objects.LADSProgramRunningStateMachineType_Completing, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_CompletingToComplete Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_CompletingToComplete = new ExpandedNodeId(Objects.LADSProgramRunningStateMachineType_CompletingToComplete, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_Execute Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_Execute = new ExpandedNodeId(Objects.LADSProgramRunningStateMachineType_Execute, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_ExecuteToCompleting Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_ExecuteToCompleting = new ExpandedNodeId(Objects.LADSProgramRunningStateMachineType_ExecuteToCompleting, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_ExecuteToHolding Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_ExecuteToHolding = new ExpandedNodeId(Objects.LADSProgramRunningStateMachineType_ExecuteToHolding, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_Holding Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_Holding = new ExpandedNodeId(Objects.LADSProgramRunningStateMachineType_Holding, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_ExecuteToSuspending Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_ExecuteToSuspending = new ExpandedNodeId(Objects.LADSProgramRunningStateMachineType_ExecuteToSuspending, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_Suspending Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_Suspending = new ExpandedNodeId(Objects.LADSProgramRunningStateMachineType_Suspending, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_Held Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_Held = new ExpandedNodeId(Objects.LADSProgramRunningStateMachineType_Held, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_HeldToUnholding Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_HeldToUnholding = new ExpandedNodeId(Objects.LADSProgramRunningStateMachineType_HeldToUnholding, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_Unholding Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_Unholding = new ExpandedNodeId(Objects.LADSProgramRunningStateMachineType_Unholding, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_HoldingToHeld Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_HoldingToHeld = new ExpandedNodeId(Objects.LADSProgramRunningStateMachineType_HoldingToHeld, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_Idle Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_Idle = new ExpandedNodeId(Objects.LADSProgramRunningStateMachineType_Idle, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_IdleToStarting Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_IdleToStarting = new ExpandedNodeId(Objects.LADSProgramRunningStateMachineType_IdleToStarting, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_Starting Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_Starting = new ExpandedNodeId(Objects.LADSProgramRunningStateMachineType_Starting, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_ResettingToIdle Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_ResettingToIdle = new ExpandedNodeId(Objects.LADSProgramRunningStateMachineType_ResettingToIdle, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_StartingToExecute Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_StartingToExecute = new ExpandedNodeId(Objects.LADSProgramRunningStateMachineType_StartingToExecute, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_StartingToHolding Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_StartingToHolding = new ExpandedNodeId(Objects.LADSProgramRunningStateMachineType_StartingToHolding, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_Suspended Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_Suspended = new ExpandedNodeId(Objects.LADSProgramRunningStateMachineType_Suspended, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_SuspendedToHolding Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_SuspendedToHolding = new ExpandedNodeId(Objects.LADSProgramRunningStateMachineType_SuspendedToHolding, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_SuspendedToUnsuspending Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_SuspendedToUnsuspending = new ExpandedNodeId(Objects.LADSProgramRunningStateMachineType_SuspendedToUnsuspending, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_Unsuspending Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_Unsuspending = new ExpandedNodeId(Objects.LADSProgramRunningStateMachineType_Unsuspending, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_SuspendingToHolding Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_SuspendingToHolding = new ExpandedNodeId(Objects.LADSProgramRunningStateMachineType_SuspendingToHolding, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_SuspendingToSuspended Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_SuspendingToSuspended = new ExpandedNodeId(Objects.LADSProgramRunningStateMachineType_SuspendingToSuspended, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_UnholdingToExecute Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_UnholdingToExecute = new ExpandedNodeId(Objects.LADSProgramRunningStateMachineType_UnholdingToExecute, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_UnholdingToHolding Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_UnholdingToHolding = new ExpandedNodeId(Objects.LADSProgramRunningStateMachineType_UnholdingToHolding, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_UnsuspendingToExecute Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_UnsuspendingToExecute = new ExpandedNodeId(Objects.LADSProgramRunningStateMachineType_UnsuspendingToExecute, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_UnsuspendingToHolding Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_UnsuspendingToHolding = new ExpandedNodeId(Objects.LADSProgramRunningStateMachineType_UnsuspendingToHolding, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_RunningToStopped Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_RunningToStopped = new ExpandedNodeId(Objects.LADSProgramClearedStateMachineType_RunningToStopped, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_Stopping Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_Stopping = new ExpandedNodeId(Objects.LADSProgramClearedStateMachineType_Stopping, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_StoppedToRunning Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_StoppedToRunning = new ExpandedNodeId(Objects.LADSProgramClearedStateMachineType_StoppedToRunning, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_StoppingToStopped Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_StoppingToStopped = new ExpandedNodeId(Objects.LADSProgramClearedStateMachineType_StoppingToStopped, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine Object.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine = new ExpandedNodeId(Objects.ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_Aborted Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_Aborted = new ExpandedNodeId(Objects.LADSProgramBaseStateMachineType_Aborted, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_AbortedToCleared Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_AbortedToCleared = new ExpandedNodeId(Objects.LADSProgramBaseStateMachineType_AbortedToCleared, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_Cleared Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_Cleared = new ExpandedNodeId(Objects.LADSProgramBaseStateMachineType_Cleared, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine = new ExpandedNodeId(Objects.LADSProgramBaseStateMachineType_ClearedStateMachine, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_ClearingToStopped Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_ClearingToStopped = new ExpandedNodeId(Objects.LADSProgramBaseStateMachineType_ClearedStateMachine_ClearingToStopped, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_Running Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_Running = new ExpandedNodeId(Objects.LADSProgramBaseStateMachineType_ClearedStateMachine_Running, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine = new ExpandedNodeId(Objects.LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_CompleteToResetting Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_CompleteToResetting = new ExpandedNodeId(Objects.LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_CompleteToResetting, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_CompletingToComplete Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_CompletingToComplete = new ExpandedNodeId(Objects.LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_CompletingToComplete, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_ExecuteToCompleting Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_ExecuteToCompleting = new ExpandedNodeId(Objects.LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_ExecuteToCompleting, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_ExecuteToHolding Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_ExecuteToHolding = new ExpandedNodeId(Objects.LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_ExecuteToHolding, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_ExecuteToSuspending Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_ExecuteToSuspending = new ExpandedNodeId(Objects.LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_ExecuteToSuspending, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_HeldToUnholding Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_HeldToUnholding = new ExpandedNodeId(Objects.LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_HeldToUnholding, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_RunningToStopped Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_RunningToStopped = new ExpandedNodeId(Objects.LADSProgramBaseStateMachineType_ClearedStateMachine_RunningToStopped, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_StoppedToRunning Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_StoppedToRunning = new ExpandedNodeId(Objects.LADSProgramBaseStateMachineType_ClearedStateMachine_StoppedToRunning, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_StoppingToStopped Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_StoppingToStopped = new ExpandedNodeId(Objects.LADSProgramBaseStateMachineType_ClearedStateMachine_StoppingToStopped, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_Aborting Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_Aborting = new ExpandedNodeId(Objects.LADSProgramBaseStateMachineType_Aborting, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_AbortingToAborted Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_AbortingToAborted = new ExpandedNodeId(Objects.LADSProgramBaseStateMachineType_AbortingToAborted, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedToAborting Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedToAborting = new ExpandedNodeId(Objects.LADSProgramBaseStateMachineType_ClearedToAborting, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ComponentSetType_Component Object.
        /// </summary>
        public static readonly ExpandedNodeId ComponentSetType_Component = new ExpandedNodeId(Objects.ComponentSetType_Component, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_Components Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_Components = new ExpandedNodeId(Objects.LADSDeviceType_Components, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_ComponentSet Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_ComponentSet = new ExpandedNodeId(Objects.LADSDeviceType_ComponentSet, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_DeviceHealthAlarms Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_DeviceHealthAlarms = new ExpandedNodeId(Objects.LADSDeviceType_DeviceHealthAlarms, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_FunctionalUnitSet Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_FunctionalUnitSet = new ExpandedNodeId(Objects.LADSDeviceType_FunctionalUnitSet, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitSetType_FunctionalUnit Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitSetType_FunctionalUnit = new ExpandedNodeId(Objects.FunctionalUnitSetType_FunctionalUnit, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitSetType_FunctionalUnit_FunctionSet Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitSetType_FunctionalUnit_FunctionSet = new ExpandedNodeId(Objects.FunctionalUnitSetType_FunctionalUnit_FunctionSet, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionSetType_Function Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionSetType_Function = new ExpandedNodeId(Objects.FunctionSetType_Function, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor Object.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor = new ExpandedNodeId(Objects.BaseControlFunctionType_AlarmMonitor, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_LimitState Object.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_LimitState = new ExpandedNodeId(Objects.BaseControlFunctionType_AlarmMonitor_LimitState, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogControlFunctionType_ParameterSet Object.
        /// </summary>
        public static readonly ExpandedNodeId AnalogControlFunctionType_ParameterSet = new ExpandedNodeId(Objects.AnalogControlFunctionType_ParameterSet, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogControlFunctionWithTotalizerType_ParameterSet Object.
        /// </summary>
        public static readonly ExpandedNodeId AnalogControlFunctionWithTotalizerType_ParameterSet = new ExpandedNodeId(Objects.AnalogControlFunctionWithTotalizerType_ParameterSet, Namespaces.LADS);

        /// <summary>
        /// The identifier for the DiscreteControlFunctionType_StateMachine Object.
        /// </summary>
        public static readonly ExpandedNodeId DiscreteControlFunctionType_StateMachine = new ExpandedNodeId(Objects.DiscreteControlFunctionType_StateMachine, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionStateMachineType_Error Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionStateMachineType_Error = new ExpandedNodeId(Objects.FunctionStateMachineType_Error, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionStateMachineType_ErrorToOff Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionStateMachineType_ErrorToOff = new ExpandedNodeId(Objects.FunctionStateMachineType_ErrorToOff, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionStateMachineType_Off Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionStateMachineType_Off = new ExpandedNodeId(Objects.FunctionStateMachineType_Off, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionStateMachineType_OffToOn Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionStateMachineType_OffToOn = new ExpandedNodeId(Objects.FunctionStateMachineType_OffToOn, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionStateMachineType_On Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionStateMachineType_On = new ExpandedNodeId(Objects.FunctionStateMachineType_On, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionStateMachineType_OnToError Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionStateMachineType_OnToError = new ExpandedNodeId(Objects.FunctionStateMachineType_OnToError, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionStateMachineType_OnToOff Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionStateMachineType_OnToOff = new ExpandedNodeId(Objects.FunctionStateMachineType_OnToOff, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_FunctionSet Object.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_FunctionSet = new ExpandedNodeId(Objects.BaseControlFunctionType_FunctionSet, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_Operational Object.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_Operational = new ExpandedNodeId(Objects.BaseControlFunctionType_Operational, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_ParameterSet Object.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_ParameterSet = new ExpandedNodeId(Objects.BaseControlFunctionType_ParameterSet, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_StateMachine Object.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_StateMachine = new ExpandedNodeId(Objects.BaseControlFunctionType_StateMachine, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_Tuning Object.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_Tuning = new ExpandedNodeId(Objects.BaseControlFunctionType_Tuning, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor Object.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor = new ExpandedNodeId(Objects.BaseSensorFunctionType_AlarmMonitor, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_LimitState Object.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_LimitState = new ExpandedNodeId(Objects.BaseSensorFunctionType_AlarmMonitor_LimitState, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogSensorFunctionType_ParameterSet Object.
        /// </summary>
        public static readonly ExpandedNodeId AnalogSensorFunctionType_ParameterSet = new ExpandedNodeId(Objects.AnalogSensorFunctionType_ParameterSet, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogSensorFunctionWithCompensationType_ParameterSet Object.
        /// </summary>
        public static readonly ExpandedNodeId AnalogSensorFunctionWithCompensationType_ParameterSet = new ExpandedNodeId(Objects.AnalogSensorFunctionWithCompensationType_ParameterSet, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_Configuration Object.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_Configuration = new ExpandedNodeId(Objects.BaseSensorFunctionType_Configuration, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_Operational Object.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_Operational = new ExpandedNodeId(Objects.BaseSensorFunctionType_Operational, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_ParameterSet Object.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_ParameterSet = new ExpandedNodeId(Objects.BaseSensorFunctionType_ParameterSet, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_Tuning Object.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_Tuning = new ExpandedNodeId(Objects.BaseSensorFunctionType_Tuning, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionType_Configuration Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionType_Configuration = new ExpandedNodeId(Objects.FunctionType_Configuration, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverFunctionType_Operational Object.
        /// </summary>
        public static readonly ExpandedNodeId CoverFunctionType_Operational = new ExpandedNodeId(Objects.CoverFunctionType_Operational, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverFunctionType_StateMachine Object.
        /// </summary>
        public static readonly ExpandedNodeId CoverFunctionType_StateMachine = new ExpandedNodeId(Objects.CoverFunctionType_StateMachine, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverFunctionType_StateMachine_Closed Object.
        /// </summary>
        public static readonly ExpandedNodeId CoverFunctionType_StateMachine_Closed = new ExpandedNodeId(Objects.CoverFunctionType_StateMachine_Closed, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverFunctionType_StateMachine_ClosedToLocked Object.
        /// </summary>
        public static readonly ExpandedNodeId CoverFunctionType_StateMachine_ClosedToLocked = new ExpandedNodeId(Objects.CoverFunctionType_StateMachine_ClosedToLocked, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverFunctionType_StateMachine_ClosedToOpen Object.
        /// </summary>
        public static readonly ExpandedNodeId CoverFunctionType_StateMachine_ClosedToOpen = new ExpandedNodeId(Objects.CoverFunctionType_StateMachine_ClosedToOpen, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverStateMachineType_Closed Object.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_Closed = new ExpandedNodeId(Objects.CoverStateMachineType_Closed, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverStateMachineType_ClosedToLocked Object.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_ClosedToLocked = new ExpandedNodeId(Objects.CoverStateMachineType_ClosedToLocked, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverStateMachineType_ClosedToOpen Object.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_ClosedToOpen = new ExpandedNodeId(Objects.CoverStateMachineType_ClosedToOpen, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverStateMachineType_Error Object.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_Error = new ExpandedNodeId(Objects.CoverStateMachineType_Error, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverStateMachineType_Locked Object.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_Locked = new ExpandedNodeId(Objects.CoverStateMachineType_Locked, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverStateMachineType_LockedToClosed Object.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_LockedToClosed = new ExpandedNodeId(Objects.CoverStateMachineType_LockedToClosed, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverStateMachineType_Opened Object.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_Opened = new ExpandedNodeId(Objects.CoverStateMachineType_Opened, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverStateMachineType_OpenToClosed Object.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_OpenToClosed = new ExpandedNodeId(Objects.CoverStateMachineType_OpenToClosed, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverFunctionType_StateMachine_Error Object.
        /// </summary>
        public static readonly ExpandedNodeId CoverFunctionType_StateMachine_Error = new ExpandedNodeId(Objects.CoverFunctionType_StateMachine_Error, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverFunctionType_StateMachine_Locked Object.
        /// </summary>
        public static readonly ExpandedNodeId CoverFunctionType_StateMachine_Locked = new ExpandedNodeId(Objects.CoverFunctionType_StateMachine_Locked, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverFunctionType_StateMachine_LockedToClosed Object.
        /// </summary>
        public static readonly ExpandedNodeId CoverFunctionType_StateMachine_LockedToClosed = new ExpandedNodeId(Objects.CoverFunctionType_StateMachine_LockedToClosed, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverFunctionType_StateMachine_Opened Object.
        /// </summary>
        public static readonly ExpandedNodeId CoverFunctionType_StateMachine_Opened = new ExpandedNodeId(Objects.CoverFunctionType_StateMachine_Opened, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverFunctionType_StateMachine_OpenToClosed Object.
        /// </summary>
        public static readonly ExpandedNodeId CoverFunctionType_StateMachine_OpenToClosed = new ExpandedNodeId(Objects.CoverFunctionType_StateMachine_OpenToClosed, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionType_FunctionSet Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionType_FunctionSet = new ExpandedNodeId(Objects.FunctionType_FunctionSet, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionType_ParameterSet Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionType_ParameterSet = new ExpandedNodeId(Objects.FunctionType_ParameterSet, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_FunctionSet Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_FunctionSet = new ExpandedNodeId(Objects.FunctionalUnitType_FunctionSet, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_Identification Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_Identification = new ExpandedNodeId(Objects.FunctionalUnitType_Identification, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram Object.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram = new ExpandedNodeId(Objects.ProgramManagerType_ActiveProgram, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_ProgramTemplate Object.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_ProgramTemplate = new ExpandedNodeId(Objects.ProgramManagerType_ActiveProgram_ProgramTemplate, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine Object.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine = new ExpandedNodeId(Objects.ProgramManagerType_ActiveProgram_StateMachine, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_Aborted Object.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_Aborted = new ExpandedNodeId(Objects.ProgramManagerType_ActiveProgram_StateMachine_Aborted, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_Aborting Object.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_Aborting = new ExpandedNodeId(Objects.ProgramManagerType_ActiveProgram_StateMachine_Aborting, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine Object.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine = new ExpandedNodeId(Objects.ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_ClearingToStopped Object.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_ClearingToStopped = new ExpandedNodeId(Objects.ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_ClearingToStopped, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_Running Object.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_Running = new ExpandedNodeId(Objects.ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_Running, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine Object.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine = new ExpandedNodeId(Objects.ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningToStopped Object.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningToStopped = new ExpandedNodeId(Objects.ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningToStopped, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_StoppedToRunning Object.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_StoppedToRunning = new ExpandedNodeId(Objects.ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_StoppedToRunning, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_StoppingToStopped Object.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_StoppingToStopped = new ExpandedNodeId(Objects.ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_StoppingToStopped, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_ClearedToAborting Object.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_ClearedToAborting = new ExpandedNodeId(Objects.ProgramManagerType_ActiveProgram_StateMachine_ClearedToAborting, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_Operational Object.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_Operational = new ExpandedNodeId(Objects.ProgramManagerType_Operational, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ProgramTemplateSet Object.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ProgramTemplateSet = new ExpandedNodeId(Objects.ProgramManagerType_ProgramTemplateSet, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramTemplateSetType_TemplateName_PlaceHolder Object.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateSetType_TemplateName_PlaceHolder = new ExpandedNodeId(Objects.ProgramTemplateSetType_TemplateName_PlaceHolder, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ResultSet Object.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ResultSet = new ExpandedNodeId(Objects.ProgramManagerType_ResultSet, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultSetType_ResultName_Placeholder Object.
        /// </summary>
        public static readonly ExpandedNodeId ResultSetType_ResultName_Placeholder = new ExpandedNodeId(Objects.ResultSetType_ResultName_Placeholder, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultSetType_ResultName_Placeholder_FileSet Object.
        /// </summary>
        public static readonly ExpandedNodeId ResultSetType_ResultName_Placeholder_FileSet = new ExpandedNodeId(Objects.ResultSetType_ResultName_Placeholder_FileSet, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultFileSetType_ResultFileName_Placeholder Object.
        /// </summary>
        public static readonly ExpandedNodeId ResultFileSetType_ResultFileName_Placeholder = new ExpandedNodeId(Objects.ResultFileSetType_ResultFileName_Placeholder, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultType_FileSet Object.
        /// </summary>
        public static readonly ExpandedNodeId ResultType_FileSet = new ExpandedNodeId(Objects.ResultType_FileSet, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultType_Template Object.
        /// </summary>
        public static readonly ExpandedNodeId ResultType_Template = new ExpandedNodeId(Objects.ResultType_Template, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultType_VariableSet Object.
        /// </summary>
        public static readonly ExpandedNodeId ResultType_VariableSet = new ExpandedNodeId(Objects.ResultType_VariableSet, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultSetType_ResultName_Placeholder_Template Object.
        /// </summary>
        public static readonly ExpandedNodeId ResultSetType_ResultName_Placeholder_Template = new ExpandedNodeId(Objects.ResultSetType_ResultName_Placeholder_Template, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultSetType_ResultName_Placeholder_VariableSet Object.
        /// </summary>
        public static readonly ExpandedNodeId ResultSetType_ResultName_Placeholder_VariableSet = new ExpandedNodeId(Objects.ResultSetType_ResultName_Placeholder_VariableSet, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_Lock Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_Lock = new ExpandedNodeId(Objects.FunctionalUnitType_Lock, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_MethodSet Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_MethodSet = new ExpandedNodeId(Objects.FunctionalUnitType_MethodSet, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_Operational Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_Operational = new ExpandedNodeId(Objects.FunctionalUnitType_Operational, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager = new ExpandedNodeId(Objects.FunctionalUnitType_ProgramManager, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram = new ExpandedNodeId(Objects.FunctionalUnitType_ProgramManager_ActiveProgram, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate = new ExpandedNodeId(Objects.FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine = new ExpandedNodeId(Objects.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine = new ExpandedNodeId(Objects.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine = new ExpandedNodeId(Objects.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_Operational Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_Operational = new ExpandedNodeId(Objects.FunctionalUnitType_ProgramManager_Operational, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ProgramTemplateSet Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ProgramTemplateSet = new ExpandedNodeId(Objects.FunctionalUnitType_ProgramManager_ProgramTemplateSet, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ResultSet Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ResultSet = new ExpandedNodeId(Objects.FunctionalUnitType_ProgramManager_ResultSet, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_SupportedPropertySet Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_SupportedPropertySet = new ExpandedNodeId(Objects.FunctionalUnitType_SupportedPropertySet, Namespaces.LADS);

        /// <summary>
        /// The identifier for the PropertySetType_Property Object.
        /// </summary>
        public static readonly ExpandedNodeId PropertySetType_Property = new ExpandedNodeId(Objects.PropertySetType_Property, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitSetType_FunctionalUnit_Lock Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitSetType_FunctionalUnit_Lock = new ExpandedNodeId(Objects.FunctionalUnitSetType_FunctionalUnit_Lock, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitSetType_FunctionalUnit_MethodSet Object.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitSetType_FunctionalUnit_MethodSet = new ExpandedNodeId(Objects.FunctionalUnitSetType_FunctionalUnit_MethodSet, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_Identification Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_Identification = new ExpandedNodeId(Objects.LADSDeviceType_Identification, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_Lock Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_Lock = new ExpandedNodeId(Objects.LADSDeviceType_Lock, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_Maintenance Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_Maintenance = new ExpandedNodeId(Objects.LADSDeviceType_Maintenance, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_Operational Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_Operational = new ExpandedNodeId(Objects.LADSDeviceType_Operational, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_StateMachine Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_StateMachine = new ExpandedNodeId(Objects.LADSDeviceType_StateMachine, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_Maintenance Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_Maintenance = new ExpandedNodeId(Objects.LADSDeviceStateMachineType_Maintenance, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_MaintenanceToOperatingTransition Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_MaintenanceToOperatingTransition = new ExpandedNodeId(Objects.LADSDeviceStateMachineType_MaintenanceToOperatingTransition, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_Operating Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_Operating = new ExpandedNodeId(Objects.LADSDeviceStateMachineType_Operating, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_MaintenanceToShutdownTransition Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_MaintenanceToShutdownTransition = new ExpandedNodeId(Objects.LADSDeviceStateMachineType_MaintenanceToShutdownTransition, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_Shutdown Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_Shutdown = new ExpandedNodeId(Objects.LADSDeviceStateMachineType_Shutdown, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_OperatingToMaintenanceTransition Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_OperatingToMaintenanceTransition = new ExpandedNodeId(Objects.LADSDeviceStateMachineType_OperatingToMaintenanceTransition, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_OperatingToShutdownTransition Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_OperatingToShutdownTransition = new ExpandedNodeId(Objects.LADSDeviceStateMachineType_OperatingToShutdownTransition, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_OperatingToStandbyTransition Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_OperatingToStandbyTransition = new ExpandedNodeId(Objects.LADSDeviceStateMachineType_OperatingToStandbyTransition, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_Standby Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_Standby = new ExpandedNodeId(Objects.LADSDeviceStateMachineType_Standby, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_Powerup Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_Powerup = new ExpandedNodeId(Objects.LADSDeviceStateMachineType_Powerup, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_PowerupToOperatingTransition Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_PowerupToOperatingTransition = new ExpandedNodeId(Objects.LADSDeviceStateMachineType_PowerupToOperatingTransition, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_StandbyToOperatingTransition Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_StandbyToOperatingTransition = new ExpandedNodeId(Objects.LADSDeviceStateMachineType_StandbyToOperatingTransition, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_SupplySet Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_SupplySet = new ExpandedNodeId(Objects.LADSDeviceType_SupplySet, Namespaces.LADS);

        /// <summary>
        /// The identifier for the SupplySetType_Supply Object.
        /// </summary>
        public static readonly ExpandedNodeId SupplySetType_Supply = new ExpandedNodeId(Objects.SupplySetType_Supply, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_TaskSet Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_TaskSet = new ExpandedNodeId(Objects.LADSDeviceType_TaskSet, Namespaces.LADS);

        /// <summary>
        /// The identifier for the TaskSetType_Task Object.
        /// </summary>
        public static readonly ExpandedNodeId TaskSetType_Task = new ExpandedNodeId(Objects.TaskSetType_Task, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSComponentType_ComponentSet Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_ComponentSet = new ExpandedNodeId(Objects.LADSComponentType_ComponentSet, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSComponentType_DeviceHealthAlarms Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_DeviceHealthAlarms = new ExpandedNodeId(Objects.LADSComponentType_DeviceHealthAlarms, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSComponentType_Identification Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_Identification = new ExpandedNodeId(Objects.LADSComponentType_Identification, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSComponentType_Maintenance Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_Maintenance = new ExpandedNodeId(Objects.LADSComponentType_Maintenance, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSComponentType_TaskSet Object.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_TaskSet = new ExpandedNodeId(Objects.LADSComponentType_TaskSet, Namespaces.LADS);

        /// <summary>
        /// The identifier for the Namespaces_http___spectaris_de_LADS_ Object.
        /// </summary>
        public static readonly ExpandedNodeId Namespaces_http___spectaris_de_LADS_ = new ExpandedNodeId(Objects.Namespaces_http___spectaris_de_LADS_, Namespaces.LADS);

    }
    #endregion

    #region ObjectType Node Identifiers
    /// <summary>
    /// A class that declares constants for all Objects in the Model.
    /// </summary>

    public static partial class ObjectTypeIds
    {
        /// <summary>
        /// The identifier for the ActiveProgramType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType = new ExpandedNodeId(ObjectTypes.ActiveProgramType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionMethodSetType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionMethodSetType = new ExpandedNodeId(ObjectTypes.BaseControlFunctionMethodSetType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionParameterSetType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionParameterSetType = new ExpandedNodeId(ObjectTypes.BaseControlFunctionParameterSetType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionParameterSetType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionParameterSetType = new ExpandedNodeId(ObjectTypes.BaseSensorFunctionParameterSetType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ComponentSetType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId ComponentSetType = new ExpandedNodeId(ObjectTypes.ComponentSetType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseMaintenanceInformationType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId BaseMaintenanceInformationType = new ExpandedNodeId(ObjectTypes.BaseMaintenanceInformationType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitSetType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitSetType = new ExpandedNodeId(ObjectTypes.FunctionalUnitSetType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionSetType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId FunctionSetType = new ExpandedNodeId(ObjectTypes.FunctionSetType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramTemplateSetType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateSetType = new ExpandedNodeId(ObjectTypes.ProgramTemplateSetType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramTemplateType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateType = new ExpandedNodeId(ObjectTypes.ProgramTemplateType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the PropertySetType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId PropertySetType = new ExpandedNodeId(ObjectTypes.PropertySetType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the PropertyType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId PropertyType = new ExpandedNodeId(ObjectTypes.PropertyType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultFileSetType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId ResultFileSetType = new ExpandedNodeId(ObjectTypes.ResultFileSetType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultFileType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId ResultFileType = new ExpandedNodeId(ObjectTypes.ResultFileType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultSetType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId ResultSetType = new ExpandedNodeId(ObjectTypes.ResultSetType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId ResultType = new ExpandedNodeId(ObjectTypes.ResultType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverStateMachineType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType = new ExpandedNodeId(ObjectTypes.CoverStateMachineType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionStateMachineType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId FunctionStateMachineType = new ExpandedNodeId(ObjectTypes.FunctionStateMachineType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType = new ExpandedNodeId(ObjectTypes.LADSDeviceStateMachineType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType = new ExpandedNodeId(ObjectTypes.LADSProgramBaseStateMachineType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType = new ExpandedNodeId(ObjectTypes.LADSProgramClearedStateMachineType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType = new ExpandedNodeId(ObjectTypes.LADSProgramRunningStateMachineType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the SupplySetType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId SupplySetType = new ExpandedNodeId(ObjectTypes.SupplySetType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the SupplyType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId SupplyType = new ExpandedNodeId(ObjectTypes.SupplyType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the TaskSetType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId TaskSetType = new ExpandedNodeId(ObjectTypes.TaskSetType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the TaskType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId TaskType = new ExpandedNodeId(ObjectTypes.TaskType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType = new ExpandedNodeId(ObjectTypes.LADSDeviceType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSComponentType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType = new ExpandedNodeId(ObjectTypes.LADSComponentType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType = new ExpandedNodeId(ObjectTypes.FunctionalUnitType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId FunctionType = new ExpandedNodeId(ObjectTypes.FunctionType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType = new ExpandedNodeId(ObjectTypes.BaseControlFunctionType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogControlFunctionType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId AnalogControlFunctionType = new ExpandedNodeId(ObjectTypes.AnalogControlFunctionType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogControlFunctionWithTotalizerType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId AnalogControlFunctionWithTotalizerType = new ExpandedNodeId(ObjectTypes.AnalogControlFunctionWithTotalizerType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the DiscreteControlFunctionType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId DiscreteControlFunctionType = new ExpandedNodeId(ObjectTypes.DiscreteControlFunctionType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType = new ExpandedNodeId(ObjectTypes.BaseSensorFunctionType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogSensorFunctionType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId AnalogSensorFunctionType = new ExpandedNodeId(ObjectTypes.AnalogSensorFunctionType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogSensorFunctionWithCompensationType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId AnalogSensorFunctionWithCompensationType = new ExpandedNodeId(ObjectTypes.AnalogSensorFunctionWithCompensationType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverFunctionType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId CoverFunctionType = new ExpandedNodeId(ObjectTypes.CoverFunctionType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType = new ExpandedNodeId(ObjectTypes.ProgramManagerType, Namespaces.LADS);

    }
    #endregion

    #region ReferenceType Node Identifiers
    /// <summary>
    /// A class that declares constants for all ReferenceTypes in the Model.
    /// </summary>

    public static partial class ReferenceTypeIds
    {
        /// <summary>
        /// The identifier for the Utilizes ReferenceType.
        /// </summary>
        public static readonly ExpandedNodeId Utilizes = new ExpandedNodeId(ReferenceTypes.Utilizes, Namespaces.LADS);

    }
    #endregion

    #region Variable Node Identifiers
    /// <summary>
    /// A class that declares constants for all Variables in the Model.
    /// </summary>

    public static partial class VariableIds
    {
        /// <summary>
        /// The identifier for the TypeDictionary_BinarySchema Variable.
        /// </summary>
        public static readonly ExpandedNodeId TypeDictionary_BinarySchema = new ExpandedNodeId(Variables.TypeDictionary_BinarySchema, Namespaces.LADS);

        /// <summary>
        /// The identifier for the TypeDictionary_BinarySchema_NamespaceUri Variable.
        /// </summary>
        public static readonly ExpandedNodeId TypeDictionary_BinarySchema_NamespaceUri = new ExpandedNodeId(Variables.TypeDictionary_BinarySchema_NamespaceUri, Namespaces.LADS);

        /// <summary>
        /// The identifier for the TypeDictionary_BinarySchema_ResultPropertiesDataType Variable.
        /// </summary>
        public static readonly ExpandedNodeId TypeDictionary_BinarySchema_ResultPropertiesDataType = new ExpandedNodeId(Variables.TypeDictionary_BinarySchema_ResultPropertiesDataType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the TypeDictionary_BinarySchema_TemplatePropertiesDataType Variable.
        /// </summary>
        public static readonly ExpandedNodeId TypeDictionary_BinarySchema_TemplatePropertiesDataType = new ExpandedNodeId(Variables.TypeDictionary_BinarySchema_TemplatePropertiesDataType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the TypeDictionary_XmlSchema Variable.
        /// </summary>
        public static readonly ExpandedNodeId TypeDictionary_XmlSchema = new ExpandedNodeId(Variables.TypeDictionary_XmlSchema, Namespaces.LADS);

        /// <summary>
        /// The identifier for the TypeDictionary_XmlSchema_NamespaceUri Variable.
        /// </summary>
        public static readonly ExpandedNodeId TypeDictionary_XmlSchema_NamespaceUri = new ExpandedNodeId(Variables.TypeDictionary_XmlSchema_NamespaceUri, Namespaces.LADS);

        /// <summary>
        /// The identifier for the TypeDictionary_XmlSchema_ResultPropertiesDataType Variable.
        /// </summary>
        public static readonly ExpandedNodeId TypeDictionary_XmlSchema_ResultPropertiesDataType = new ExpandedNodeId(Variables.TypeDictionary_XmlSchema_ResultPropertiesDataType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the TypeDictionary_XmlSchema_TemplatePropertiesDataType Variable.
        /// </summary>
        public static readonly ExpandedNodeId TypeDictionary_XmlSchema_TemplatePropertiesDataType = new ExpandedNodeId(Variables.TypeDictionary_XmlSchema_TemplatePropertiesDataType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ActiveProgramType_ProgramTemplate_Author Variable.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_ProgramTemplate_Author = new ExpandedNodeId(Variables.ActiveProgramType_ProgramTemplate_Author, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ActiveProgramType_ProgramTemplate_Created Variable.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_ProgramTemplate_Created = new ExpandedNodeId(Variables.ActiveProgramType_ProgramTemplate_Created, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ActiveProgramType_ProgramTemplate_Description Variable.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_ProgramTemplate_Description = new ExpandedNodeId(Variables.ActiveProgramType_ProgramTemplate_Description, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ActiveProgramType_ProgramTemplate_Modified Variable.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_ProgramTemplate_Modified = new ExpandedNodeId(Variables.ActiveProgramType_ProgramTemplate_Modified, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ActiveProgramType_ProgramTemplate_Name Variable.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_ProgramTemplate_Name = new ExpandedNodeId(Variables.ActiveProgramType_ProgramTemplate_Name, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ActiveProgramType_ProgramTemplate_Status Variable.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_ProgramTemplate_Status = new ExpandedNodeId(Variables.ActiveProgramType_ProgramTemplate_Status, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ActiveProgramType_ProgramTemplate_Type Variable.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_ProgramTemplate_Type = new ExpandedNodeId(Variables.ActiveProgramType_ProgramTemplate_Type, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ActiveProgramType_ProgramTemplate_Version Variable.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_ProgramTemplate_Version = new ExpandedNodeId(Variables.ActiveProgramType_ProgramTemplate_Version, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ActiveProgramType_StateMachine_AvailableStates Variable.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_StateMachine_AvailableStates = new ExpandedNodeId(Variables.ActiveProgramType_StateMachine_AvailableStates, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ActiveProgramType_StateMachine_AvailableTransitions Variable.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_StateMachine_AvailableTransitions = new ExpandedNodeId(Variables.ActiveProgramType_StateMachine_AvailableTransitions, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ActiveProgramType_StateMachine_ClearedStateMachine_AvailableStates Variable.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_StateMachine_ClearedStateMachine_AvailableStates = new ExpandedNodeId(Variables.ActiveProgramType_StateMachine_ClearedStateMachine_AvailableStates, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ActiveProgramType_StateMachine_ClearedStateMachine_AvailableTransitions Variable.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_StateMachine_ClearedStateMachine_AvailableTransitions = new ExpandedNodeId(Variables.ActiveProgramType_StateMachine_ClearedStateMachine_AvailableTransitions, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ActiveProgramType_StateMachine_ClearedStateMachine_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_StateMachine_ClearedStateMachine_CurrentState = new ExpandedNodeId(Variables.ActiveProgramType_StateMachine_ClearedStateMachine_CurrentState, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ActiveProgramType_StateMachine_ClearedStateMachine_CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_StateMachine_ClearedStateMachine_CurrentState_Id = new ExpandedNodeId(Variables.ActiveProgramType_StateMachine_ClearedStateMachine_CurrentState_Id, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ActiveProgramType_StateMachine_CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_StateMachine_CurrentState_Id = new ExpandedNodeId(Variables.ActiveProgramType_StateMachine_CurrentState_Id, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableStates Variable.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableStates = new ExpandedNodeId(Variables.ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableStates, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableTransitions Variable.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableTransitions = new ExpandedNodeId(Variables.ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableTransitions, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState = new ExpandedNodeId(Variables.ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState_Id = new ExpandedNodeId(Variables.ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState_Id, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_Start_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_Start_InputArguments = new ExpandedNodeId(Variables.ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_Start_InputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_Start_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_Start_OutputArguments = new ExpandedNodeId(Variables.ActiveProgramType_StateMachine_ClearedStateMachine_RunningStateMachine_Start_OutputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ActiveProgramType_StateMachine_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId ActiveProgramType_StateMachine_CurrentState = new ExpandedNodeId(Variables.ActiveProgramType_StateMachine_CurrentState, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionMethodSetType_ResetTotalizer_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionMethodSetType_ResetTotalizer_InputArguments = new ExpandedNodeId(Variables.BaseControlFunctionMethodSetType_ResetTotalizer_InputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionParameterSetType_CtrlP Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionParameterSetType_CtrlP = new ExpandedNodeId(Variables.BaseControlFunctionParameterSetType_CtrlP, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionParameterSetType_CtrlTd Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionParameterSetType_CtrlTd = new ExpandedNodeId(Variables.BaseControlFunctionParameterSetType_CtrlTd, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionParameterSetType_CtrlTi Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionParameterSetType_CtrlTi = new ExpandedNodeId(Variables.BaseControlFunctionParameterSetType_CtrlTi, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionParameterSetType_CurrentValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionParameterSetType_CurrentValue = new ExpandedNodeId(Variables.BaseControlFunctionParameterSetType_CurrentValue, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionParameterSetType_CurrentValue_EngineeringUnits Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionParameterSetType_CurrentValue_EngineeringUnits = new ExpandedNodeId(Variables.BaseControlFunctionParameterSetType_CurrentValue_EngineeringUnits, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionParameterSetType_CurrentValue_EURange Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionParameterSetType_CurrentValue_EURange = new ExpandedNodeId(Variables.BaseControlFunctionParameterSetType_CurrentValue_EURange, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionParameterSetType_IsEnabled Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionParameterSetType_IsEnabled = new ExpandedNodeId(Variables.BaseControlFunctionParameterSetType_IsEnabled, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionParameterSetType_TargetValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionParameterSetType_TargetValue = new ExpandedNodeId(Variables.BaseControlFunctionParameterSetType_TargetValue, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionParameterSetType_TargetValue_EngineeringUnits Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionParameterSetType_TargetValue_EngineeringUnits = new ExpandedNodeId(Variables.BaseControlFunctionParameterSetType_TargetValue_EngineeringUnits, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionParameterSetType_TargetValue_EURange Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionParameterSetType_TargetValue_EURange = new ExpandedNodeId(Variables.BaseControlFunctionParameterSetType_TargetValue_EURange, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionParameterSetType_TotalizedValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionParameterSetType_TotalizedValue = new ExpandedNodeId(Variables.BaseControlFunctionParameterSetType_TotalizedValue, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionParameterSetType_TotalizedValue_EngineeringUnits Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionParameterSetType_TotalizedValue_EngineeringUnits = new ExpandedNodeId(Variables.BaseControlFunctionParameterSetType_TotalizedValue_EngineeringUnits, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionParameterSetType_TotalizedValue_EURange Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionParameterSetType_TotalizedValue_EURange = new ExpandedNodeId(Variables.BaseControlFunctionParameterSetType_TotalizedValue_EURange, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionParameterSetType_CalibrationValues Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionParameterSetType_CalibrationValues = new ExpandedNodeId(Variables.BaseSensorFunctionParameterSetType_CalibrationValues, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionParameterSetType_CompensationValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionParameterSetType_CompensationValue = new ExpandedNodeId(Variables.BaseSensorFunctionParameterSetType_CompensationValue, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionParameterSetType_CompensationValue_EngineeringUnits Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionParameterSetType_CompensationValue_EngineeringUnits = new ExpandedNodeId(Variables.BaseSensorFunctionParameterSetType_CompensationValue_EngineeringUnits, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionParameterSetType_CompensationValue_EURange Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionParameterSetType_CompensationValue_EURange = new ExpandedNodeId(Variables.BaseSensorFunctionParameterSetType_CompensationValue_EURange, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionParameterSetType_Damping Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionParameterSetType_Damping = new ExpandedNodeId(Variables.BaseSensorFunctionParameterSetType_Damping, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionParameterSetType_RawValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionParameterSetType_RawValue = new ExpandedNodeId(Variables.BaseSensorFunctionParameterSetType_RawValue, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionParameterSetType_RawValue_EngineeringUnits Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionParameterSetType_RawValue_EngineeringUnits = new ExpandedNodeId(Variables.BaseSensorFunctionParameterSetType_RawValue_EngineeringUnits, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionParameterSetType_RawValue_EURange Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionParameterSetType_RawValue_EURange = new ExpandedNodeId(Variables.BaseSensorFunctionParameterSetType_RawValue_EURange, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionParameterSetType_SensorValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionParameterSetType_SensorValue = new ExpandedNodeId(Variables.BaseSensorFunctionParameterSetType_SensorValue, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionParameterSetType_SensorValue_EngineeringUnits Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionParameterSetType_SensorValue_EngineeringUnits = new ExpandedNodeId(Variables.BaseSensorFunctionParameterSetType_SensorValue_EngineeringUnits, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionParameterSetType_SensorValue_EURange Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionParameterSetType_SensorValue_EURange = new ExpandedNodeId(Variables.BaseSensorFunctionParameterSetType_SensorValue_EURange, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseMaintenanceInformationType_TotalOperationCycles Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseMaintenanceInformationType_TotalOperationCycles = new ExpandedNodeId(Variables.BaseMaintenanceInformationType_TotalOperationCycles, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseMaintenanceInformationType_TotalOperationDuration Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseMaintenanceInformationType_TotalOperationDuration = new ExpandedNodeId(Variables.BaseMaintenanceInformationType_TotalOperationDuration, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitSetType_FunctionalUnit_ComponentName Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitSetType_FunctionalUnit_ComponentName = new ExpandedNodeId(Variables.FunctionalUnitSetType_FunctionalUnit_ComponentName, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitSetType_FunctionalUnit_Lock_BreakLock_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitSetType_FunctionalUnit_Lock_BreakLock_OutputArguments = new ExpandedNodeId(Variables.FunctionalUnitSetType_FunctionalUnit_Lock_BreakLock_OutputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitSetType_FunctionalUnit_Lock_ExitLock_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitSetType_FunctionalUnit_Lock_ExitLock_OutputArguments = new ExpandedNodeId(Variables.FunctionalUnitSetType_FunctionalUnit_Lock_ExitLock_OutputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitSetType_FunctionalUnit_Lock_InitLock_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitSetType_FunctionalUnit_Lock_InitLock_InputArguments = new ExpandedNodeId(Variables.FunctionalUnitSetType_FunctionalUnit_Lock_InitLock_InputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitSetType_FunctionalUnit_Lock_InitLock_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitSetType_FunctionalUnit_Lock_InitLock_OutputArguments = new ExpandedNodeId(Variables.FunctionalUnitSetType_FunctionalUnit_Lock_InitLock_OutputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitSetType_FunctionalUnit_Lock_Locked Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitSetType_FunctionalUnit_Lock_Locked = new ExpandedNodeId(Variables.FunctionalUnitSetType_FunctionalUnit_Lock_Locked, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitSetType_FunctionalUnit_Lock_LockingClient Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitSetType_FunctionalUnit_Lock_LockingClient = new ExpandedNodeId(Variables.FunctionalUnitSetType_FunctionalUnit_Lock_LockingClient, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitSetType_FunctionalUnit_Lock_LockingUser Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitSetType_FunctionalUnit_Lock_LockingUser = new ExpandedNodeId(Variables.FunctionalUnitSetType_FunctionalUnit_Lock_LockingUser, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitSetType_FunctionalUnit_Lock_RemainingLockTime Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitSetType_FunctionalUnit_Lock_RemainingLockTime = new ExpandedNodeId(Variables.FunctionalUnitSetType_FunctionalUnit_Lock_RemainingLockTime, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitSetType_FunctionalUnit_Lock_RenewLock_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitSetType_FunctionalUnit_Lock_RenewLock_OutputArguments = new ExpandedNodeId(Variables.FunctionalUnitSetType_FunctionalUnit_Lock_RenewLock_OutputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitSetType_FunctionalUnit_MethodSet_StartFunctions_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitSetType_FunctionalUnit_MethodSet_StartFunctions_InputArguments = new ExpandedNodeId(Variables.FunctionalUnitSetType_FunctionalUnit_MethodSet_StartFunctions_InputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramTemplateSetType_TemplateName_PlaceHolder_Author Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateSetType_TemplateName_PlaceHolder_Author = new ExpandedNodeId(Variables.ProgramTemplateSetType_TemplateName_PlaceHolder_Author, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramTemplateSetType_TemplateName_PlaceHolder_Created Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateSetType_TemplateName_PlaceHolder_Created = new ExpandedNodeId(Variables.ProgramTemplateSetType_TemplateName_PlaceHolder_Created, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramTemplateSetType_TemplateName_PlaceHolder_Description Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateSetType_TemplateName_PlaceHolder_Description = new ExpandedNodeId(Variables.ProgramTemplateSetType_TemplateName_PlaceHolder_Description, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramTemplateSetType_TemplateName_PlaceHolder_Modified Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateSetType_TemplateName_PlaceHolder_Modified = new ExpandedNodeId(Variables.ProgramTemplateSetType_TemplateName_PlaceHolder_Modified, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramTemplateSetType_TemplateName_PlaceHolder_Name Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateSetType_TemplateName_PlaceHolder_Name = new ExpandedNodeId(Variables.ProgramTemplateSetType_TemplateName_PlaceHolder_Name, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramTemplateSetType_TemplateName_PlaceHolder_Status Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateSetType_TemplateName_PlaceHolder_Status = new ExpandedNodeId(Variables.ProgramTemplateSetType_TemplateName_PlaceHolder_Status, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramTemplateSetType_TemplateName_PlaceHolder_Type Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateSetType_TemplateName_PlaceHolder_Type = new ExpandedNodeId(Variables.ProgramTemplateSetType_TemplateName_PlaceHolder_Type, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramTemplateSetType_TemplateName_PlaceHolder_Version Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateSetType_TemplateName_PlaceHolder_Version = new ExpandedNodeId(Variables.ProgramTemplateSetType_TemplateName_PlaceHolder_Version, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramTemplateSetType_Download_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateSetType_Download_InputArguments = new ExpandedNodeId(Variables.ProgramTemplateSetType_Download_InputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramTemplateSetType_Download_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateSetType_Download_OutputArguments = new ExpandedNodeId(Variables.ProgramTemplateSetType_Download_OutputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramTemplateSetType_NodeVersion Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateSetType_NodeVersion = new ExpandedNodeId(Variables.ProgramTemplateSetType_NodeVersion, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramTemplateSetType_Remove_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateSetType_Remove_InputArguments = new ExpandedNodeId(Variables.ProgramTemplateSetType_Remove_InputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramTemplateSetType_Upload_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateSetType_Upload_InputArguments = new ExpandedNodeId(Variables.ProgramTemplateSetType_Upload_InputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramTemplateType_Author Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateType_Author = new ExpandedNodeId(Variables.ProgramTemplateType_Author, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramTemplateType_Created Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateType_Created = new ExpandedNodeId(Variables.ProgramTemplateType_Created, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramTemplateType_Description Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateType_Description = new ExpandedNodeId(Variables.ProgramTemplateType_Description, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramTemplateType_Modified Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateType_Modified = new ExpandedNodeId(Variables.ProgramTemplateType_Modified, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramTemplateType_Name Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateType_Name = new ExpandedNodeId(Variables.ProgramTemplateType_Name, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramTemplateType_Status Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateType_Status = new ExpandedNodeId(Variables.ProgramTemplateType_Status, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramTemplateType_Type Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateType_Type = new ExpandedNodeId(Variables.ProgramTemplateType_Type, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramTemplateType_Version Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramTemplateType_Version = new ExpandedNodeId(Variables.ProgramTemplateType_Version, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultFileSetType_ResultFileName_Placeholder_MimeType Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultFileSetType_ResultFileName_Placeholder_MimeType = new ExpandedNodeId(Variables.ResultFileSetType_ResultFileName_Placeholder_MimeType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultFileSetType_ResultFileName_Placeholder_Name Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultFileSetType_ResultFileName_Placeholder_Name = new ExpandedNodeId(Variables.ResultFileSetType_ResultFileName_Placeholder_Name, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultFileSetType_ResultFileName_Placeholder_URL Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultFileSetType_ResultFileName_Placeholder_URL = new ExpandedNodeId(Variables.ResultFileSetType_ResultFileName_Placeholder_URL, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultFileSetType_NodeVersion Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultFileSetType_NodeVersion = new ExpandedNodeId(Variables.ResultFileSetType_NodeVersion, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultFileType_MimeType Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultFileType_MimeType = new ExpandedNodeId(Variables.ResultFileType_MimeType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultFileType_Name Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultFileType_Name = new ExpandedNodeId(Variables.ResultFileType_Name, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultFileType_URL Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultFileType_URL = new ExpandedNodeId(Variables.ResultFileType_URL, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultSetType_ResultName_Placeholder_Client Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultSetType_ResultName_Placeholder_Client = new ExpandedNodeId(Variables.ResultSetType_ResultName_Placeholder_Client, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultSetType_ResultName_Placeholder_Descrition Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultSetType_ResultName_Placeholder_Descrition = new ExpandedNodeId(Variables.ResultSetType_ResultName_Placeholder_Descrition, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultSetType_ResultName_Placeholder_FileSet_NodeVersion Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultSetType_ResultName_Placeholder_FileSet_NodeVersion = new ExpandedNodeId(Variables.ResultSetType_ResultName_Placeholder_FileSet_NodeVersion, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultSetType_ResultName_Placeholder_JobId Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultSetType_ResultName_Placeholder_JobId = new ExpandedNodeId(Variables.ResultSetType_ResultName_Placeholder_JobId, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultSetType_ResultName_Placeholder_Name Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultSetType_ResultName_Placeholder_Name = new ExpandedNodeId(Variables.ResultSetType_ResultName_Placeholder_Name, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultSetType_ResultName_Placeholder_SampleIds Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultSetType_ResultName_Placeholder_SampleIds = new ExpandedNodeId(Variables.ResultSetType_ResultName_Placeholder_SampleIds, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultSetType_ResultName_Placeholder_Started Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultSetType_ResultName_Placeholder_Started = new ExpandedNodeId(Variables.ResultSetType_ResultName_Placeholder_Started, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultSetType_ResultName_Placeholder_Stopped Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultSetType_ResultName_Placeholder_Stopped = new ExpandedNodeId(Variables.ResultSetType_ResultName_Placeholder_Stopped, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultSetType_ResultName_Placeholder_Template_Author Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultSetType_ResultName_Placeholder_Template_Author = new ExpandedNodeId(Variables.ResultSetType_ResultName_Placeholder_Template_Author, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultSetType_ResultName_Placeholder_Template_Created Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultSetType_ResultName_Placeholder_Template_Created = new ExpandedNodeId(Variables.ResultSetType_ResultName_Placeholder_Template_Created, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultSetType_ResultName_Placeholder_Template_Description Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultSetType_ResultName_Placeholder_Template_Description = new ExpandedNodeId(Variables.ResultSetType_ResultName_Placeholder_Template_Description, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultSetType_ResultName_Placeholder_Template_Modified Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultSetType_ResultName_Placeholder_Template_Modified = new ExpandedNodeId(Variables.ResultSetType_ResultName_Placeholder_Template_Modified, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultSetType_ResultName_Placeholder_Template_Name Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultSetType_ResultName_Placeholder_Template_Name = new ExpandedNodeId(Variables.ResultSetType_ResultName_Placeholder_Template_Name, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultSetType_ResultName_Placeholder_Template_Status Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultSetType_ResultName_Placeholder_Template_Status = new ExpandedNodeId(Variables.ResultSetType_ResultName_Placeholder_Template_Status, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultSetType_ResultName_Placeholder_Template_Type Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultSetType_ResultName_Placeholder_Template_Type = new ExpandedNodeId(Variables.ResultSetType_ResultName_Placeholder_Template_Type, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultSetType_ResultName_Placeholder_Template_Version Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultSetType_ResultName_Placeholder_Template_Version = new ExpandedNodeId(Variables.ResultSetType_ResultName_Placeholder_Template_Version, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultSetType_ResultName_Placeholder_User Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultSetType_ResultName_Placeholder_User = new ExpandedNodeId(Variables.ResultSetType_ResultName_Placeholder_User, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultSetType_NodeVersion Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultSetType_NodeVersion = new ExpandedNodeId(Variables.ResultSetType_NodeVersion, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultType_Client Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultType_Client = new ExpandedNodeId(Variables.ResultType_Client, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultType_Descrition Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultType_Descrition = new ExpandedNodeId(Variables.ResultType_Descrition, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultType_FileSet_NodeVersion Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultType_FileSet_NodeVersion = new ExpandedNodeId(Variables.ResultType_FileSet_NodeVersion, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultType_JobId Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultType_JobId = new ExpandedNodeId(Variables.ResultType_JobId, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultType_Name Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultType_Name = new ExpandedNodeId(Variables.ResultType_Name, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultType_SampleIds Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultType_SampleIds = new ExpandedNodeId(Variables.ResultType_SampleIds, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultType_Started Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultType_Started = new ExpandedNodeId(Variables.ResultType_Started, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultType_Stopped Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultType_Stopped = new ExpandedNodeId(Variables.ResultType_Stopped, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultType_Template_Author Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultType_Template_Author = new ExpandedNodeId(Variables.ResultType_Template_Author, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultType_Template_Created Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultType_Template_Created = new ExpandedNodeId(Variables.ResultType_Template_Created, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultType_Template_Description Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultType_Template_Description = new ExpandedNodeId(Variables.ResultType_Template_Description, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultType_Template_Modified Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultType_Template_Modified = new ExpandedNodeId(Variables.ResultType_Template_Modified, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultType_Template_Name Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultType_Template_Name = new ExpandedNodeId(Variables.ResultType_Template_Name, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultType_Template_Status Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultType_Template_Status = new ExpandedNodeId(Variables.ResultType_Template_Status, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultType_Template_Type Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultType_Template_Type = new ExpandedNodeId(Variables.ResultType_Template_Type, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultType_Template_Version Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultType_Template_Version = new ExpandedNodeId(Variables.ResultType_Template_Version, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultType_User Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultType_User = new ExpandedNodeId(Variables.ResultType_User, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverStateMachineType_Closed_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_Closed_StateNumber = new ExpandedNodeId(Variables.CoverStateMachineType_Closed_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverStateMachineType_ClosedToLocked_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_ClosedToLocked_TransitionNumber = new ExpandedNodeId(Variables.CoverStateMachineType_ClosedToLocked_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverStateMachineType_ClosedToOpen_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_ClosedToOpen_TransitionNumber = new ExpandedNodeId(Variables.CoverStateMachineType_ClosedToOpen_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverStateMachineType_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_CurrentState = new ExpandedNodeId(Variables.CoverStateMachineType_CurrentState, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverStateMachineType_CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_CurrentState_Id = new ExpandedNodeId(Variables.CoverStateMachineType_CurrentState_Id, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverStateMachineType_Error_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_Error_StateNumber = new ExpandedNodeId(Variables.CoverStateMachineType_Error_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverStateMachineType_Locked_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_Locked_StateNumber = new ExpandedNodeId(Variables.CoverStateMachineType_Locked_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverStateMachineType_LockedToClosed_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_LockedToClosed_TransitionNumber = new ExpandedNodeId(Variables.CoverStateMachineType_LockedToClosed_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverStateMachineType_Opened_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_Opened_StateNumber = new ExpandedNodeId(Variables.CoverStateMachineType_Opened_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverStateMachineType_OpenToClosed_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId CoverStateMachineType_OpenToClosed_TransitionNumber = new ExpandedNodeId(Variables.CoverStateMachineType_OpenToClosed_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionStateMachineType_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionStateMachineType_CurrentState = new ExpandedNodeId(Variables.FunctionStateMachineType_CurrentState, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionStateMachineType_CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionStateMachineType_CurrentState_Id = new ExpandedNodeId(Variables.FunctionStateMachineType_CurrentState_Id, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionStateMachineType_Error_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionStateMachineType_Error_StateNumber = new ExpandedNodeId(Variables.FunctionStateMachineType_Error_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionStateMachineType_ErrorToOff_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionStateMachineType_ErrorToOff_TransitionNumber = new ExpandedNodeId(Variables.FunctionStateMachineType_ErrorToOff_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionStateMachineType_Off_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionStateMachineType_Off_StateNumber = new ExpandedNodeId(Variables.FunctionStateMachineType_Off_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionStateMachineType_OffToOn_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionStateMachineType_OffToOn_TransitionNumber = new ExpandedNodeId(Variables.FunctionStateMachineType_OffToOn_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionStateMachineType_On_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionStateMachineType_On_StateNumber = new ExpandedNodeId(Variables.FunctionStateMachineType_On_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionStateMachineType_OnToError_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionStateMachineType_OnToError_TransitionNumber = new ExpandedNodeId(Variables.FunctionStateMachineType_OnToError_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionStateMachineType_OnToOff_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionStateMachineType_OnToOff_TransitionNumber = new ExpandedNodeId(Variables.FunctionStateMachineType_OnToOff_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_Maintenance_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_Maintenance_StateNumber = new ExpandedNodeId(Variables.LADSDeviceStateMachineType_Maintenance_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_MaintenanceToOperatingTransition_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_MaintenanceToOperatingTransition_TransitionNumber = new ExpandedNodeId(Variables.LADSDeviceStateMachineType_MaintenanceToOperatingTransition_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_MaintenanceToShutdownTransition_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_MaintenanceToShutdownTransition_TransitionNumber = new ExpandedNodeId(Variables.LADSDeviceStateMachineType_MaintenanceToShutdownTransition_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_Operating_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_Operating_StateNumber = new ExpandedNodeId(Variables.LADSDeviceStateMachineType_Operating_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_OperatingToMaintenanceTransition_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_OperatingToMaintenanceTransition_TransitionNumber = new ExpandedNodeId(Variables.LADSDeviceStateMachineType_OperatingToMaintenanceTransition_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_OperatingToShutdownTransition_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_OperatingToShutdownTransition_TransitionNumber = new ExpandedNodeId(Variables.LADSDeviceStateMachineType_OperatingToShutdownTransition_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_OperatingToStandbyTransition_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_OperatingToStandbyTransition_TransitionNumber = new ExpandedNodeId(Variables.LADSDeviceStateMachineType_OperatingToStandbyTransition_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_Powerup_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_Powerup_StateNumber = new ExpandedNodeId(Variables.LADSDeviceStateMachineType_Powerup_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_PowerupToOperatingTransition_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_PowerupToOperatingTransition_TransitionNumber = new ExpandedNodeId(Variables.LADSDeviceStateMachineType_PowerupToOperatingTransition_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_Shutdown_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_Shutdown_StateNumber = new ExpandedNodeId(Variables.LADSDeviceStateMachineType_Shutdown_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_Standby_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_Standby_StateNumber = new ExpandedNodeId(Variables.LADSDeviceStateMachineType_Standby_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceStateMachineType_StandbyToOperatingTransition_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceStateMachineType_StandbyToOperatingTransition_StateNumber = new ExpandedNodeId(Variables.LADSDeviceStateMachineType_StandbyToOperatingTransition_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_Aborted_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_Aborted_StateNumber = new ExpandedNodeId(Variables.LADSProgramBaseStateMachineType_Aborted_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_AbortedToCleared_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_AbortedToCleared_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramBaseStateMachineType_AbortedToCleared_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_Aborting_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_Aborting_StateNumber = new ExpandedNodeId(Variables.LADSProgramBaseStateMachineType_Aborting_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_AbortingToAborted_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_AbortingToAborted_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramBaseStateMachineType_AbortingToAborted_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_AvailableStates Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_AvailableStates = new ExpandedNodeId(Variables.LADSProgramBaseStateMachineType_AvailableStates, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_AvailableTransitions Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_AvailableTransitions = new ExpandedNodeId(Variables.LADSProgramBaseStateMachineType_AvailableTransitions, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_Cleared_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_Cleared_StateNumber = new ExpandedNodeId(Variables.LADSProgramBaseStateMachineType_Cleared_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_AvailableStates Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_AvailableStates = new ExpandedNodeId(Variables.LADSProgramBaseStateMachineType_ClearedStateMachine_AvailableStates, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_AvailableTransitions Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_AvailableTransitions = new ExpandedNodeId(Variables.LADSProgramBaseStateMachineType_ClearedStateMachine_AvailableTransitions, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_ClearingToStopped_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_ClearingToStopped_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramBaseStateMachineType_ClearedStateMachine_ClearingToStopped_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_CurrentState = new ExpandedNodeId(Variables.LADSProgramBaseStateMachineType_ClearedStateMachine_CurrentState, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_CurrentState_Id = new ExpandedNodeId(Variables.LADSProgramBaseStateMachineType_ClearedStateMachine_CurrentState_Id, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_Running_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_Running_StateNumber = new ExpandedNodeId(Variables.LADSProgramBaseStateMachineType_ClearedStateMachine_Running_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_AvailableStates Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_AvailableStates = new ExpandedNodeId(Variables.LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_AvailableStates, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_AvailableTransitions Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_AvailableTransitions = new ExpandedNodeId(Variables.LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_AvailableTransitions, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_CompleteToResetting_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_CompleteToResetting_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_CompleteToResetting_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_CompletingToComplete_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_CompletingToComplete_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_CompletingToComplete_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_CurrentState = new ExpandedNodeId(Variables.LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_CurrentState, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_CurrentState_Id = new ExpandedNodeId(Variables.LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_CurrentState_Id, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_ExecuteToCompleting_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_ExecuteToCompleting_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_ExecuteToCompleting_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_ExecuteToHolding_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_ExecuteToHolding_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_ExecuteToHolding_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_ExecuteToSuspending_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_ExecuteToSuspending_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_ExecuteToSuspending_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_HeldToUnholding_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_HeldToUnholding_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_HeldToUnholding_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_Start_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_Start_InputArguments = new ExpandedNodeId(Variables.LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_Start_InputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_Start_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_Start_OutputArguments = new ExpandedNodeId(Variables.LADSProgramBaseStateMachineType_ClearedStateMachine_RunningStateMachine_Start_OutputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_RunningToStopped_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_RunningToStopped_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramBaseStateMachineType_ClearedStateMachine_RunningToStopped_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_StoppedToRunning_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_StoppedToRunning_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramBaseStateMachineType_ClearedStateMachine_StoppedToRunning_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedStateMachine_StoppingToStopped_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedStateMachine_StoppingToStopped_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramBaseStateMachineType_ClearedStateMachine_StoppingToStopped_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramBaseStateMachineType_ClearedToAborting_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramBaseStateMachineType_ClearedToAborting_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramBaseStateMachineType_ClearedToAborting_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_AvailableStates Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_AvailableStates = new ExpandedNodeId(Variables.LADSProgramClearedStateMachineType_AvailableStates, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_AvailableTransitions Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_AvailableTransitions = new ExpandedNodeId(Variables.LADSProgramClearedStateMachineType_AvailableTransitions, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_Clearing_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_Clearing_StateNumber = new ExpandedNodeId(Variables.LADSProgramClearedStateMachineType_Clearing_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_ClearingToStopped_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_ClearingToStopped_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramClearedStateMachineType_ClearingToStopped_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_Running_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_Running_StateNumber = new ExpandedNodeId(Variables.LADSProgramClearedStateMachineType_Running_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_RunningStateMachine_AvailableStates Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_RunningStateMachine_AvailableStates = new ExpandedNodeId(Variables.LADSProgramClearedStateMachineType_RunningStateMachine_AvailableStates, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_RunningStateMachine_AvailableTransitions Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_RunningStateMachine_AvailableTransitions = new ExpandedNodeId(Variables.LADSProgramClearedStateMachineType_RunningStateMachine_AvailableTransitions, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_RunningStateMachine_CompleteToResetting_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_RunningStateMachine_CompleteToResetting_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramClearedStateMachineType_RunningStateMachine_CompleteToResetting_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_RunningStateMachine_CompletingToComplete_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_RunningStateMachine_CompletingToComplete_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramClearedStateMachineType_RunningStateMachine_CompletingToComplete_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_RunningStateMachine_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_RunningStateMachine_CurrentState = new ExpandedNodeId(Variables.LADSProgramClearedStateMachineType_RunningStateMachine_CurrentState, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_RunningStateMachine_CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_RunningStateMachine_CurrentState_Id = new ExpandedNodeId(Variables.LADSProgramClearedStateMachineType_RunningStateMachine_CurrentState_Id, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_RunningStateMachine_ExecuteToCompleting_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_RunningStateMachine_ExecuteToCompleting_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramClearedStateMachineType_RunningStateMachine_ExecuteToCompleting_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_RunningStateMachine_ExecuteToHolding_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_RunningStateMachine_ExecuteToHolding_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramClearedStateMachineType_RunningStateMachine_ExecuteToHolding_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_RunningStateMachine_ExecuteToSuspending_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_RunningStateMachine_ExecuteToSuspending_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramClearedStateMachineType_RunningStateMachine_ExecuteToSuspending_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_RunningStateMachine_HeldToUnholding_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_RunningStateMachine_HeldToUnholding_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramClearedStateMachineType_RunningStateMachine_HeldToUnholding_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_RunningStateMachine_Start_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_RunningStateMachine_Start_InputArguments = new ExpandedNodeId(Variables.LADSProgramClearedStateMachineType_RunningStateMachine_Start_InputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_RunningStateMachine_Start_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_RunningStateMachine_Start_OutputArguments = new ExpandedNodeId(Variables.LADSProgramClearedStateMachineType_RunningStateMachine_Start_OutputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_RunningToStopped_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_RunningToStopped_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramClearedStateMachineType_RunningToStopped_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_Stopped_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_Stopped_StateNumber = new ExpandedNodeId(Variables.LADSProgramClearedStateMachineType_Stopped_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_StoppedToRunning_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_StoppedToRunning_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramClearedStateMachineType_StoppedToRunning_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_Stopping_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_Stopping_StateNumber = new ExpandedNodeId(Variables.LADSProgramClearedStateMachineType_Stopping_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramClearedStateMachineType_StoppingToStopped_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramClearedStateMachineType_StoppingToStopped_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramClearedStateMachineType_StoppingToStopped_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_AvailableStates Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_AvailableStates = new ExpandedNodeId(Variables.LADSProgramRunningStateMachineType_AvailableStates, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_AvailableTransitions Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_AvailableTransitions = new ExpandedNodeId(Variables.LADSProgramRunningStateMachineType_AvailableTransitions, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_Complete_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_Complete_StateNumber = new ExpandedNodeId(Variables.LADSProgramRunningStateMachineType_Complete_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_CompleteToResetting_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_CompleteToResetting_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramRunningStateMachineType_CompleteToResetting_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_Completing_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_Completing_StateNumber = new ExpandedNodeId(Variables.LADSProgramRunningStateMachineType_Completing_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_CompletingToComplete_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_CompletingToComplete_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramRunningStateMachineType_CompletingToComplete_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_Execute_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_Execute_StateNumber = new ExpandedNodeId(Variables.LADSProgramRunningStateMachineType_Execute_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_ExecuteToCompleting_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_ExecuteToCompleting_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramRunningStateMachineType_ExecuteToCompleting_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_ExecuteToHolding_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_ExecuteToHolding_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramRunningStateMachineType_ExecuteToHolding_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_ExecuteToSuspending_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_ExecuteToSuspending_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramRunningStateMachineType_ExecuteToSuspending_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_Held_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_Held_StateNumber = new ExpandedNodeId(Variables.LADSProgramRunningStateMachineType_Held_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_HeldToUnholding_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_HeldToUnholding_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramRunningStateMachineType_HeldToUnholding_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_Holding_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_Holding_StateNumber = new ExpandedNodeId(Variables.LADSProgramRunningStateMachineType_Holding_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_HoldingToHeld_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_HoldingToHeld_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramRunningStateMachineType_HoldingToHeld_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_Idle_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_Idle_StateNumber = new ExpandedNodeId(Variables.LADSProgramRunningStateMachineType_Idle_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_IdleToStarting_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_IdleToStarting_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramRunningStateMachineType_IdleToStarting_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_Resetting_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_Resetting_StateNumber = new ExpandedNodeId(Variables.LADSProgramRunningStateMachineType_Resetting_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_ResettingToIdle_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_ResettingToIdle_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramRunningStateMachineType_ResettingToIdle_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_Start_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_Start_InputArguments = new ExpandedNodeId(Variables.LADSProgramRunningStateMachineType_Start_InputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_Start_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_Start_OutputArguments = new ExpandedNodeId(Variables.LADSProgramRunningStateMachineType_Start_OutputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_Starting_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_Starting_StateNumber = new ExpandedNodeId(Variables.LADSProgramRunningStateMachineType_Starting_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_StartingToExecute_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_StartingToExecute_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramRunningStateMachineType_StartingToExecute_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_StartingToHolding_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_StartingToHolding_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramRunningStateMachineType_StartingToHolding_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_Suspended_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_Suspended_StateNumber = new ExpandedNodeId(Variables.LADSProgramRunningStateMachineType_Suspended_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_SuspendedToHolding_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_SuspendedToHolding_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramRunningStateMachineType_SuspendedToHolding_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_SuspendedToUnsuspending_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_SuspendedToUnsuspending_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramRunningStateMachineType_SuspendedToUnsuspending_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_Suspending_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_Suspending_StateNumber = new ExpandedNodeId(Variables.LADSProgramRunningStateMachineType_Suspending_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_SuspendingToHolding_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_SuspendingToHolding_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramRunningStateMachineType_SuspendingToHolding_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_SuspendingToSuspended_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_SuspendingToSuspended_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramRunningStateMachineType_SuspendingToSuspended_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_Unholding_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_Unholding_StateNumber = new ExpandedNodeId(Variables.LADSProgramRunningStateMachineType_Unholding_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_UnholdingToExecute_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_UnholdingToExecute_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramRunningStateMachineType_UnholdingToExecute_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_UnholdingToHolding_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_UnholdingToHolding_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramRunningStateMachineType_UnholdingToHolding_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_Unsuspending_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_Unsuspending_StateNumber = new ExpandedNodeId(Variables.LADSProgramRunningStateMachineType_Unsuspending_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_UnsuspendingToExecute_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_UnsuspendingToExecute_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramRunningStateMachineType_UnsuspendingToExecute_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSProgramRunningStateMachineType_UnsuspendingToHolding_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSProgramRunningStateMachineType_UnsuspendingToHolding_TransitionNumber = new ExpandedNodeId(Variables.LADSProgramRunningStateMachineType_UnsuspendingToHolding_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the SupplySetType_Supply_Name Variable.
        /// </summary>
        public static readonly ExpandedNodeId SupplySetType_Supply_Name = new ExpandedNodeId(Variables.SupplySetType_Supply_Name, Namespaces.LADS);

        /// <summary>
        /// The identifier for the SupplyType_Name Variable.
        /// </summary>
        public static readonly ExpandedNodeId SupplyType_Name = new ExpandedNodeId(Variables.SupplyType_Name, Namespaces.LADS);

        /// <summary>
        /// The identifier for the TaskSetType_Task_Execute_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId TaskSetType_Task_Execute_InputArguments = new ExpandedNodeId(Variables.TaskSetType_Task_Execute_InputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the TaskSetType_Task_LastExecution Variable.
        /// </summary>
        public static readonly ExpandedNodeId TaskSetType_Task_LastExecution = new ExpandedNodeId(Variables.TaskSetType_Task_LastExecution, Namespaces.LADS);

        /// <summary>
        /// The identifier for the TaskSetType_Task_LastResult Variable.
        /// </summary>
        public static readonly ExpandedNodeId TaskSetType_Task_LastResult = new ExpandedNodeId(Variables.TaskSetType_Task_LastResult, Namespaces.LADS);

        /// <summary>
        /// The identifier for the TaskType_Execute_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId TaskType_Execute_InputArguments = new ExpandedNodeId(Variables.TaskType_Execute_InputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the TaskType_LastExecution Variable.
        /// </summary>
        public static readonly ExpandedNodeId TaskType_LastExecution = new ExpandedNodeId(Variables.TaskType_LastExecution, Namespaces.LADS);

        /// <summary>
        /// The identifier for the TaskType_LastResult Variable.
        /// </summary>
        public static readonly ExpandedNodeId TaskType_LastResult = new ExpandedNodeId(Variables.TaskType_LastResult, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_AssetId Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_AssetId = new ExpandedNodeId(Variables.LADSDeviceType_AssetId, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_ComponentName Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_ComponentName = new ExpandedNodeId(Variables.LADSDeviceType_ComponentName, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_DeviceHealth Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_DeviceHealth = new ExpandedNodeId(Variables.LADSDeviceType_DeviceHealth, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_DeviceManual Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_DeviceManual = new ExpandedNodeId(Variables.LADSDeviceType_DeviceManual, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_DeviceRevision Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_DeviceRevision = new ExpandedNodeId(Variables.LADSDeviceType_DeviceRevision, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_HardwareRevision Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_HardwareRevision = new ExpandedNodeId(Variables.LADSDeviceType_HardwareRevision, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_Identification_InitialOperationDate Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_Identification_InitialOperationDate = new ExpandedNodeId(Variables.LADSDeviceType_Identification_InitialOperationDate, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_Identification_Manufacturer Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_Identification_Manufacturer = new ExpandedNodeId(Variables.LADSDeviceType_Identification_Manufacturer, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_Identification_MonthOfConstruction Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_Identification_MonthOfConstruction = new ExpandedNodeId(Variables.LADSDeviceType_Identification_MonthOfConstruction, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_Identification_ProductInstanceUri Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_Identification_ProductInstanceUri = new ExpandedNodeId(Variables.LADSDeviceType_Identification_ProductInstanceUri, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_Identification_SerialNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_Identification_SerialNumber = new ExpandedNodeId(Variables.LADSDeviceType_Identification_SerialNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_Identification_YearOfConstruction Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_Identification_YearOfConstruction = new ExpandedNodeId(Variables.LADSDeviceType_Identification_YearOfConstruction, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_Lock_BreakLock_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_Lock_BreakLock_OutputArguments = new ExpandedNodeId(Variables.LADSDeviceType_Lock_BreakLock_OutputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_Lock_ExitLock_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_Lock_ExitLock_OutputArguments = new ExpandedNodeId(Variables.LADSDeviceType_Lock_ExitLock_OutputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_Lock_InitLock_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_Lock_InitLock_InputArguments = new ExpandedNodeId(Variables.LADSDeviceType_Lock_InitLock_InputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_Lock_InitLock_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_Lock_InitLock_OutputArguments = new ExpandedNodeId(Variables.LADSDeviceType_Lock_InitLock_OutputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_Lock_Locked Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_Lock_Locked = new ExpandedNodeId(Variables.LADSDeviceType_Lock_Locked, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_Lock_LockingClient Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_Lock_LockingClient = new ExpandedNodeId(Variables.LADSDeviceType_Lock_LockingClient, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_Lock_LockingUser Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_Lock_LockingUser = new ExpandedNodeId(Variables.LADSDeviceType_Lock_LockingUser, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_Lock_RemainingLockTime Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_Lock_RemainingLockTime = new ExpandedNodeId(Variables.LADSDeviceType_Lock_RemainingLockTime, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_Lock_RenewLock_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_Lock_RenewLock_OutputArguments = new ExpandedNodeId(Variables.LADSDeviceType_Lock_RenewLock_OutputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_Maintenance_TotalOperationCycles Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_Maintenance_TotalOperationCycles = new ExpandedNodeId(Variables.LADSDeviceType_Maintenance_TotalOperationCycles, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_Maintenance_TotalOperationDuration Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_Maintenance_TotalOperationDuration = new ExpandedNodeId(Variables.LADSDeviceType_Maintenance_TotalOperationDuration, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_Manufacturer Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_Manufacturer = new ExpandedNodeId(Variables.LADSDeviceType_Manufacturer, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_ManufacturerUri Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_ManufacturerUri = new ExpandedNodeId(Variables.LADSDeviceType_ManufacturerUri, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_Model Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_Model = new ExpandedNodeId(Variables.LADSDeviceType_Model, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_StateMachine_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_StateMachine_CurrentState = new ExpandedNodeId(Variables.LADSDeviceType_StateMachine_CurrentState, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_StateMachine_CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_StateMachine_CurrentState_Id = new ExpandedNodeId(Variables.LADSDeviceType_StateMachine_CurrentState_Id, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_SerialNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_SerialNumber = new ExpandedNodeId(Variables.LADSDeviceType_SerialNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSDeviceType_SoftwareRevision Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSDeviceType_SoftwareRevision = new ExpandedNodeId(Variables.LADSDeviceType_SoftwareRevision, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSComponentType_ComponentName Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_ComponentName = new ExpandedNodeId(Variables.LADSComponentType_ComponentName, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSComponentType_DeviceHealth Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_DeviceHealth = new ExpandedNodeId(Variables.LADSComponentType_DeviceHealth, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSComponentType_DeviceManual Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_DeviceManual = new ExpandedNodeId(Variables.LADSComponentType_DeviceManual, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSComponentType_DeviceRevision Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_DeviceRevision = new ExpandedNodeId(Variables.LADSComponentType_DeviceRevision, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSComponentType_HardwareRevision Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_HardwareRevision = new ExpandedNodeId(Variables.LADSComponentType_HardwareRevision, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSComponentType_Identification_DeviceRevision Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_Identification_DeviceRevision = new ExpandedNodeId(Variables.LADSComponentType_Identification_DeviceRevision, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSComponentType_Identification_InitialOperationDate Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_Identification_InitialOperationDate = new ExpandedNodeId(Variables.LADSComponentType_Identification_InitialOperationDate, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSComponentType_Identification_Manufacturer Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_Identification_Manufacturer = new ExpandedNodeId(Variables.LADSComponentType_Identification_Manufacturer, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSComponentType_Identification_MonthOfConstruction Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_Identification_MonthOfConstruction = new ExpandedNodeId(Variables.LADSComponentType_Identification_MonthOfConstruction, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSComponentType_Identification_SerialNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_Identification_SerialNumber = new ExpandedNodeId(Variables.LADSComponentType_Identification_SerialNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSComponentType_Identification_YearOfConstruction Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_Identification_YearOfConstruction = new ExpandedNodeId(Variables.LADSComponentType_Identification_YearOfConstruction, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSComponentType_Maintenance_TotalOperationCycles Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_Maintenance_TotalOperationCycles = new ExpandedNodeId(Variables.LADSComponentType_Maintenance_TotalOperationCycles, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSComponentType_Maintenance_TotalOperationDuration Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_Maintenance_TotalOperationDuration = new ExpandedNodeId(Variables.LADSComponentType_Maintenance_TotalOperationDuration, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSComponentType_Manufacturer Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_Manufacturer = new ExpandedNodeId(Variables.LADSComponentType_Manufacturer, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSComponentType_ManufacturerUri Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_ManufacturerUri = new ExpandedNodeId(Variables.LADSComponentType_ManufacturerUri, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSComponentType_Model Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_Model = new ExpandedNodeId(Variables.LADSComponentType_Model, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSComponentType_ProductCode Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_ProductCode = new ExpandedNodeId(Variables.LADSComponentType_ProductCode, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSComponentType_ProductInstanceUri Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_ProductInstanceUri = new ExpandedNodeId(Variables.LADSComponentType_ProductInstanceUri, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSComponentType_SerialNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_SerialNumber = new ExpandedNodeId(Variables.LADSComponentType_SerialNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the LADSComponentType_SoftwareRevision Variable.
        /// </summary>
        public static readonly ExpandedNodeId LADSComponentType_SoftwareRevision = new ExpandedNodeId(Variables.LADSComponentType_SoftwareRevision, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_AssetId Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_AssetId = new ExpandedNodeId(Variables.FunctionalUnitType_AssetId, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ComponentName Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ComponentName = new ExpandedNodeId(Variables.FunctionalUnitType_ComponentName, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_Lock_BreakLock_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_Lock_BreakLock_OutputArguments = new ExpandedNodeId(Variables.FunctionalUnitType_Lock_BreakLock_OutputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_Lock_ExitLock_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_Lock_ExitLock_OutputArguments = new ExpandedNodeId(Variables.FunctionalUnitType_Lock_ExitLock_OutputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_Lock_InitLock_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_Lock_InitLock_InputArguments = new ExpandedNodeId(Variables.FunctionalUnitType_Lock_InitLock_InputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_Lock_InitLock_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_Lock_InitLock_OutputArguments = new ExpandedNodeId(Variables.FunctionalUnitType_Lock_InitLock_OutputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_Lock_Locked Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_Lock_Locked = new ExpandedNodeId(Variables.FunctionalUnitType_Lock_Locked, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_Lock_LockingClient Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_Lock_LockingClient = new ExpandedNodeId(Variables.FunctionalUnitType_Lock_LockingClient, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_Lock_LockingUser Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_Lock_LockingUser = new ExpandedNodeId(Variables.FunctionalUnitType_Lock_LockingUser, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_Lock_RemainingLockTime Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_Lock_RemainingLockTime = new ExpandedNodeId(Variables.FunctionalUnitType_Lock_RemainingLockTime, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_Lock_RenewLock_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_Lock_RenewLock_OutputArguments = new ExpandedNodeId(Variables.FunctionalUnitType_Lock_RenewLock_OutputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_MethodSet_StartFunctions_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_MethodSet_StartFunctions_InputArguments = new ExpandedNodeId(Variables.FunctionalUnitType_MethodSet_StartFunctions_InputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Author Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Author = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Author, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Created Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Created = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Created, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Description Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Description = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Description, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Modified Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Modified = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Modified, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Name Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Name = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Name, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Status Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Status = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Status, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Type Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Type = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Type, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Version Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Version = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Version, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_AvailableStates Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_AvailableStates = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_AvailableStates, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_AvailableTransitions Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_AvailableTransitions = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_AvailableTransitions, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_AvailableStates Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_AvailableStates = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_AvailableStates, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_AvailableTransitions Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_AvailableTransitions = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_AvailableTransitions, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_CurrentState = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_CurrentState, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_CurrentState_Id = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_CurrentState_Id, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableStates Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableStates = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableStates, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableTransitions Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableTransitions = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableTransitions, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState_Id = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState_Id, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start_InputArguments = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start_InputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start_OutputArguments = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start_OutputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_CurrentState = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_CurrentState, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_CurrentState_Id = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ActiveProgram_StateMachine_CurrentState_Id, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ProgramTemplateSet_Download_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ProgramTemplateSet_Download_InputArguments = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ProgramTemplateSet_Download_InputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ProgramTemplateSet_Download_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ProgramTemplateSet_Download_OutputArguments = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ProgramTemplateSet_Download_OutputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ProgramTemplateSet_NodeVersion Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ProgramTemplateSet_NodeVersion = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ProgramTemplateSet_NodeVersion, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ProgramTemplateSet_Remove_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ProgramTemplateSet_Remove_InputArguments = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ProgramTemplateSet_Remove_InputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ProgramTemplateSet_Upload_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ProgramTemplateSet_Upload_InputArguments = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ProgramTemplateSet_Upload_InputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionalUnitType_ProgramManager_ResultSet_NodeVersion Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionalUnitType_ProgramManager_ResultSet_NodeVersion = new ExpandedNodeId(Variables.FunctionalUnitType_ProgramManager_ResultSet_NodeVersion, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_AckedState Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_AckedState = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_AckedState, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_AckedState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_AckedState_Id = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_AckedState_Id, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_Acknowledge_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_Acknowledge_InputArguments = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_Acknowledge_InputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_ActiveState Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_ActiveState = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_ActiveState, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_ActiveState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_ActiveState_Id = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_ActiveState_Id, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_AddComment_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_AddComment_InputArguments = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_AddComment_InputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_BranchId Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_BranchId = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_BranchId, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_ClientUserId Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_ClientUserId = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_ClientUserId, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_Comment Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_Comment = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_Comment, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_Comment_SourceTimestamp Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_Comment_SourceTimestamp = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_Comment_SourceTimestamp, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_ConditionClassId Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_ConditionClassId = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_ConditionClassId, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_ConditionClassName Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_ConditionClassName = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_ConditionClassName, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_ConditionName Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_ConditionName = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_ConditionName, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_EnabledState Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_EnabledState = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_EnabledState, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_EnabledState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_EnabledState_Id = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_EnabledState_Id, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_EventId Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_EventId = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_EventId, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_EventType Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_EventType = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_EventType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_InputNode Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_InputNode = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_InputNode, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_LastSeverity Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_LastSeverity = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_LastSeverity, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_LastSeverity_SourceTimestamp Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_LastSeverity_SourceTimestamp = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_LastSeverity_SourceTimestamp, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_LimitState_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_LimitState_CurrentState = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_LimitState_CurrentState, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_LimitState_CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_LimitState_CurrentState_Id = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_LimitState_CurrentState_Id, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_Message Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_Message = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_Message, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_Quality Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_Quality = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_Quality, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_Quality_SourceTimestamp Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_Quality_SourceTimestamp = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_Quality_SourceTimestamp, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_ReceiveTime Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_ReceiveTime = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_ReceiveTime, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_Retain Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_Retain = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_Retain, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_SetpointNode Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_SetpointNode = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_SetpointNode, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_Severity Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_Severity = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_Severity, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_SourceName Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_SourceName = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_SourceName, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_SourceNode Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_SourceNode = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_SourceNode, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_SuppressedOrShelved Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_SuppressedOrShelved = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_SuppressedOrShelved, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_AlarmMonitor_Time Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_AlarmMonitor_Time = new ExpandedNodeId(Variables.BaseControlFunctionType_AlarmMonitor_Time, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogControlFunctionType_ParameterSet_CtrlP Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogControlFunctionType_ParameterSet_CtrlP = new ExpandedNodeId(Variables.AnalogControlFunctionType_ParameterSet_CtrlP, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogControlFunctionType_ParameterSet_CtrlTd Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogControlFunctionType_ParameterSet_CtrlTd = new ExpandedNodeId(Variables.AnalogControlFunctionType_ParameterSet_CtrlTd, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogControlFunctionType_ParameterSet_CtrlTi Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogControlFunctionType_ParameterSet_CtrlTi = new ExpandedNodeId(Variables.AnalogControlFunctionType_ParameterSet_CtrlTi, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogControlFunctionType_ParameterSet_CurrentValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogControlFunctionType_ParameterSet_CurrentValue = new ExpandedNodeId(Variables.AnalogControlFunctionType_ParameterSet_CurrentValue, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogControlFunctionType_ParameterSet_CurrentValue_EngineeringUnits Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogControlFunctionType_ParameterSet_CurrentValue_EngineeringUnits = new ExpandedNodeId(Variables.AnalogControlFunctionType_ParameterSet_CurrentValue_EngineeringUnits, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogControlFunctionType_ParameterSet_CurrentValue_EURange Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogControlFunctionType_ParameterSet_CurrentValue_EURange = new ExpandedNodeId(Variables.AnalogControlFunctionType_ParameterSet_CurrentValue_EURange, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogControlFunctionType_ParameterSet_IsEnabled Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogControlFunctionType_ParameterSet_IsEnabled = new ExpandedNodeId(Variables.AnalogControlFunctionType_ParameterSet_IsEnabled, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogControlFunctionType_ParameterSet_TargetValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogControlFunctionType_ParameterSet_TargetValue = new ExpandedNodeId(Variables.AnalogControlFunctionType_ParameterSet_TargetValue, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogControlFunctionType_ParameterSet_TargetValue_EngineeringUnits Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogControlFunctionType_ParameterSet_TargetValue_EngineeringUnits = new ExpandedNodeId(Variables.AnalogControlFunctionType_ParameterSet_TargetValue_EngineeringUnits, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogControlFunctionType_ParameterSet_TargetValue_EURange Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogControlFunctionType_ParameterSet_TargetValue_EURange = new ExpandedNodeId(Variables.AnalogControlFunctionType_ParameterSet_TargetValue_EURange, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogControlFunctionWithTotalizerType_ParameterSet_CurrentValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogControlFunctionWithTotalizerType_ParameterSet_CurrentValue = new ExpandedNodeId(Variables.AnalogControlFunctionWithTotalizerType_ParameterSet_CurrentValue, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogControlFunctionWithTotalizerType_ParameterSet_CurrentValue_EngineeringUnits Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogControlFunctionWithTotalizerType_ParameterSet_CurrentValue_EngineeringUnits = new ExpandedNodeId(Variables.AnalogControlFunctionWithTotalizerType_ParameterSet_CurrentValue_EngineeringUnits, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogControlFunctionWithTotalizerType_ParameterSet_CurrentValue_EURange Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogControlFunctionWithTotalizerType_ParameterSet_CurrentValue_EURange = new ExpandedNodeId(Variables.AnalogControlFunctionWithTotalizerType_ParameterSet_CurrentValue_EURange, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogControlFunctionWithTotalizerType_ParameterSet_IsEnabled Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogControlFunctionWithTotalizerType_ParameterSet_IsEnabled = new ExpandedNodeId(Variables.AnalogControlFunctionWithTotalizerType_ParameterSet_IsEnabled, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogControlFunctionWithTotalizerType_ParameterSet_TargetValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogControlFunctionWithTotalizerType_ParameterSet_TargetValue = new ExpandedNodeId(Variables.AnalogControlFunctionWithTotalizerType_ParameterSet_TargetValue, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogControlFunctionWithTotalizerType_ParameterSet_TargetValue_EngineeringUnits Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogControlFunctionWithTotalizerType_ParameterSet_TargetValue_EngineeringUnits = new ExpandedNodeId(Variables.AnalogControlFunctionWithTotalizerType_ParameterSet_TargetValue_EngineeringUnits, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogControlFunctionWithTotalizerType_ParameterSet_TargetValue_EURange Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogControlFunctionWithTotalizerType_ParameterSet_TargetValue_EURange = new ExpandedNodeId(Variables.AnalogControlFunctionWithTotalizerType_ParameterSet_TargetValue_EURange, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogControlFunctionWithTotalizerType_ParameterSet_TotalizedValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogControlFunctionWithTotalizerType_ParameterSet_TotalizedValue = new ExpandedNodeId(Variables.AnalogControlFunctionWithTotalizerType_ParameterSet_TotalizedValue, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogControlFunctionWithTotalizerType_ParameterSet_TotalizedValue_EngineeringUnits Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogControlFunctionWithTotalizerType_ParameterSet_TotalizedValue_EngineeringUnits = new ExpandedNodeId(Variables.AnalogControlFunctionWithTotalizerType_ParameterSet_TotalizedValue_EngineeringUnits, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogControlFunctionWithTotalizerType_ParameterSet_TotalizedValue_EURange Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogControlFunctionWithTotalizerType_ParameterSet_TotalizedValue_EURange = new ExpandedNodeId(Variables.AnalogControlFunctionWithTotalizerType_ParameterSet_TotalizedValue_EURange, Namespaces.LADS);

        /// <summary>
        /// The identifier for the DiscreteControlFunctionType_StateMachine_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId DiscreteControlFunctionType_StateMachine_CurrentState = new ExpandedNodeId(Variables.DiscreteControlFunctionType_StateMachine_CurrentState, Namespaces.LADS);

        /// <summary>
        /// The identifier for the DiscreteControlFunctionType_StateMachine_CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId DiscreteControlFunctionType_StateMachine_CurrentState_Id = new ExpandedNodeId(Variables.DiscreteControlFunctionType_StateMachine_CurrentState_Id, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_StateMachine_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_StateMachine_CurrentState = new ExpandedNodeId(Variables.BaseControlFunctionType_StateMachine_CurrentState, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_StateMachine_CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_StateMachine_CurrentState_Id = new ExpandedNodeId(Variables.BaseControlFunctionType_StateMachine_CurrentState_Id, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_ParameterSet_CurrentValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_ParameterSet_CurrentValue = new ExpandedNodeId(Variables.BaseControlFunctionType_ParameterSet_CurrentValue, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_ParameterSet_CurrentValue_EngineeringUnits Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_ParameterSet_CurrentValue_EngineeringUnits = new ExpandedNodeId(Variables.BaseControlFunctionType_ParameterSet_CurrentValue_EngineeringUnits, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_ParameterSet_CurrentValue_EURange Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_ParameterSet_CurrentValue_EURange = new ExpandedNodeId(Variables.BaseControlFunctionType_ParameterSet_CurrentValue_EURange, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_ParameterSet_TargetValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_ParameterSet_TargetValue = new ExpandedNodeId(Variables.BaseControlFunctionType_ParameterSet_TargetValue, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_ParameterSet_TargetValue_EngineeringUnits Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_ParameterSet_TargetValue_EngineeringUnits = new ExpandedNodeId(Variables.BaseControlFunctionType_ParameterSet_TargetValue_EngineeringUnits, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_ParameterSet_TargetValue_EURange Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_ParameterSet_TargetValue_EURange = new ExpandedNodeId(Variables.BaseControlFunctionType_ParameterSet_TargetValue_EURange, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_ParameterSet_TotalizedValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_ParameterSet_TotalizedValue = new ExpandedNodeId(Variables.BaseControlFunctionType_ParameterSet_TotalizedValue, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_ParameterSet_TotalizedValue_EngineeringUnits Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_ParameterSet_TotalizedValue_EngineeringUnits = new ExpandedNodeId(Variables.BaseControlFunctionType_ParameterSet_TotalizedValue_EngineeringUnits, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_ParameterSet_TotalizedValue_EURange Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_ParameterSet_TotalizedValue_EURange = new ExpandedNodeId(Variables.BaseControlFunctionType_ParameterSet_TotalizedValue_EURange, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_ParameterSet_CtrlP Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_ParameterSet_CtrlP = new ExpandedNodeId(Variables.BaseControlFunctionType_ParameterSet_CtrlP, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_ParameterSet_CtrlTd Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_ParameterSet_CtrlTd = new ExpandedNodeId(Variables.BaseControlFunctionType_ParameterSet_CtrlTd, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_ParameterSet_CtrlTi Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_ParameterSet_CtrlTi = new ExpandedNodeId(Variables.BaseControlFunctionType_ParameterSet_CtrlTi, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseControlFunctionType_ParameterSet_IsEnabled Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseControlFunctionType_ParameterSet_IsEnabled = new ExpandedNodeId(Variables.BaseControlFunctionType_ParameterSet_IsEnabled, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_AckedState Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_AckedState = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_AckedState, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_AckedState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_AckedState_Id = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_AckedState_Id, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_Acknowledge_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_Acknowledge_InputArguments = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_Acknowledge_InputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_ActiveState Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_ActiveState = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_ActiveState, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_ActiveState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_ActiveState_Id = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_ActiveState_Id, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_AddComment_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_AddComment_InputArguments = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_AddComment_InputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_BranchId Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_BranchId = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_BranchId, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_ClientUserId Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_ClientUserId = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_ClientUserId, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_Comment Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_Comment = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_Comment, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_Comment_SourceTimestamp Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_Comment_SourceTimestamp = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_Comment_SourceTimestamp, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_ConditionClassId Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_ConditionClassId = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_ConditionClassId, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_ConditionClassName Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_ConditionClassName = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_ConditionClassName, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_ConditionName Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_ConditionName = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_ConditionName, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_EnabledState Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_EnabledState = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_EnabledState, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_EnabledState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_EnabledState_Id = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_EnabledState_Id, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_EventId Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_EventId = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_EventId, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_EventType Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_EventType = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_EventType, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_InputNode Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_InputNode = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_InputNode, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_LastSeverity Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_LastSeverity = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_LastSeverity, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_LastSeverity_SourceTimestamp Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_LastSeverity_SourceTimestamp = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_LastSeverity_SourceTimestamp, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_LimitState_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_LimitState_CurrentState = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_LimitState_CurrentState, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_LimitState_CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_LimitState_CurrentState_Id = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_LimitState_CurrentState_Id, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_Message Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_Message = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_Message, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_Quality Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_Quality = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_Quality, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_Quality_SourceTimestamp Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_Quality_SourceTimestamp = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_Quality_SourceTimestamp, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_ReceiveTime Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_ReceiveTime = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_ReceiveTime, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_Retain Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_Retain = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_Retain, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_Severity Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_Severity = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_Severity, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_SourceName Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_SourceName = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_SourceName, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_SourceNode Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_SourceNode = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_SourceNode, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_SuppressedOrShelved Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_SuppressedOrShelved = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_SuppressedOrShelved, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_AlarmMonitor_Time Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_AlarmMonitor_Time = new ExpandedNodeId(Variables.BaseSensorFunctionType_AlarmMonitor_Time, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogSensorFunctionType_ParameterSet_CalibrationValues Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogSensorFunctionType_ParameterSet_CalibrationValues = new ExpandedNodeId(Variables.AnalogSensorFunctionType_ParameterSet_CalibrationValues, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogSensorFunctionType_ParameterSet_Damping Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogSensorFunctionType_ParameterSet_Damping = new ExpandedNodeId(Variables.AnalogSensorFunctionType_ParameterSet_Damping, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogSensorFunctionType_ParameterSet_RawValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogSensorFunctionType_ParameterSet_RawValue = new ExpandedNodeId(Variables.AnalogSensorFunctionType_ParameterSet_RawValue, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogSensorFunctionType_ParameterSet_RawValue_EngineeringUnits Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogSensorFunctionType_ParameterSet_RawValue_EngineeringUnits = new ExpandedNodeId(Variables.AnalogSensorFunctionType_ParameterSet_RawValue_EngineeringUnits, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogSensorFunctionType_ParameterSet_RawValue_EURange Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogSensorFunctionType_ParameterSet_RawValue_EURange = new ExpandedNodeId(Variables.AnalogSensorFunctionType_ParameterSet_RawValue_EURange, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogSensorFunctionType_ParameterSet_SensorValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogSensorFunctionType_ParameterSet_SensorValue = new ExpandedNodeId(Variables.AnalogSensorFunctionType_ParameterSet_SensorValue, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogSensorFunctionType_ParameterSet_SensorValue_EngineeringUnits Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogSensorFunctionType_ParameterSet_SensorValue_EngineeringUnits = new ExpandedNodeId(Variables.AnalogSensorFunctionType_ParameterSet_SensorValue_EngineeringUnits, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogSensorFunctionType_ParameterSet_SensorValue_EURange Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogSensorFunctionType_ParameterSet_SensorValue_EURange = new ExpandedNodeId(Variables.AnalogSensorFunctionType_ParameterSet_SensorValue_EURange, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogSensorFunctionWithCompensationType_ParameterSet_CalibrationValues Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogSensorFunctionWithCompensationType_ParameterSet_CalibrationValues = new ExpandedNodeId(Variables.AnalogSensorFunctionWithCompensationType_ParameterSet_CalibrationValues, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogSensorFunctionWithCompensationType_ParameterSet_CompensationValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogSensorFunctionWithCompensationType_ParameterSet_CompensationValue = new ExpandedNodeId(Variables.AnalogSensorFunctionWithCompensationType_ParameterSet_CompensationValue, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogSensorFunctionWithCompensationType_ParameterSet_CompensationValue_EngineeringUnits Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogSensorFunctionWithCompensationType_ParameterSet_CompensationValue_EngineeringUnits = new ExpandedNodeId(Variables.AnalogSensorFunctionWithCompensationType_ParameterSet_CompensationValue_EngineeringUnits, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogSensorFunctionWithCompensationType_ParameterSet_CompensationValue_EURange Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogSensorFunctionWithCompensationType_ParameterSet_CompensationValue_EURange = new ExpandedNodeId(Variables.AnalogSensorFunctionWithCompensationType_ParameterSet_CompensationValue_EURange, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogSensorFunctionWithCompensationType_ParameterSet_Damping Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogSensorFunctionWithCompensationType_ParameterSet_Damping = new ExpandedNodeId(Variables.AnalogSensorFunctionWithCompensationType_ParameterSet_Damping, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogSensorFunctionWithCompensationType_ParameterSet_RawValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogSensorFunctionWithCompensationType_ParameterSet_RawValue = new ExpandedNodeId(Variables.AnalogSensorFunctionWithCompensationType_ParameterSet_RawValue, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogSensorFunctionWithCompensationType_ParameterSet_RawValue_EngineeringUnits Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogSensorFunctionWithCompensationType_ParameterSet_RawValue_EngineeringUnits = new ExpandedNodeId(Variables.AnalogSensorFunctionWithCompensationType_ParameterSet_RawValue_EngineeringUnits, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogSensorFunctionWithCompensationType_ParameterSet_RawValue_EURange Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogSensorFunctionWithCompensationType_ParameterSet_RawValue_EURange = new ExpandedNodeId(Variables.AnalogSensorFunctionWithCompensationType_ParameterSet_RawValue_EURange, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogSensorFunctionWithCompensationType_ParameterSet_SensorValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogSensorFunctionWithCompensationType_ParameterSet_SensorValue = new ExpandedNodeId(Variables.AnalogSensorFunctionWithCompensationType_ParameterSet_SensorValue, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogSensorFunctionWithCompensationType_ParameterSet_SensorValue_EngineeringUnits Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogSensorFunctionWithCompensationType_ParameterSet_SensorValue_EngineeringUnits = new ExpandedNodeId(Variables.AnalogSensorFunctionWithCompensationType_ParameterSet_SensorValue_EngineeringUnits, Namespaces.LADS);

        /// <summary>
        /// The identifier for the AnalogSensorFunctionWithCompensationType_ParameterSet_SensorValue_EURange Variable.
        /// </summary>
        public static readonly ExpandedNodeId AnalogSensorFunctionWithCompensationType_ParameterSet_SensorValue_EURange = new ExpandedNodeId(Variables.AnalogSensorFunctionWithCompensationType_ParameterSet_SensorValue_EURange, Namespaces.LADS);

        /// <summary>
        /// The identifier for the FunctionType_ParameterSet_IsEnabled Variable.
        /// </summary>
        public static readonly ExpandedNodeId FunctionType_ParameterSet_IsEnabled = new ExpandedNodeId(Variables.FunctionType_ParameterSet_IsEnabled, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_ParameterSet_CompensationValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_ParameterSet_CompensationValue = new ExpandedNodeId(Variables.BaseSensorFunctionType_ParameterSet_CompensationValue, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_ParameterSet_CompensationValue_EngineeringUnits Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_ParameterSet_CompensationValue_EngineeringUnits = new ExpandedNodeId(Variables.BaseSensorFunctionType_ParameterSet_CompensationValue_EngineeringUnits, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_ParameterSet_CompensationValue_EURange Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_ParameterSet_CompensationValue_EURange = new ExpandedNodeId(Variables.BaseSensorFunctionType_ParameterSet_CompensationValue_EURange, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_ParameterSet_RawValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_ParameterSet_RawValue = new ExpandedNodeId(Variables.BaseSensorFunctionType_ParameterSet_RawValue, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_ParameterSet_RawValue_EngineeringUnits Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_ParameterSet_RawValue_EngineeringUnits = new ExpandedNodeId(Variables.BaseSensorFunctionType_ParameterSet_RawValue_EngineeringUnits, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_ParameterSet_RawValue_EURange Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_ParameterSet_RawValue_EURange = new ExpandedNodeId(Variables.BaseSensorFunctionType_ParameterSet_RawValue_EURange, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_ParameterSet_SensorValue Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_ParameterSet_SensorValue = new ExpandedNodeId(Variables.BaseSensorFunctionType_ParameterSet_SensorValue, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_ParameterSet_SensorValue_EngineeringUnits Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_ParameterSet_SensorValue_EngineeringUnits = new ExpandedNodeId(Variables.BaseSensorFunctionType_ParameterSet_SensorValue_EngineeringUnits, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_ParameterSet_SensorValue_EURange Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_ParameterSet_SensorValue_EURange = new ExpandedNodeId(Variables.BaseSensorFunctionType_ParameterSet_SensorValue_EURange, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_ParameterSet_CalibrationValues Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_ParameterSet_CalibrationValues = new ExpandedNodeId(Variables.BaseSensorFunctionType_ParameterSet_CalibrationValues, Namespaces.LADS);

        /// <summary>
        /// The identifier for the BaseSensorFunctionType_ParameterSet_Damping Variable.
        /// </summary>
        public static readonly ExpandedNodeId BaseSensorFunctionType_ParameterSet_Damping = new ExpandedNodeId(Variables.BaseSensorFunctionType_ParameterSet_Damping, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverFunctionType_StateMachine_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId CoverFunctionType_StateMachine_CurrentState = new ExpandedNodeId(Variables.CoverFunctionType_StateMachine_CurrentState, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverFunctionType_StateMachine_CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId CoverFunctionType_StateMachine_CurrentState_Id = new ExpandedNodeId(Variables.CoverFunctionType_StateMachine_CurrentState_Id, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverFunctionType_StateMachine_Closed_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId CoverFunctionType_StateMachine_Closed_StateNumber = new ExpandedNodeId(Variables.CoverFunctionType_StateMachine_Closed_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverFunctionType_StateMachine_ClosedToLocked_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId CoverFunctionType_StateMachine_ClosedToLocked_TransitionNumber = new ExpandedNodeId(Variables.CoverFunctionType_StateMachine_ClosedToLocked_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverFunctionType_StateMachine_ClosedToOpen_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId CoverFunctionType_StateMachine_ClosedToOpen_TransitionNumber = new ExpandedNodeId(Variables.CoverFunctionType_StateMachine_ClosedToOpen_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverFunctionType_StateMachine_Error_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId CoverFunctionType_StateMachine_Error_StateNumber = new ExpandedNodeId(Variables.CoverFunctionType_StateMachine_Error_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverFunctionType_StateMachine_Locked_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId CoverFunctionType_StateMachine_Locked_StateNumber = new ExpandedNodeId(Variables.CoverFunctionType_StateMachine_Locked_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverFunctionType_StateMachine_LockedToClosed_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId CoverFunctionType_StateMachine_LockedToClosed_TransitionNumber = new ExpandedNodeId(Variables.CoverFunctionType_StateMachine_LockedToClosed_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverFunctionType_StateMachine_Opened_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId CoverFunctionType_StateMachine_Opened_StateNumber = new ExpandedNodeId(Variables.CoverFunctionType_StateMachine_Opened_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the CoverFunctionType_StateMachine_OpenToClosed_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId CoverFunctionType_StateMachine_OpenToClosed_TransitionNumber = new ExpandedNodeId(Variables.CoverFunctionType_StateMachine_OpenToClosed_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_ProgramTemplate_Author Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_ProgramTemplate_Author = new ExpandedNodeId(Variables.ProgramManagerType_ActiveProgram_ProgramTemplate_Author, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_ProgramTemplate_Created Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_ProgramTemplate_Created = new ExpandedNodeId(Variables.ProgramManagerType_ActiveProgram_ProgramTemplate_Created, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_ProgramTemplate_Description Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_ProgramTemplate_Description = new ExpandedNodeId(Variables.ProgramManagerType_ActiveProgram_ProgramTemplate_Description, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_ProgramTemplate_Modified Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_ProgramTemplate_Modified = new ExpandedNodeId(Variables.ProgramManagerType_ActiveProgram_ProgramTemplate_Modified, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_ProgramTemplate_Name Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_ProgramTemplate_Name = new ExpandedNodeId(Variables.ProgramManagerType_ActiveProgram_ProgramTemplate_Name, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_ProgramTemplate_Status Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_ProgramTemplate_Status = new ExpandedNodeId(Variables.ProgramManagerType_ActiveProgram_ProgramTemplate_Status, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_ProgramTemplate_Type Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_ProgramTemplate_Type = new ExpandedNodeId(Variables.ProgramManagerType_ActiveProgram_ProgramTemplate_Type, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_ProgramTemplate_Version Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_ProgramTemplate_Version = new ExpandedNodeId(Variables.ProgramManagerType_ActiveProgram_ProgramTemplate_Version, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_Aborted_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_Aborted_StateNumber = new ExpandedNodeId(Variables.ProgramManagerType_ActiveProgram_StateMachine_Aborted_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_Aborting_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_Aborting_StateNumber = new ExpandedNodeId(Variables.ProgramManagerType_ActiveProgram_StateMachine_Aborting_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_AvailableStates Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_AvailableStates = new ExpandedNodeId(Variables.ProgramManagerType_ActiveProgram_StateMachine_AvailableStates, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_AvailableTransitions Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_AvailableTransitions = new ExpandedNodeId(Variables.ProgramManagerType_ActiveProgram_StateMachine_AvailableTransitions, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_AvailableStates Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_AvailableStates = new ExpandedNodeId(Variables.ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_AvailableStates, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_AvailableTransitions Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_AvailableTransitions = new ExpandedNodeId(Variables.ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_AvailableTransitions, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_ClearingToStopped_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_ClearingToStopped_TransitionNumber = new ExpandedNodeId(Variables.ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_ClearingToStopped_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_CurrentState = new ExpandedNodeId(Variables.ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_CurrentState, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_CurrentState_Id = new ExpandedNodeId(Variables.ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_CurrentState_Id, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_Running_StateNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_Running_StateNumber = new ExpandedNodeId(Variables.ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_Running_StateNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableStates Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableStates = new ExpandedNodeId(Variables.ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableStates, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableTransitions Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableTransitions = new ExpandedNodeId(Variables.ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableTransitions, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState = new ExpandedNodeId(Variables.ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState_Id = new ExpandedNodeId(Variables.ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState_Id, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start_InputArguments = new ExpandedNodeId(Variables.ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start_InputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start_OutputArguments = new ExpandedNodeId(Variables.ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start_OutputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningToStopped_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningToStopped_TransitionNumber = new ExpandedNodeId(Variables.ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_RunningToStopped_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_StoppedToRunning_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_StoppedToRunning_TransitionNumber = new ExpandedNodeId(Variables.ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_StoppedToRunning_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_StoppingToStopped_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_StoppingToStopped_TransitionNumber = new ExpandedNodeId(Variables.ProgramManagerType_ActiveProgram_StateMachine_ClearedStateMachine_StoppingToStopped_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_ClearedToAborting_TransitionNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_ClearedToAborting_TransitionNumber = new ExpandedNodeId(Variables.ProgramManagerType_ActiveProgram_StateMachine_ClearedToAborting_TransitionNumber, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_CurrentState = new ExpandedNodeId(Variables.ProgramManagerType_ActiveProgram_StateMachine_CurrentState, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ActiveProgram_StateMachine_CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ActiveProgram_StateMachine_CurrentState_Id = new ExpandedNodeId(Variables.ProgramManagerType_ActiveProgram_StateMachine_CurrentState_Id, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ProgramTemplateSet_Download_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ProgramTemplateSet_Download_InputArguments = new ExpandedNodeId(Variables.ProgramManagerType_ProgramTemplateSet_Download_InputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ProgramTemplateSet_Download_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ProgramTemplateSet_Download_OutputArguments = new ExpandedNodeId(Variables.ProgramManagerType_ProgramTemplateSet_Download_OutputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ProgramTemplateSet_NodeVersion Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ProgramTemplateSet_NodeVersion = new ExpandedNodeId(Variables.ProgramManagerType_ProgramTemplateSet_NodeVersion, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ProgramTemplateSet_Remove_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ProgramTemplateSet_Remove_InputArguments = new ExpandedNodeId(Variables.ProgramManagerType_ProgramTemplateSet_Remove_InputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ProgramTemplateSet_Upload_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ProgramTemplateSet_Upload_InputArguments = new ExpandedNodeId(Variables.ProgramManagerType_ProgramTemplateSet_Upload_InputArguments, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ProgramManagerType_ResultSet_NodeVersion Variable.
        /// </summary>
        public static readonly ExpandedNodeId ProgramManagerType_ResultSet_NodeVersion = new ExpandedNodeId(Variables.ProgramManagerType_ResultSet_NodeVersion, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultPropertiesType_Client Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultPropertiesType_Client = new ExpandedNodeId(Variables.ResultPropertiesType_Client, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultPropertiesType_Description Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultPropertiesType_Description = new ExpandedNodeId(Variables.ResultPropertiesType_Description, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultPropertiesType_JobID Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultPropertiesType_JobID = new ExpandedNodeId(Variables.ResultPropertiesType_JobID, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultPropertiesType_Name Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultPropertiesType_Name = new ExpandedNodeId(Variables.ResultPropertiesType_Name, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultPropertiesType_SampleIDs Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultPropertiesType_SampleIDs = new ExpandedNodeId(Variables.ResultPropertiesType_SampleIDs, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultPropertiesType_Started Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultPropertiesType_Started = new ExpandedNodeId(Variables.ResultPropertiesType_Started, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultPropertiesType_Stopped Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultPropertiesType_Stopped = new ExpandedNodeId(Variables.ResultPropertiesType_Stopped, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultPropertiesType_Template Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultPropertiesType_Template = new ExpandedNodeId(Variables.ResultPropertiesType_Template, Namespaces.LADS);

        /// <summary>
        /// The identifier for the ResultPropertiesType_User Variable.
        /// </summary>
        public static readonly ExpandedNodeId ResultPropertiesType_User = new ExpandedNodeId(Variables.ResultPropertiesType_User, Namespaces.LADS);

        /// <summary>
        /// The identifier for the Namespaces_http___spectaris_de_LADS__IsNamespaceSubset Variable.
        /// </summary>
        public static readonly ExpandedNodeId Namespaces_http___spectaris_de_LADS__IsNamespaceSubset = new ExpandedNodeId(Variables.Namespaces_http___spectaris_de_LADS__IsNamespaceSubset, Namespaces.LADS);

        /// <summary>
        /// The identifier for the Namespaces_http___spectaris_de_LADS__NamespacePublicationDate Variable.
        /// </summary>
        public static readonly ExpandedNodeId Namespaces_http___spectaris_de_LADS__NamespacePublicationDate = new ExpandedNodeId(Variables.Namespaces_http___spectaris_de_LADS__NamespacePublicationDate, Namespaces.LADS);

        /// <summary>
        /// The identifier for the Namespaces_http___spectaris_de_LADS__NamespaceUri Variable.
        /// </summary>
        public static readonly ExpandedNodeId Namespaces_http___spectaris_de_LADS__NamespaceUri = new ExpandedNodeId(Variables.Namespaces_http___spectaris_de_LADS__NamespaceUri, Namespaces.LADS);

        /// <summary>
        /// The identifier for the Namespaces_http___spectaris_de_LADS__NamespaceVersion Variable.
        /// </summary>
        public static readonly ExpandedNodeId Namespaces_http___spectaris_de_LADS__NamespaceVersion = new ExpandedNodeId(Variables.Namespaces_http___spectaris_de_LADS__NamespaceVersion, Namespaces.LADS);

        /// <summary>
        /// The identifier for the Namespaces_http___spectaris_de_LADS__StaticNodeIdTypes Variable.
        /// </summary>
        public static readonly ExpandedNodeId Namespaces_http___spectaris_de_LADS__StaticNodeIdTypes = new ExpandedNodeId(Variables.Namespaces_http___spectaris_de_LADS__StaticNodeIdTypes, Namespaces.LADS);

        /// <summary>
        /// The identifier for the Namespaces_http___spectaris_de_LADS__StaticNumericNodeIdRange Variable.
        /// </summary>
        public static readonly ExpandedNodeId Namespaces_http___spectaris_de_LADS__StaticNumericNodeIdRange = new ExpandedNodeId(Variables.Namespaces_http___spectaris_de_LADS__StaticNumericNodeIdRange, Namespaces.LADS);

        /// <summary>
        /// The identifier for the Namespaces_http___spectaris_de_LADS__StaticStringNodeIdPattern Variable.
        /// </summary>
        public static readonly ExpandedNodeId Namespaces_http___spectaris_de_LADS__StaticStringNodeIdPattern = new ExpandedNodeId(Variables.Namespaces_http___spectaris_de_LADS__StaticStringNodeIdPattern, Namespaces.LADS);

    }
    #endregion

    #region VariableType Node Identifiers
    /// <summary>
    /// A class that declares constants for all VariableType in the Model.
    /// </summary>

    public static partial class VariableTypeIds
    {
        /// <summary>
        /// The identifier for the ResultPropertiesType VariableType.
        /// </summary>
        public static readonly ExpandedNodeId ResultPropertiesType = new ExpandedNodeId(VariableTypes.ResultPropertiesType, Namespaces.LADS);

    }
    #endregion

    #region BrowseName Declarations
    /// <summary>
    /// Declares all of the BrowseNames used in the Model.
    /// </summary>
    public static partial class BrowseNames
    {
        /// <summary>
        /// The BrowseName for the <Component> component.
        /// </summary>
        public const string Component = "<Component>";
        /// <summary>
        /// The BrowseName for the <Function> component.
        /// </summary>
        public const string Function = "<Function>";
        /// <summary>
        /// The BrowseName for the <FunctionalUnit> component.
        /// </summary>
        public const string FunctionalUnit = "<FunctionalUnit>";
        /// <summary>
        /// The BrowseName for the <Property> component.
        /// </summary>
        public const string Property = "<Property>";
        /// <summary>
        /// The BrowseName for the <ResultFileName> component.
        /// </summary>
        public const string ResultFileName_Placeholder = "<ResultFileName>";
        /// <summary>
        /// The BrowseName for the <ResultName> component.
        /// </summary>
        public const string ResultName_Placeholder = "<ResultName>";
        /// <summary>
        /// The BrowseName for the <TemplateName> component.
        /// </summary>
        public const string TemplateName_PlaceHolder = "<TemplateName>";
        /// <summary>
        /// The BrowseName for the Abort component.
        /// </summary>
        public const string Abort = "Abort";
        /// <summary>
        /// The BrowseName for the Aborted component.
        /// </summary>
        public const string Aborted = "Aborted";
        /// <summary>
        /// The BrowseName for the AbortedToCleared component.
        /// </summary>
        public const string AbortedToCleared = "AbortedToCleared";
        /// <summary>
        /// The BrowseName for the Aborting component.
        /// </summary>
        public const string Aborting = "Aborting";
        /// <summary>
        /// The BrowseName for the AbortingToAborted component.
        /// </summary>
        public const string AbortingToAborted = "AbortingToAborted";
        /// <summary>
        /// The BrowseName for the ActiveProgram component.
        /// </summary>
        public const string ActiveProgram = "ActiveProgram";
        /// <summary>
        /// The BrowseName for the ActiveProgramType component.
        /// </summary>
        public const string ActiveProgramType = "ActiveProgramType";
        /// <summary>
        /// The BrowseName for the AlarmMonitor component.
        /// </summary>
        public const string AlarmMonitor = "AlarmMonitor";
        /// <summary>
        /// The BrowseName for the AnalogControlFunctionType component.
        /// </summary>
        public const string AnalogControlFunctionType = "AnalogControlFunctionType";
        /// <summary>
        /// The BrowseName for the AnalogControlFunctionWithTotalizerType component.
        /// </summary>
        public const string AnalogControlFunctionWithTotalizerType = "AnalogControlFunctionWithTotalizerType";
        /// <summary>
        /// The BrowseName for the AnalogSensorFunctionType component.
        /// </summary>
        public const string AnalogSensorFunctionType = "AnalogSensorFunctionType";
        /// <summary>
        /// The BrowseName for the AnalogSensorFunctionWithCompensationType component.
        /// </summary>
        public const string AnalogSensorFunctionWithCompensationType = "AnalogSensorFunctionWithCompensationType";
        /// <summary>
        /// The BrowseName for the Author component.
        /// </summary>
        public const string Author = "Author";
        /// <summary>
        /// The BrowseName for the BaseControlFunctionMethodSetType component.
        /// </summary>
        public const string BaseControlFunctionMethodSetType = "BaseControlFunctionMethodSetType";
        /// <summary>
        /// The BrowseName for the BaseControlFunctionParameterSetType component.
        /// </summary>
        public const string BaseControlFunctionParameterSetType = "BaseControlFunctionParameterSetType";
        /// <summary>
        /// The BrowseName for the BaseControlFunctionType component.
        /// </summary>
        public const string BaseControlFunctionType = "BaseControlFunctionType";
        /// <summary>
        /// The BrowseName for the BaseMaintenanceInformationType component.
        /// </summary>
        public const string BaseMaintenanceInformationType = "BaseMaintenanceInformationType";
        /// <summary>
        /// The BrowseName for the BaseSensorFunctionParameterSetType component.
        /// </summary>
        public const string BaseSensorFunctionParameterSetType = "BaseSensorFunctionParameterSetType";
        /// <summary>
        /// The BrowseName for the BaseSensorFunctionType component.
        /// </summary>
        public const string BaseSensorFunctionType = "BaseSensorFunctionType";
        /// <summary>
        /// The BrowseName for the CalibrationValues component.
        /// </summary>
        public const string CalibrationValues = "CalibrationValues";
        /// <summary>
        /// The BrowseName for the Clear component.
        /// </summary>
        public const string Clear = "Clear";
        /// <summary>
        /// The BrowseName for the Cleared component.
        /// </summary>
        public const string Cleared = "Cleared";
        /// <summary>
        /// The BrowseName for the ClearedStateMachine component.
        /// </summary>
        public const string ClearedStateMachine = "ClearedStateMachine";
        /// <summary>
        /// The BrowseName for the ClearedToAborting component.
        /// </summary>
        public const string ClearedToAborting = "ClearedToAborting";
        /// <summary>
        /// The BrowseName for the Clearing component.
        /// </summary>
        public const string Clearing = "Clearing";
        /// <summary>
        /// The BrowseName for the ClearingToStopped component.
        /// </summary>
        public const string ClearingToStopped = "ClearingToStopped";
        /// <summary>
        /// The BrowseName for the Client component.
        /// </summary>
        public const string Client = "Client";
        /// <summary>
        /// The BrowseName for the Close component.
        /// </summary>
        public const string Close = "Close";
        /// <summary>
        /// The BrowseName for the Closed component.
        /// </summary>
        public const string Closed = "Closed";
        /// <summary>
        /// The BrowseName for the ClosedToLocked component.
        /// </summary>
        public const string ClosedToLocked = "ClosedToLocked";
        /// <summary>
        /// The BrowseName for the ClosedToOpen component.
        /// </summary>
        public const string ClosedToOpen = "ClosedToOpen";
        /// <summary>
        /// The BrowseName for the CompensationValue component.
        /// </summary>
        public const string CompensationValue = "CompensationValue";
        /// <summary>
        /// The BrowseName for the Complete component.
        /// </summary>
        public const string Complete = "Complete";
        /// <summary>
        /// The BrowseName for the CompleteToResetting component.
        /// </summary>
        public const string CompleteToResetting = "CompleteToResetting";
        /// <summary>
        /// The BrowseName for the Completing component.
        /// </summary>
        public const string Completing = "Completing";
        /// <summary>
        /// The BrowseName for the CompletingToComplete component.
        /// </summary>
        public const string CompletingToComplete = "CompletingToComplete";
        /// <summary>
        /// The BrowseName for the ComponentSet component.
        /// </summary>
        public const string ComponentSet = "ComponentSet";
        /// <summary>
        /// The BrowseName for the ComponentSetType component.
        /// </summary>
        public const string ComponentSetType = "ComponentSetType";
        /// <summary>
        /// The BrowseName for the Components component.
        /// </summary>
        public const string Components = "Components";
        /// <summary>
        /// The BrowseName for the Configuration component.
        /// </summary>
        public const string Configuration = "Configuration";
        /// <summary>
        /// The BrowseName for the CoverFunctionType component.
        /// </summary>
        public const string CoverFunctionType = "CoverFunctionType";
        /// <summary>
        /// The BrowseName for the CoverStateMachineType component.
        /// </summary>
        public const string CoverStateMachineType = "CoverStateMachineType";
        /// <summary>
        /// The BrowseName for the Created component.
        /// </summary>
        public const string Created = "Created";
        /// <summary>
        /// The BrowseName for the CtrlP component.
        /// </summary>
        public const string CtrlP = "CtrlP";
        /// <summary>
        /// The BrowseName for the CtrlTd component.
        /// </summary>
        public const string CtrlTd = "CtrlTd";
        /// <summary>
        /// The BrowseName for the CtrlTi component.
        /// </summary>
        public const string CtrlTi = "CtrlTi";
        /// <summary>
        /// The BrowseName for the CurrentValue component.
        /// </summary>
        public const string CurrentValue = "CurrentValue";
        /// <summary>
        /// The BrowseName for the Damping component.
        /// </summary>
        public const string Damping = "Damping";
        /// <summary>
        /// The BrowseName for the Description component.
        /// </summary>
        public const string Description = "Description";
        /// <summary>
        /// The BrowseName for the Descrition component.
        /// </summary>
        public const string Descrition = "Descrition";
        /// <summary>
        /// The BrowseName for the DeviceHealth component.
        /// </summary>
        public const string DeviceHealth = "DeviceHealth";
        /// <summary>
        /// The BrowseName for the DeviceHealthAlarms component.
        /// </summary>
        public const string DeviceHealthAlarms = "DeviceHealthAlarms";
        /// <summary>
        /// The BrowseName for the DiscreteControlFunctionType component.
        /// </summary>
        public const string DiscreteControlFunctionType = "DiscreteControlFunctionType";
        /// <summary>
        /// The BrowseName for the Download component.
        /// </summary>
        public const string Download = "Download";
        /// <summary>
        /// The BrowseName for the Error component.
        /// </summary>
        public const string Error = "Error";
        /// <summary>
        /// The BrowseName for the ErrorToOff component.
        /// </summary>
        public const string ErrorToOff = "ErrorToOff";
        /// <summary>
        /// The BrowseName for the Execute component.
        /// </summary>
        public const string Execute = "Execute";
        /// <summary>
        /// The BrowseName for the ExecuteToCompleting component.
        /// </summary>
        public const string ExecuteToCompleting = "ExecuteToCompleting";
        /// <summary>
        /// The BrowseName for the ExecuteToHolding component.
        /// </summary>
        public const string ExecuteToHolding = "ExecuteToHolding";
        /// <summary>
        /// The BrowseName for the ExecuteToSuspending component.
        /// </summary>
        public const string ExecuteToSuspending = "ExecuteToSuspending";
        /// <summary>
        /// The BrowseName for the FileSet component.
        /// </summary>
        public const string FileSet = "FileSet";
        /// <summary>
        /// The BrowseName for the FunctionSet component.
        /// </summary>
        public const string FunctionSet = "FunctionSet";
        /// <summary>
        /// The BrowseName for the FunctionSetType component.
        /// </summary>
        public const string FunctionSetType = "FunctionSetType";
        /// <summary>
        /// The BrowseName for the FunctionStateMachineType component.
        /// </summary>
        public const string FunctionStateMachineType = "FunctionStateMachineType";
        /// <summary>
        /// The BrowseName for the FunctionType component.
        /// </summary>
        public const string FunctionType = "FunctionType";
        /// <summary>
        /// The BrowseName for the FunctionalUnitSet component.
        /// </summary>
        public const string FunctionalUnitSet = "FunctionalUnitSet";
        /// <summary>
        /// The BrowseName for the FunctionalUnitSetType component.
        /// </summary>
        public const string FunctionalUnitSetType = "FunctionalUnitSetType";
        /// <summary>
        /// The BrowseName for the FunctionalUnitType component.
        /// </summary>
        public const string FunctionalUnitType = "FunctionalUnitType";
        /// <summary>
        /// The BrowseName for the GotoMaintenance component.
        /// </summary>
        public const string GotoMaintenance = "GotoMaintenance";
        /// <summary>
        /// The BrowseName for the GotoOperating component.
        /// </summary>
        public const string GotoOperating = "GotoOperating";
        /// <summary>
        /// The BrowseName for the GotoShutdown component.
        /// </summary>
        public const string GotoShutdown = "GotoShutdown";
        /// <summary>
        /// The BrowseName for the GotoStandby component.
        /// </summary>
        public const string GotoStandby = "GotoStandby";
        /// <summary>
        /// The BrowseName for the Held component.
        /// </summary>
        public const string Held = "Held";
        /// <summary>
        /// The BrowseName for the HeldToUnholding component.
        /// </summary>
        public const string HeldToUnholding = "HeldToUnholding";
        /// <summary>
        /// The BrowseName for the Hold component.
        /// </summary>
        public const string Hold = "Hold";
        /// <summary>
        /// The BrowseName for the Holding component.
        /// </summary>
        public const string Holding = "Holding";
        /// <summary>
        /// The BrowseName for the HoldingToHeld component.
        /// </summary>
        public const string HoldingToHeld = "HoldingToHeld";
        /// <summary>
        /// The BrowseName for the IMachineTagNameplateType component.
        /// </summary>
        public const string IMachineTagNameplateType = "IMachineTagNameplateType";
        /// <summary>
        /// The BrowseName for the IMachineVendorNameplateType component.
        /// </summary>
        public const string IMachineVendorNameplateType = "IMachineVendorNameplateType";
        /// <summary>
        /// The BrowseName for the IMachineryItemVendorNameplateType component.
        /// </summary>
        public const string IMachineryItemVendorNameplateType = "IMachineryItemVendorNameplateType";
        /// <summary>
        /// The BrowseName for the Identification component.
        /// </summary>
        public const string Identification = "Identification";
        /// <summary>
        /// The BrowseName for the Idle component.
        /// </summary>
        public const string Idle = "Idle";
        /// <summary>
        /// The BrowseName for the IdleToStarting component.
        /// </summary>
        public const string IdleToStarting = "IdleToStarting";
        /// <summary>
        /// The BrowseName for the InitialOperationDate component.
        /// </summary>
        public const string InitialOperationDate = "InitialOperationDate";
        /// <summary>
        /// The BrowseName for the IsEnabled component.
        /// </summary>
        public const string IsEnabled = "IsEnabled";
        /// <summary>
        /// The BrowseName for the JobID component.
        /// </summary>
        public const string JobID = "JobID";
        /// <summary>
        /// The BrowseName for the JobId component.
        /// </summary>
        public const string JobId = "JobId";
        /// <summary>
        /// The BrowseName for the LADSComponentType component.
        /// </summary>
        public const string LADSComponentType = "LADSComponentType";
        /// <summary>
        /// The BrowseName for the LADSDeviceStateMachineType component.
        /// </summary>
        public const string LADSDeviceStateMachineType = "LADSDeviceStateMachineType";
        /// <summary>
        /// The BrowseName for the LADSDeviceType component.
        /// </summary>
        public const string LADSDeviceType = "LADSDeviceType";
        /// <summary>
        /// The BrowseName for the LADSProgramBaseStateMachineType component.
        /// </summary>
        public const string LADSProgramBaseStateMachineType = "LADSProgramBaseStateMachineType";
        /// <summary>
        /// The BrowseName for the LADSProgramClearedStateMachineType component.
        /// </summary>
        public const string LADSProgramClearedStateMachineType = "LADSProgramClearedStateMachineType";
        /// <summary>
        /// The BrowseName for the LADSProgramRunningStateMachineType component.
        /// </summary>
        public const string LADSProgramRunningStateMachineType = "LADSProgramRunningStateMachineType";
        /// <summary>
        /// The BrowseName for the LastExecution component.
        /// </summary>
        public const string LastExecution = "LastExecution";
        /// <summary>
        /// The BrowseName for the LastResult component.
        /// </summary>
        public const string LastResult = "LastResult";
        /// <summary>
        /// The BrowseName for the Location component.
        /// </summary>
        public const string Location = "Location";
        /// <summary>
        /// The BrowseName for the Lock component.
        /// </summary>
        public const string Lock = "Lock";
        /// <summary>
        /// The BrowseName for the Locked component.
        /// </summary>
        public const string Locked = "Locked";
        /// <summary>
        /// The BrowseName for the LockedToClosed component.
        /// </summary>
        public const string LockedToClosed = "LockedToClosed";
        /// <summary>
        /// The BrowseName for the MachineComponentsType component.
        /// </summary>
        public const string MachineComponentsType = "MachineComponentsType";
        /// <summary>
        /// The BrowseName for the MachineIdentificationType component.
        /// </summary>
        public const string MachineIdentificationType = "MachineIdentificationType";
        /// <summary>
        /// The BrowseName for the MachineryComponentIdentificationType component.
        /// </summary>
        public const string MachineryComponentIdentificationType = "MachineryComponentIdentificationType";
        /// <summary>
        /// The BrowseName for the MachineryItemIdentificationType component.
        /// </summary>
        public const string MachineryItemIdentificationType = "MachineryItemIdentificationType";
        /// <summary>
        /// The BrowseName for the Machines component.
        /// </summary>
        public const string Machines = "Machines";
        /// <summary>
        /// The BrowseName for the Maintenance component.
        /// </summary>
        public const string Maintenance = "Maintenance";
        /// <summary>
        /// The BrowseName for the MaintenanceToOperatingTransition component.
        /// </summary>
        public const string MaintenanceToOperatingTransition = "MaintenanceToOperatingTransition";
        /// <summary>
        /// The BrowseName for the MaintenanceToShutdownTransition component.
        /// </summary>
        public const string MaintenanceToShutdownTransition = "MaintenanceToShutdownTransition";
        /// <summary>
        /// The BrowseName for the MimeType component.
        /// </summary>
        public const string MimeType = "MimeType";
        /// <summary>
        /// The BrowseName for the Modified component.
        /// </summary>
        public const string Modified = "Modified";
        /// <summary>
        /// The BrowseName for the MonthOfConstruction component.
        /// </summary>
        public const string MonthOfConstruction = "MonthOfConstruction";
        /// <summary>
        /// The BrowseName for the Name component.
        /// </summary>
        public const string Name = "Name";
        /// <summary>
        /// The BrowseName for the NodeVersion component.
        /// </summary>
        public const string NodeVersion = "NodeVersion";
        /// <summary>
        /// The BrowseName for the Off component.
        /// </summary>
        public const string Off = "Off";
        /// <summary>
        /// The BrowseName for the OffToOn component.
        /// </summary>
        public const string OffToOn = "OffToOn";
        /// <summary>
        /// The BrowseName for the On component.
        /// </summary>
        public const string On = "On";
        /// <summary>
        /// The BrowseName for the OnToError component.
        /// </summary>
        public const string OnToError = "OnToError";
        /// <summary>
        /// The BrowseName for the OnToOff component.
        /// </summary>
        public const string OnToOff = "OnToOff";
        /// <summary>
        /// The BrowseName for the Open component.
        /// </summary>
        public const string Open = "Open";
        /// <summary>
        /// The BrowseName for the OpenToClosed component.
        /// </summary>
        public const string OpenToClosed = "OpenToClosed";
        /// <summary>
        /// The BrowseName for the Opened component.
        /// </summary>
        public const string Opened = "Opened";
        /// <summary>
        /// The BrowseName for the Operating component.
        /// </summary>
        public const string Operating = "Operating";
        /// <summary>
        /// The BrowseName for the OperatingToMaintenanceTransition component.
        /// </summary>
        public const string OperatingToMaintenanceTransition = "OperatingToMaintenanceTransition";
        /// <summary>
        /// The BrowseName for the OperatingToShutdownTransition component.
        /// </summary>
        public const string OperatingToShutdownTransition = "OperatingToShutdownTransition";
        /// <summary>
        /// The BrowseName for the OperatingToStandbyTransition component.
        /// </summary>
        public const string OperatingToStandbyTransition = "OperatingToStandbyTransition";
        /// <summary>
        /// The BrowseName for the Operational component.
        /// </summary>
        public const string Operational = "Operational";
        /// <summary>
        /// The BrowseName for the Powerup component.
        /// </summary>
        public const string Powerup = "Powerup";
        /// <summary>
        /// The BrowseName for the PowerupToOperatingTransition component.
        /// </summary>
        public const string PowerupToOperatingTransition = "PowerupToOperatingTransition";
        /// <summary>
        /// The BrowseName for the ProgramManager component.
        /// </summary>
        public const string ProgramManager = "ProgramManager";
        /// <summary>
        /// The BrowseName for the ProgramManagerType component.
        /// </summary>
        public const string ProgramManagerType = "ProgramManagerType";
        /// <summary>
        /// The BrowseName for the ProgramTemplate component.
        /// </summary>
        public const string ProgramTemplate = "ProgramTemplate";
        /// <summary>
        /// The BrowseName for the ProgramTemplateSet component.
        /// </summary>
        public const string ProgramTemplateSet = "ProgramTemplateSet";
        /// <summary>
        /// The BrowseName for the ProgramTemplateSetType component.
        /// </summary>
        public const string ProgramTemplateSetType = "ProgramTemplateSetType";
        /// <summary>
        /// The BrowseName for the ProgramTemplateType component.
        /// </summary>
        public const string ProgramTemplateType = "ProgramTemplateType";
        /// <summary>
        /// The BrowseName for the PropertySetType component.
        /// </summary>
        public const string PropertySetType = "PropertySetType";
        /// <summary>
        /// The BrowseName for the PropertyType component.
        /// </summary>
        public const string PropertyType = "PropertyType";
        /// <summary>
        /// The BrowseName for the RawValue component.
        /// </summary>
        public const string RawValue = "RawValue";
        /// <summary>
        /// The BrowseName for the Remove component.
        /// </summary>
        public const string Remove = "Remove";
        /// <summary>
        /// The BrowseName for the Reset component.
        /// </summary>
        public const string Reset = "Reset";
        /// <summary>
        /// The BrowseName for the ResetTotalizer component.
        /// </summary>
        public const string ResetTotalizer = "ResetTotalizer";
        /// <summary>
        /// The BrowseName for the Resetting component.
        /// </summary>
        public const string Resetting = "Resetting";
        /// <summary>
        /// The BrowseName for the ResettingToIdle component.
        /// </summary>
        public const string ResettingToIdle = "ResettingToIdle";
        /// <summary>
        /// The BrowseName for the ResultFileSetType component.
        /// </summary>
        public const string ResultFileSetType = "ResultFileSetType";
        /// <summary>
        /// The BrowseName for the ResultFileType component.
        /// </summary>
        public const string ResultFileType = "ResultFileType";
        /// <summary>
        /// The BrowseName for the ResultPropertiesDataType component.
        /// </summary>
        public const string ResultPropertiesDataType = "ResultPropertiesDataType";
        /// <summary>
        /// The BrowseName for the ResultPropertiesType component.
        /// </summary>
        public const string ResultPropertiesType = "ResultPropertiesType";
        /// <summary>
        /// The BrowseName for the ResultSet component.
        /// </summary>
        public const string ResultSet = "ResultSet";
        /// <summary>
        /// The BrowseName for the ResultSetType component.
        /// </summary>
        public const string ResultSetType = "ResultSetType";
        /// <summary>
        /// The BrowseName for the ResultType component.
        /// </summary>
        public const string ResultType = "ResultType";
        /// <summary>
        /// The BrowseName for the Running component.
        /// </summary>
        public const string Running = "Running";
        /// <summary>
        /// The BrowseName for the RunningStateMachine component.
        /// </summary>
        public const string RunningStateMachine = "RunningStateMachine";
        /// <summary>
        /// The BrowseName for the RunningToStopped component.
        /// </summary>
        public const string RunningToStopped = "RunningToStopped";
        /// <summary>
        /// The BrowseName for the SampleIDs component.
        /// </summary>
        public const string SampleIDs = "SampleIDs";
        /// <summary>
        /// The BrowseName for the SampleIds component.
        /// </summary>
        public const string SampleIds = "SampleIds";
        /// <summary>
        /// The BrowseName for the Select component.
        /// </summary>
        public const string Select = "Select";
        /// <summary>
        /// The BrowseName for the SensorValue component.
        /// </summary>
        public const string SensorValue = "SensorValue";
        /// <summary>
        /// The BrowseName for the Shutdown component.
        /// </summary>
        public const string Shutdown = "Shutdown";
        /// <summary>
        /// The BrowseName for the Standby component.
        /// </summary>
        public const string Standby = "Standby";
        /// <summary>
        /// The BrowseName for the StandbyToOperatingTransition component.
        /// </summary>
        public const string StandbyToOperatingTransition = "StandbyToOperatingTransition";
        /// <summary>
        /// The BrowseName for the Start component.
        /// </summary>
        public const string Start = "Start";
        /// <summary>
        /// The BrowseName for the StartFunctions component.
        /// </summary>
        public const string StartFunctions = "StartFunctions";
        /// <summary>
        /// The BrowseName for the Started component.
        /// </summary>
        public const string Started = "Started";
        /// <summary>
        /// The BrowseName for the Starting component.
        /// </summary>
        public const string Starting = "Starting";
        /// <summary>
        /// The BrowseName for the StartingToExecute component.
        /// </summary>
        public const string StartingToExecute = "StartingToExecute";
        /// <summary>
        /// The BrowseName for the StartingToHolding component.
        /// </summary>
        public const string StartingToHolding = "StartingToHolding";
        /// <summary>
        /// The BrowseName for the StateMachine component.
        /// </summary>
        public const string StateMachine = "StateMachine";
        /// <summary>
        /// The BrowseName for the Status component.
        /// </summary>
        public const string Status = "Status";
        /// <summary>
        /// The BrowseName for the Stop component.
        /// </summary>
        public const string Stop = "Stop";
        /// <summary>
        /// The BrowseName for the StopFunctions component.
        /// </summary>
        public const string StopFunctions = "StopFunctions";
        /// <summary>
        /// The BrowseName for the Stopped component.
        /// </summary>
        public const string Stopped = "Stopped";
        /// <summary>
        /// The BrowseName for the StoppedToRunning component.
        /// </summary>
        public const string StoppedToRunning = "StoppedToRunning";
        /// <summary>
        /// The BrowseName for the Stopping component.
        /// </summary>
        public const string Stopping = "Stopping";
        /// <summary>
        /// The BrowseName for the StoppingToStopped component.
        /// </summary>
        public const string StoppingToStopped = "StoppingToStopped";
        /// <summary>
        /// The BrowseName for the Supply component.
        /// </summary>
        public const string Supply = "Supply";
        /// <summary>
        /// The BrowseName for the SupplySet component.
        /// </summary>
        public const string SupplySet = "SupplySet";
        /// <summary>
        /// The BrowseName for the SupplySetType component.
        /// </summary>
        public const string SupplySetType = "SupplySetType";
        /// <summary>
        /// The BrowseName for the SupplyType component.
        /// </summary>
        public const string SupplyType = "SupplyType";
        /// <summary>
        /// The BrowseName for the SupportedPropertySet component.
        /// </summary>
        public const string SupportedPropertySet = "SupportedPropertySet";
        /// <summary>
        /// The BrowseName for the Suspend component.
        /// </summary>
        public const string Suspend = "Suspend";
        /// <summary>
        /// The BrowseName for the Suspended component.
        /// </summary>
        public const string Suspended = "Suspended";
        /// <summary>
        /// The BrowseName for the SuspendedToHolding component.
        /// </summary>
        public const string SuspendedToHolding = "SuspendedToHolding";
        /// <summary>
        /// The BrowseName for the SuspendedToUnsuspending component.
        /// </summary>
        public const string SuspendedToUnsuspending = "SuspendedToUnsuspending";
        /// <summary>
        /// The BrowseName for the Suspending component.
        /// </summary>
        public const string Suspending = "Suspending";
        /// <summary>
        /// The BrowseName for the SuspendingToHolding component.
        /// </summary>
        public const string SuspendingToHolding = "SuspendingToHolding";
        /// <summary>
        /// The BrowseName for the SuspendingToSuspended component.
        /// </summary>
        public const string SuspendingToSuspended = "SuspendingToSuspended";
        /// <summary>
        /// The BrowseName for the TargetValue component.
        /// </summary>
        public const string TargetValue = "TargetValue";
        /// <summary>
        /// The BrowseName for the Task component.
        /// </summary>
        public const string Task = "Task";
        /// <summary>
        /// The BrowseName for the TaskSet component.
        /// </summary>
        public const string TaskSet = "TaskSet";
        /// <summary>
        /// The BrowseName for the TaskSetType component.
        /// </summary>
        public const string TaskSetType = "TaskSetType";
        /// <summary>
        /// The BrowseName for the TaskType component.
        /// </summary>
        public const string TaskType = "TaskType";
        /// <summary>
        /// The BrowseName for the Template component.
        /// </summary>
        public const string Template = "Template";
        /// <summary>
        /// The BrowseName for the TemplatePropertiesDataType component.
        /// </summary>
        public const string TemplatePropertiesDataType = "TemplatePropertiesDataType";
        /// <summary>
        /// The BrowseName for the ToComplete component.
        /// </summary>
        public const string ToComplete = "ToComplete";
        /// <summary>
        /// The BrowseName for the TotalOperationCycles component.
        /// </summary>
        public const string TotalOperationCycles = "TotalOperationCycles";
        /// <summary>
        /// The BrowseName for the TotalOperationDuration component.
        /// </summary>
        public const string TotalOperationDuration = "TotalOperationDuration";
        /// <summary>
        /// The BrowseName for the TotalizedValue component.
        /// </summary>
        public const string TotalizedValue = "TotalizedValue";
        /// <summary>
        /// The BrowseName for the Tuning component.
        /// </summary>
        public const string Tuning = "Tuning";
        /// <summary>
        /// The BrowseName for the Type component.
        /// </summary>
        public const string Type = "Type";
        /// <summary>
        /// The BrowseName for the TypeDictionary component.
        /// </summary>
        public const string TypeDictionary_XmlSchema = "TypeDictionary";
        /// <summary>
        /// The BrowseName for the URL component.
        /// </summary>
        public const string URL = "URL";
        /// <summary>
        /// The BrowseName for the Unhold component.
        /// </summary>
        public const string Unhold = "Unhold";
        /// <summary>
        /// The BrowseName for the Unholding component.
        /// </summary>
        public const string Unholding = "Unholding";
        /// <summary>
        /// The BrowseName for the UnholdingToExecute component.
        /// </summary>
        public const string UnholdingToExecute = "UnholdingToExecute";
        /// <summary>
        /// The BrowseName for the UnholdingToHolding component.
        /// </summary>
        public const string UnholdingToHolding = "UnholdingToHolding";
        /// <summary>
        /// The BrowseName for the Unlock component.
        /// </summary>
        public const string Unlock = "Unlock";
        /// <summary>
        /// The BrowseName for the Unsuspend component.
        /// </summary>
        public const string Unsuspend = "Unsuspend";
        /// <summary>
        /// The BrowseName for the Unsuspending component.
        /// </summary>
        public const string Unsuspending = "Unsuspending";
        /// <summary>
        /// The BrowseName for the UnsuspendingToExecute component.
        /// </summary>
        public const string UnsuspendingToExecute = "UnsuspendingToExecute";
        /// <summary>
        /// The BrowseName for the UnsuspendingToHolding component.
        /// </summary>
        public const string UnsuspendingToHolding = "UnsuspendingToHolding";
        /// <summary>
        /// The BrowseName for the Upload component.
        /// </summary>
        public const string Upload = "Upload";
        /// <summary>
        /// The BrowseName for the User component.
        /// </summary>
        public const string User = "User";
        /// <summary>
        /// The BrowseName for the Utilizes component.
        /// </summary>
        public const string Utilizes = "Utilizes";
        /// <summary>
        /// The BrowseName for the VariableSet component.
        /// </summary>
        public const string VariableSet = "VariableSet";
        /// <summary>
        /// The BrowseName for the Version component.
        /// </summary>
        public const string Version = "Version";
        /// <summary>
        /// The BrowseName for the YearOfConstruction component.
        /// </summary>
        public const string YearOfConstruction = "YearOfConstruction";
        /// <summary>
        /// The BrowseName for the http://opcfoundation.org/UA/Machinery/ component.
        /// </summary>
        public const string http___opcfoundation_org_UA_Machinery_ = "http://opcfoundation.org/UA/Machinery/";
        /// <summary>
        /// The BrowseName for the http://spectaris.de/LADS/ component.
        /// </summary>
        public const string http___spectaris_de_LADS_ = "http://spectaris.de/LADS/";
    }
    #endregion

    #region Namespace Declarations
    /// <summary>
    /// Defines constants for all namespaces referenced by the Model.
    /// </summary>
    public static partial class Namespaces
    {
        /// <summary>
        /// The URI for the OpcUa namespace (.NET code namespace is 'Opc.Ua').
        /// </summary>
        public const string OpcUa = "http://opcfoundation.org/UA/";

        /// <summary>
        /// The URI for the OpcUaXsd namespace (.NET code namespace is 'Opc.Ua').
        /// </summary>
        public const string OpcUaXsd = "http://opcfoundation.org/UA/2008/02/Types.xsd";

        /// <summary>
        /// The URI for the Machinery namespace.
        /// </summary>
        public const string Machinery = "http://opcfoundation.org/UA/Machinery/";

        /// <summary>
        /// The URI for the MachineryXsd namespace.
        /// </summary>
        public const string MachineryXsd = "http://opcfoundation.org/UA/Machinery/Types.xsd";

        /// <summary>
        /// The URI for the LADS namespace.
        /// </summary>
        public const string LADS = "http://spectaris.de/LADS/";

        /// <summary>
        /// The URI for the LADSXsd namespace.
        /// </summary>
        public const string LADSXsd = "http://spectaris.de/LADS/Types.xsd";
    }
    #endregion
}

