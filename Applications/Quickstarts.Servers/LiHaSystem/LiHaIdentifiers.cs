/******************************************************************************
**
** <auto-generated>
**     This code was generated by a tool: UaModeler
**     Runtime Version: 1.6.5, using .NET Server 2.6.0 template (version 2)
**
**     Changes to this file may cause incorrect behavior and will be lost if
**     the code is regenerated.
**
**     Generated by Dr. Matthias Arnold <M.Arnold@AixEngineers.de>
** </auto-generated>
**
** Copyright (c) 2006-2022 Unified Automation GmbH All rights reserved.
**
** Software License Agreement ("SLA") Version 2.7
**
** Unless explicitly acquired and licensed from Licensor under another
** license, the contents of this file are subject to the Software License
** Agreement ("SLA") Version 2.7, or subsequent versions
** as allowed by the SLA, and You may not copy or use this file in either
** source code or executable form, except in compliance with the terms and
** conditions of the SLA.
**
** All software distributed under the SLA is provided strictly on an
** "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
** AND LICENSOR HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT
** LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the SLA for specific
** language governing rights and limitations under the SLA.
**
** Project: .NET OPC UA SDK information model for namespace http://yourorganisation.org/lihasystem/
**
** Description: OPC Unified Architecture Software Development Kit.
**
** The complete license agreement can be found here:
** http://unifiedautomation.com/License/SLA/2.7/
**
** Created: 01.04.2022
**
******************************************************************************/

using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using System.Xml;
using System.Runtime.Serialization;
using Opc.Ua;

#pragma warning disable CS1570

namespace spectaris.LiHa
{
    #region DataType Identifiers
    /// <summary>
    /// A class that declares constants for all DataTypes in the Model.
    /// </summary>

    public static partial class DataTypes
    {
    }
    #endregion

    #region Object Identifiers
    /// <summary>
    /// A class that declares constants for all Objects in the Model.
    /// </summary>

    public static partial class Objects
    {
        /// <summary>
        /// The identifier for the ProgramManager Object.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager = 5011;

        /// <summary>
        /// The identifier for the ActiveProgram Object.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ActiveProgram = 5012;

        /// <summary>
        /// The identifier for the ProgramTemplate Object.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ActiveProgram_ProgramTemplate = 5013;

        /// <summary>
        /// The identifier for the StateMachine Object.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ActiveProgram_StateMachine = 5014;

        /// <summary>
        /// The identifier for the ClearedStateMachine Object.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine = 5015;

        /// <summary>
        /// The identifier for the RunningStateMachine Object.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine = 5016;

        /// <summary>
        /// The identifier for the Operational Object.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_Operational = 5017;

        /// <summary>
        /// The identifier for the ProgramTemplateSet Object.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ProgramTemplateSet = 5018;

        /// <summary>
        /// The identifier for the LiHaProtocolA Object.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ProgramTemplateSet_LiHaProtocolA = 5020;

        /// <summary>
        /// The identifier for the ResultSet Object.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ResultSet = 5019;

        /// <summary>
        /// The identifier for the LiHaDevice Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice = 5001;

        /// <summary>
        /// The identifier for the Components Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_Components = 5002;

        /// <summary>
        /// The identifier for the ComponentSet Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_ComponentSet = 5003;

        /// <summary>
        /// The identifier for the FunctionalUnitSet Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet = 5004;

        /// <summary>
        /// The identifier for the LiHaUnit Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit = 5022;

        /// <summary>
        /// The identifier for the FunctionSet Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_FunctionSet = 5023;

        /// <summary>
        /// The identifier for the Lock Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock = 5024;

        /// <summary>
        /// The identifier for the ProgramManager Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager = 5025;

        /// <summary>
        /// The identifier for the ActiveProgram Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram = 5026;

        /// <summary>
        /// The identifier for the ProgramTemplate Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_ProgramTemplate = 5027;

        /// <summary>
        /// The identifier for the StateMachine Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine = 5028;

        /// <summary>
        /// The identifier for the ClearedStateMachine Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine = 5029;

        /// <summary>
        /// The identifier for the RunningStateMachine Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine = 5030;

        /// <summary>
        /// The identifier for the Operational Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_Operational = 5031;

        /// <summary>
        /// The identifier for the ProgramTemplateSet Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet = 5032;

        /// <summary>
        /// The identifier for the LiHaProtocolA Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_LiHaProtocolA = 5034;

        /// <summary>
        /// The identifier for the ResultSet Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ResultSet = 5033;

        /// <summary>
        /// The identifier for the Identification Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_Identification = 5005;

        /// <summary>
        /// The identifier for the Lock Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_Lock = 5006;

        /// <summary>
        /// The identifier for the Maintenance Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_Maintenance = 5007;

        /// <summary>
        /// The identifier for the Operational Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_Operational = 5021;

        /// <summary>
        /// The identifier for the StateMachine Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_StateMachine = 5008;

        /// <summary>
        /// The identifier for the SupplySet Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_SupplySet = 5009;

        /// <summary>
        /// The identifier for the TaskSet Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_TaskSet = 5010;

        /// <summary>
        /// The identifier for the http://spectaris.de/lihasystem/ Object.
        /// </summary>
        public const uint Namespaces_http___spectaris_de_lihasystem_ = 5035;

    }
    #endregion

    #region ObjectType Identifiers
    /// <summary>
    /// A class that declares constants for all ObjectTypes in the Model.
    /// </summary>

    public static partial class ObjectTypes
    {
        /// <summary>
        /// The identifier for the LiHaUnitType ObjectType.
        /// </summary>
        public const uint LiHaUnitType = 1002;

    }
    #endregion

    #region Method Identifiers
    /// <summary>
    /// A class that declares constants for all Methods in the Model.
    /// </summary>

    public static partial class Methods
    {
        /// <summary>
        /// The identifier for the Abort Method.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_Abort = 7007;

        /// <summary>
        /// The identifier for the Clear Method.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_Clear = 7008;

        /// <summary>
        /// The identifier for the Reset Method.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_Reset = 7009;

        /// <summary>
        /// The identifier for the Hold Method.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Hold = 7011;

        /// <summary>
        /// The identifier for the Reset Method.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Reset = 7012;

        /// <summary>
        /// The identifier for the Start Method.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start = 7013;

        /// <summary>
        /// The identifier for the Suspend Method.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Suspend = 7014;

        /// <summary>
        /// The identifier for the ToComplete Method.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_ToComplete = 7015;

        /// <summary>
        /// The identifier for the Unhold Method.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Unhold = 7016;

        /// <summary>
        /// The identifier for the Unsuspend Method.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Unsuspend = 7017;

        /// <summary>
        /// The identifier for the Stop Method.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_Stop = 7010;

        /// <summary>
        /// The identifier for the Download Method.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ProgramTemplateSet_Download = 7005;

        /// <summary>
        /// The identifier for the Upload Method.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ProgramTemplateSet_Upload = 7006;

        /// <summary>
        /// The identifier for the BreakLock Method.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_BreakLock = 7022;

        /// <summary>
        /// The identifier for the ExitLock Method.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_ExitLock = 7023;

        /// <summary>
        /// The identifier for the InitLock Method.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_InitLock = 7024;

        /// <summary>
        /// The identifier for the RenewLock Method.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_RenewLock = 7025;

        /// <summary>
        /// The identifier for the Abort Method.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_Abort = 7026;

        /// <summary>
        /// The identifier for the Clear Method.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_Clear = 7027;

        /// <summary>
        /// The identifier for the Reset Method.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_Reset = 7028;

        /// <summary>
        /// The identifier for the Hold Method.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Hold = 7029;

        /// <summary>
        /// The identifier for the Reset Method.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Reset = 7030;

        /// <summary>
        /// The identifier for the Start Method.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start = 7031;

        /// <summary>
        /// The identifier for the Suspend Method.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Suspend = 7032;

        /// <summary>
        /// The identifier for the ToComplete Method.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_ToComplete = 7033;

        /// <summary>
        /// The identifier for the Unhold Method.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Unhold = 7034;

        /// <summary>
        /// The identifier for the Unsuspend Method.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Unsuspend = 7035;

        /// <summary>
        /// The identifier for the Stop Method.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_Stop = 7036;

        /// <summary>
        /// The identifier for the Download Method.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_Download = 7037;

        /// <summary>
        /// The identifier for the Remove Method.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_Remove = 7038;

        /// <summary>
        /// The identifier for the Upload Method.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_Upload = 7039;

        /// <summary>
        /// The identifier for the BreakLock Method.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_Lock_BreakLock = 7001;

        /// <summary>
        /// The identifier for the ExitLock Method.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_Lock_ExitLock = 7002;

        /// <summary>
        /// The identifier for the InitLock Method.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_Lock_InitLock = 7003;

        /// <summary>
        /// The identifier for the RenewLock Method.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_Lock_RenewLock = 7004;

        /// <summary>
        /// The identifier for the GotoMaintenance Method.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_StateMachine_GotoMaintenance = 7018;

        /// <summary>
        /// The identifier for the GotoOperating Method.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_StateMachine_GotoOperating = 7019;

        /// <summary>
        /// The identifier for the GotoShutdown Method.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_StateMachine_GotoShutdown = 7020;

        /// <summary>
        /// The identifier for the GotoStandby Method.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_StateMachine_GotoStandby = 7021;

    }
    #endregion

    #region ReferenceType Identifiers
    /// <summary>
    /// A class that declares constants for all ReferenceTyped in the Model.
    /// </summary>

    public static partial class ReferenceTypes
    {
    }
    #endregion

    #region Variable Identifiers
    /// <summary>
    /// A class that declares constants for all Variables in the Model.
    /// </summary>

    public static partial class Variables
    {
        /// <summary>
        /// The identifier for the Author Variable.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Author = 6026;

        /// <summary>
        /// The identifier for the Created Variable.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Created = 6027;

        /// <summary>
        /// The identifier for the Description Variable.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Description = 6028;

        /// <summary>
        /// The identifier for the Modified Variable.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Modified = 6029;

        /// <summary>
        /// The identifier for the Name Variable.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Name = 6030;

        /// <summary>
        /// The identifier for the Status Variable.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Status = 6031;

        /// <summary>
        /// The identifier for the Type Variable.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Type = 6032;

        /// <summary>
        /// The identifier for the Version Variable.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Version = 6033;

        /// <summary>
        /// The identifier for the AvailableStates Variable.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_AvailableStates = 6034;

        /// <summary>
        /// The identifier for the AvailableTransitions Variable.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_AvailableTransitions = 6035;

        /// <summary>
        /// The identifier for the AvailableStates Variable.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_AvailableStates = 6036;

        /// <summary>
        /// The identifier for the AvailableTransitions Variable.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_AvailableTransitions = 6037;

        /// <summary>
        /// The identifier for the CurrentState Variable.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_CurrentState = 6038;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_CurrentState_Id = 6039;

        /// <summary>
        /// The identifier for the AvailableStates Variable.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableStates = 6040;

        /// <summary>
        /// The identifier for the AvailableTransitions Variable.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableTransitions = 6041;

        /// <summary>
        /// The identifier for the CurrentState Variable.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState = 6042;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState_Id = 6043;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start_InputArguments = 6051;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start_OutputArguments = 6052;

        /// <summary>
        /// The identifier for the CurrentState Variable.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_CurrentState = 6044;

        /// <summary>
        /// The identifier for the Id Variable.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_CurrentState_Id = 6045;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ProgramTemplateSet_Download_InputArguments = 6048;

        /// <summary>
        /// The identifier for the OutputArguments Variable.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ProgramTemplateSet_Download_OutputArguments = 6049;

        /// <summary>
        /// The identifier for the Author Variable.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Author = 6053;

        /// <summary>
        /// The identifier for the Created Variable.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Created = 6054;

        /// <summary>
        /// The identifier for the Description Variable.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Description = 6055;

        /// <summary>
        /// The identifier for the Modified Variable.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Modified = 6056;

        /// <summary>
        /// The identifier for the Name Variable.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Name = 6057;

        /// <summary>
        /// The identifier for the Status Variable.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Status = 6058;

        /// <summary>
        /// The identifier for the Type Variable.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Type = 6059;

        /// <summary>
        /// The identifier for the Version Variable.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Version = 6060;

        /// <summary>
        /// The identifier for the NodeVersion Variable.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ProgramTemplateSet_NodeVersion = 6046;

        /// <summary>
        /// The identifier for the InputArguments Variable.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ProgramTemplateSet_Upload_InputArguments = 6050;

        /// <summary>
        /// The identifier for the NodeVersion Variable.
        /// </summary>
        public const uint LiHaUnitType_ProgramManager_ResultSet_NodeVersion = 6047;

        /// <summary>
        /// The identifier for the AssetId Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_AssetId = 6001;

        /// <summary>
        /// The identifier for the ComponentName Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_ComponentName = 6002;

        /// <summary>
        /// The identifier for the DeviceHealth Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_DeviceHealth = 6003;

        /// <summary>
        /// The identifier for the DeviceManual Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_DeviceManual = 6004;

        /// <summary>
        /// The identifier for the DeviceRevision Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_DeviceRevision = 6005;

        /// <summary>
        /// The identifier for the ComponentName Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ComponentName = 6061;

        /// <summary>
        /// The identifier for the OutputArguments Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_BreakLock_OutputArguments = 6062;

        /// <summary>
        /// The identifier for the OutputArguments Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_ExitLock_OutputArguments = 6063;

        /// <summary>
        /// The identifier for the InputArguments Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_InitLock_InputArguments = 6064;

        /// <summary>
        /// The identifier for the OutputArguments Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_InitLock_OutputArguments = 6065;

        /// <summary>
        /// The identifier for the Locked Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_Locked = 6066;

        /// <summary>
        /// The identifier for the LockingClient Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_LockingClient = 6067;

        /// <summary>
        /// The identifier for the LockingUser Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_LockingUser = 6068;

        /// <summary>
        /// The identifier for the RemainingLockTime Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_RemainingLockTime = 6069;

        /// <summary>
        /// The identifier for the OutputArguments Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_RenewLock_OutputArguments = 6070;

        /// <summary>
        /// The identifier for the Author Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_ProgramTemplate_Author = 6071;

        /// <summary>
        /// The identifier for the Created Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_ProgramTemplate_Created = 6072;

        /// <summary>
        /// The identifier for the Description Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_ProgramTemplate_Description = 6073;

        /// <summary>
        /// The identifier for the Modified Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_ProgramTemplate_Modified = 6074;

        /// <summary>
        /// The identifier for the Name Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_ProgramTemplate_Name = 6075;

        /// <summary>
        /// The identifier for the Status Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_ProgramTemplate_Status = 6076;

        /// <summary>
        /// The identifier for the Type Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_ProgramTemplate_Type = 6077;

        /// <summary>
        /// The identifier for the Version Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_ProgramTemplate_Version = 6078;

        /// <summary>
        /// The identifier for the AvailableStates Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_AvailableStates = 6079;

        /// <summary>
        /// The identifier for the AvailableTransitions Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_AvailableTransitions = 6080;

        /// <summary>
        /// The identifier for the AvailableStates Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_AvailableStates = 6081;

        /// <summary>
        /// The identifier for the AvailableTransitions Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_AvailableTransitions = 6082;

        /// <summary>
        /// The identifier for the CurrentState Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_CurrentState = 6083;

        /// <summary>
        /// The identifier for the Id Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_CurrentState_Id = 6084;

        /// <summary>
        /// The identifier for the AvailableStates Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableStates = 6085;

        /// <summary>
        /// The identifier for the AvailableTransitions Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableTransitions = 6086;

        /// <summary>
        /// The identifier for the CurrentState Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState = 6087;

        /// <summary>
        /// The identifier for the Id Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState_Id = 6088;

        /// <summary>
        /// The identifier for the InputArguments Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start_InputArguments = 6089;

        /// <summary>
        /// The identifier for the OutputArguments Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start_OutputArguments = 6090;

        /// <summary>
        /// The identifier for the CurrentState Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_CurrentState = 6091;

        /// <summary>
        /// The identifier for the Id Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_CurrentState_Id = 6092;

        /// <summary>
        /// The identifier for the InputArguments Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_Download_InputArguments = 6095;

        /// <summary>
        /// The identifier for the OutputArguments Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_Download_OutputArguments = 6096;

        /// <summary>
        /// The identifier for the Author Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Author = 6097;

        /// <summary>
        /// The identifier for the Created Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Created = 6098;

        /// <summary>
        /// The identifier for the Description Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Description = 6099;

        /// <summary>
        /// The identifier for the Modified Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Modified = 6100;

        /// <summary>
        /// The identifier for the Name Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Name = 6101;

        /// <summary>
        /// The identifier for the Status Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Status = 6102;

        /// <summary>
        /// The identifier for the Type Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Type = 6103;

        /// <summary>
        /// The identifier for the Version Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Version = 6104;

        /// <summary>
        /// The identifier for the NodeVersion Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_NodeVersion = 6093;

        /// <summary>
        /// The identifier for the InputArguments Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_Remove_InputArguments = 6105;

        /// <summary>
        /// The identifier for the InputArguments Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_Upload_InputArguments = 6106;

        /// <summary>
        /// The identifier for the NodeVersion Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ResultSet_NodeVersion = 6094;

        /// <summary>
        /// The identifier for the HardwareRevision Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_HardwareRevision = 6006;

        /// <summary>
        /// The identifier for the Manufacturer Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_Identification_Manufacturer = 6007;

        /// <summary>
        /// The identifier for the ProductInstanceUri Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_Identification_ProductInstanceUri = 6008;

        /// <summary>
        /// The identifier for the SerialNumber Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_Identification_SerialNumber = 6009;

        /// <summary>
        /// The identifier for the OutputArguments Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_Lock_BreakLock_OutputArguments = 6010;

        /// <summary>
        /// The identifier for the OutputArguments Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_Lock_ExitLock_OutputArguments = 6011;

        /// <summary>
        /// The identifier for the InputArguments Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_Lock_InitLock_InputArguments = 6012;

        /// <summary>
        /// The identifier for the OutputArguments Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_Lock_InitLock_OutputArguments = 6013;

        /// <summary>
        /// The identifier for the Locked Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_Lock_Locked = 6014;

        /// <summary>
        /// The identifier for the LockingClient Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_Lock_LockingClient = 6015;

        /// <summary>
        /// The identifier for the LockingUser Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_Lock_LockingUser = 6016;

        /// <summary>
        /// The identifier for the RemainingLockTime Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_Lock_RemainingLockTime = 6017;

        /// <summary>
        /// The identifier for the OutputArguments Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_Lock_RenewLock_OutputArguments = 6018;

        /// <summary>
        /// The identifier for the Manufacturer Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_Manufacturer = 6019;

        /// <summary>
        /// The identifier for the Model Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_Model = 6020;

        /// <summary>
        /// The identifier for the CurrentState Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_StateMachine_CurrentState = 6023;

        /// <summary>
        /// The identifier for the Id Object.
        /// </summary>
        public const uint _CurrentState_Id = 6024;

        /// <summary>
        /// The identifier for the RevisionCounter Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_RevisionCounter = 6025;

        /// <summary>
        /// The identifier for the SerialNumber Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_SerialNumber = 6021;

        /// <summary>
        /// The identifier for the SoftwareRevision Object.
        /// </summary>
        public const uint DeviceSet_LiHaDevice_SoftwareRevision = 6022;

        /// <summary>
        /// The identifier for the IsNamespaceSubset Object.
        /// </summary>
        public const uint Namespaces_http___spectaris_de_lihasystem__IsNamespaceSubset = 6107;

        /// <summary>
        /// The identifier for the NamespacePublicationDate Object.
        /// </summary>
        public const uint Namespaces_http___spectaris_de_lihasystem__NamespacePublicationDate = 6108;

        /// <summary>
        /// The identifier for the NamespaceUri Object.
        /// </summary>
        public const uint Namespaces_http___spectaris_de_lihasystem__NamespaceUri = 6109;

        /// <summary>
        /// The identifier for the NamespaceVersion Object.
        /// </summary>
        public const uint Namespaces_http___spectaris_de_lihasystem__NamespaceVersion = 6110;

        /// <summary>
        /// The identifier for the StaticNodeIdTypes Object.
        /// </summary>
        public const uint Namespaces_http___spectaris_de_lihasystem__StaticNodeIdTypes = 6111;

        /// <summary>
        /// The identifier for the StaticNumericNodeIdRange Object.
        /// </summary>
        public const uint Namespaces_http___spectaris_de_lihasystem__StaticNumericNodeIdRange = 6112;

        /// <summary>
        /// The identifier for the StaticStringNodeIdPattern Object.
        /// </summary>
        public const uint Namespaces_http___spectaris_de_lihasystem__StaticStringNodeIdPattern = 6113;

    }
    #endregion

    #region VariableTypes Identifiers
    /// <summary>
    /// A class that declares constants for all VariableTypes in the Model.
    /// </summary>

    public static partial class VariableTypes
    {
    }
    #endregion

    #region DataType Node Identifiers
    /// <summary>
    /// A class that declares constants for all DataTypes in the Model.
    /// </summary>

    public static partial class DataTypeIds
    {
    }
    #endregion

    #region Method Node Identifiers
    /// <summary>
    /// A class that declares constants for all Methods in the Model.
    /// </summary>

    public static partial class MethodIds
    {
        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_Abort Method.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_Abort = new ExpandedNodeId(Methods.LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_Abort, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_Clear Method.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_Clear = new ExpandedNodeId(Methods.LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_Clear, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_Reset Method.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_Reset = new ExpandedNodeId(Methods.LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_Reset, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Hold Method.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Hold = new ExpandedNodeId(Methods.LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Hold, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Reset Method.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Reset = new ExpandedNodeId(Methods.LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Reset, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start Method.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start = new ExpandedNodeId(Methods.LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Suspend Method.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Suspend = new ExpandedNodeId(Methods.LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Suspend, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_ToComplete Method.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_ToComplete = new ExpandedNodeId(Methods.LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_ToComplete, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Unhold Method.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Unhold = new ExpandedNodeId(Methods.LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Unhold, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Unsuspend Method.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Unsuspend = new ExpandedNodeId(Methods.LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Unsuspend, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_Stop Method.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_Stop = new ExpandedNodeId(Methods.LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_Stop, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ProgramTemplateSet_Download Method.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ProgramTemplateSet_Download = new ExpandedNodeId(Methods.LiHaUnitType_ProgramManager_ProgramTemplateSet_Download, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ProgramTemplateSet_Upload Method.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ProgramTemplateSet_Upload = new ExpandedNodeId(Methods.LiHaUnitType_ProgramManager_ProgramTemplateSet_Upload, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_BreakLock Method.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_BreakLock = new ExpandedNodeId(Methods.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_BreakLock, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_ExitLock Method.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_ExitLock = new ExpandedNodeId(Methods.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_ExitLock, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_InitLock Method.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_InitLock = new ExpandedNodeId(Methods.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_InitLock, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_RenewLock Method.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_RenewLock = new ExpandedNodeId(Methods.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_RenewLock, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_Abort Method.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_Abort = new ExpandedNodeId(Methods.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_Abort, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_Clear Method.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_Clear = new ExpandedNodeId(Methods.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_Clear, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_Reset Method.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_Reset = new ExpandedNodeId(Methods.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_Reset, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Hold Method.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Hold = new ExpandedNodeId(Methods.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Hold, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Reset Method.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Reset = new ExpandedNodeId(Methods.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Reset, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start Method.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start = new ExpandedNodeId(Methods.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Suspend Method.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Suspend = new ExpandedNodeId(Methods.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Suspend, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_ToComplete Method.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_ToComplete = new ExpandedNodeId(Methods.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_ToComplete, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Unhold Method.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Unhold = new ExpandedNodeId(Methods.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Unhold, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Unsuspend Method.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Unsuspend = new ExpandedNodeId(Methods.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Unsuspend, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_Stop Method.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_Stop = new ExpandedNodeId(Methods.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_Stop, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_Download Method.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_Download = new ExpandedNodeId(Methods.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_Download, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_Remove Method.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_Remove = new ExpandedNodeId(Methods.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_Remove, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_Upload Method.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_Upload = new ExpandedNodeId(Methods.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_Upload, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_Lock_BreakLock Method.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_Lock_BreakLock = new ExpandedNodeId(Methods.DeviceSet_LiHaDevice_Lock_BreakLock, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_Lock_ExitLock Method.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_Lock_ExitLock = new ExpandedNodeId(Methods.DeviceSet_LiHaDevice_Lock_ExitLock, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_Lock_InitLock Method.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_Lock_InitLock = new ExpandedNodeId(Methods.DeviceSet_LiHaDevice_Lock_InitLock, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_Lock_RenewLock Method.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_Lock_RenewLock = new ExpandedNodeId(Methods.DeviceSet_LiHaDevice_Lock_RenewLock, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_StateMachine_GotoMaintenance Method.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_StateMachine_GotoMaintenance = new ExpandedNodeId(Methods.DeviceSet_LiHaDevice_StateMachine_GotoMaintenance, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_StateMachine_GotoOperating Method.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_StateMachine_GotoOperating = new ExpandedNodeId(Methods.DeviceSet_LiHaDevice_StateMachine_GotoOperating, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_StateMachine_GotoShutdown Method.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_StateMachine_GotoShutdown = new ExpandedNodeId(Methods.DeviceSet_LiHaDevice_StateMachine_GotoShutdown, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_StateMachine_GotoStandby Method.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_StateMachine_GotoStandby = new ExpandedNodeId(Methods.DeviceSet_LiHaDevice_StateMachine_GotoStandby, Namespaces.LiHa);

    }
    #endregion

    #region Object Node Identifiers
    /// <summary>
    /// A class that declares constants for all Objects in the Model.
    /// </summary>

    public static partial class ObjectIds
    {
        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager Object.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager = new ExpandedNodeId(Objects.LiHaUnitType_ProgramManager, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ActiveProgram Object.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ActiveProgram = new ExpandedNodeId(Objects.LiHaUnitType_ProgramManager_ActiveProgram, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ActiveProgram_ProgramTemplate Object.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ActiveProgram_ProgramTemplate = new ExpandedNodeId(Objects.LiHaUnitType_ProgramManager_ActiveProgram_ProgramTemplate, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ActiveProgram_StateMachine Object.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ActiveProgram_StateMachine = new ExpandedNodeId(Objects.LiHaUnitType_ProgramManager_ActiveProgram_StateMachine, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine Object.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine = new ExpandedNodeId(Objects.LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine Object.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine = new ExpandedNodeId(Objects.LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_Operational Object.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_Operational = new ExpandedNodeId(Objects.LiHaUnitType_ProgramManager_Operational, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ProgramTemplateSet Object.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ProgramTemplateSet = new ExpandedNodeId(Objects.LiHaUnitType_ProgramManager_ProgramTemplateSet, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ProgramTemplateSet_LiHaProtocolA Object.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ProgramTemplateSet_LiHaProtocolA = new ExpandedNodeId(Objects.LiHaUnitType_ProgramManager_ProgramTemplateSet_LiHaProtocolA, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ResultSet Object.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ResultSet = new ExpandedNodeId(Objects.LiHaUnitType_ProgramManager_ResultSet, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice Object.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice = new ExpandedNodeId(Objects.DeviceSet_LiHaDevice, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_Components Object.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_Components = new ExpandedNodeId(Objects.DeviceSet_LiHaDevice_Components, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_ComponentSet Object.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_ComponentSet = new ExpandedNodeId(Objects.DeviceSet_LiHaDevice_ComponentSet, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet Object.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet = new ExpandedNodeId(Objects.DeviceSet_LiHaDevice_FunctionalUnitSet, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit Object.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit = new ExpandedNodeId(Objects.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_FunctionSet Object.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_FunctionSet = new ExpandedNodeId(Objects.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_FunctionSet, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock Object.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock = new ExpandedNodeId(Objects.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager Object.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager = new ExpandedNodeId(Objects.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram Object.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram = new ExpandedNodeId(Objects.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_ProgramTemplate Object.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_ProgramTemplate = new ExpandedNodeId(Objects.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_ProgramTemplate, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine Object.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine = new ExpandedNodeId(Objects.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine Object.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine = new ExpandedNodeId(Objects.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine Object.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine = new ExpandedNodeId(Objects.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_Operational Object.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_Operational = new ExpandedNodeId(Objects.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_Operational, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet Object.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet = new ExpandedNodeId(Objects.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_LiHaProtocolA Object.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_LiHaProtocolA = new ExpandedNodeId(Objects.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_LiHaProtocolA, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ResultSet Object.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ResultSet = new ExpandedNodeId(Objects.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ResultSet, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_Identification Object.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_Identification = new ExpandedNodeId(Objects.DeviceSet_LiHaDevice_Identification, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_Lock Object.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_Lock = new ExpandedNodeId(Objects.DeviceSet_LiHaDevice_Lock, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_Maintenance Object.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_Maintenance = new ExpandedNodeId(Objects.DeviceSet_LiHaDevice_Maintenance, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_Operational Object.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_Operational = new ExpandedNodeId(Objects.DeviceSet_LiHaDevice_Operational, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_StateMachine Object.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_StateMachine = new ExpandedNodeId(Objects.DeviceSet_LiHaDevice_StateMachine, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_SupplySet Object.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_SupplySet = new ExpandedNodeId(Objects.DeviceSet_LiHaDevice_SupplySet, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_TaskSet Object.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_TaskSet = new ExpandedNodeId(Objects.DeviceSet_LiHaDevice_TaskSet, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the Namespaces_http___spectaris_de_lihasystem_ Object.
        /// </summary>
        public static readonly ExpandedNodeId Namespaces_http___spectaris_de_lihasystem_ = new ExpandedNodeId(Objects.Namespaces_http___spectaris_de_lihasystem_, Namespaces.LiHa);

    }
    #endregion

    #region ObjectType Node Identifiers
    /// <summary>
    /// A class that declares constants for all Objects in the Model.
    /// </summary>

    public static partial class ObjectTypeIds
    {
        /// <summary>
        /// The identifier for the LiHaUnitType ObjectType.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType = new ExpandedNodeId(ObjectTypes.LiHaUnitType, Namespaces.LiHa);

    }
    #endregion

    #region ReferenceType Node Identifiers
    /// <summary>
    /// A class that declares constants for all ReferenceTypes in the Model.
    /// </summary>

    public static partial class ReferenceTypeIds
    {
    }
    #endregion

    #region Variable Node Identifiers
    /// <summary>
    /// A class that declares constants for all Variables in the Model.
    /// </summary>

    public static partial class VariableIds
    {
        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Author Variable.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Author = new ExpandedNodeId(Variables.LiHaUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Author, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Created Variable.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Created = new ExpandedNodeId(Variables.LiHaUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Created, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Description Variable.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Description = new ExpandedNodeId(Variables.LiHaUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Description, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Modified Variable.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Modified = new ExpandedNodeId(Variables.LiHaUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Modified, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Name Variable.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Name = new ExpandedNodeId(Variables.LiHaUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Name, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Status Variable.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Status = new ExpandedNodeId(Variables.LiHaUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Status, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Type Variable.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Type = new ExpandedNodeId(Variables.LiHaUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Type, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Version Variable.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Version = new ExpandedNodeId(Variables.LiHaUnitType_ProgramManager_ActiveProgram_ProgramTemplate_Version, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_AvailableStates Variable.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_AvailableStates = new ExpandedNodeId(Variables.LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_AvailableStates, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_AvailableTransitions Variable.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_AvailableTransitions = new ExpandedNodeId(Variables.LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_AvailableTransitions, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_AvailableStates Variable.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_AvailableStates = new ExpandedNodeId(Variables.LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_AvailableStates, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_AvailableTransitions Variable.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_AvailableTransitions = new ExpandedNodeId(Variables.LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_AvailableTransitions, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_CurrentState = new ExpandedNodeId(Variables.LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_CurrentState, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_CurrentState_Id = new ExpandedNodeId(Variables.LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_CurrentState_Id, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableStates Variable.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableStates = new ExpandedNodeId(Variables.LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableStates, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableTransitions Variable.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableTransitions = new ExpandedNodeId(Variables.LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableTransitions, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState = new ExpandedNodeId(Variables.LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState_Id = new ExpandedNodeId(Variables.LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState_Id, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start_InputArguments = new ExpandedNodeId(Variables.LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start_InputArguments, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start_OutputArguments = new ExpandedNodeId(Variables.LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start_OutputArguments, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_CurrentState = new ExpandedNodeId(Variables.LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_CurrentState, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_CurrentState_Id = new ExpandedNodeId(Variables.LiHaUnitType_ProgramManager_ActiveProgram_StateMachine_CurrentState_Id, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ProgramTemplateSet_Download_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ProgramTemplateSet_Download_InputArguments = new ExpandedNodeId(Variables.LiHaUnitType_ProgramManager_ProgramTemplateSet_Download_InputArguments, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ProgramTemplateSet_Download_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ProgramTemplateSet_Download_OutputArguments = new ExpandedNodeId(Variables.LiHaUnitType_ProgramManager_ProgramTemplateSet_Download_OutputArguments, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Author Variable.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Author = new ExpandedNodeId(Variables.LiHaUnitType_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Author, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Created Variable.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Created = new ExpandedNodeId(Variables.LiHaUnitType_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Created, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Description Variable.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Description = new ExpandedNodeId(Variables.LiHaUnitType_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Description, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Modified Variable.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Modified = new ExpandedNodeId(Variables.LiHaUnitType_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Modified, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Name Variable.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Name = new ExpandedNodeId(Variables.LiHaUnitType_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Name, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Status Variable.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Status = new ExpandedNodeId(Variables.LiHaUnitType_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Status, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Type Variable.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Type = new ExpandedNodeId(Variables.LiHaUnitType_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Type, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Version Variable.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Version = new ExpandedNodeId(Variables.LiHaUnitType_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Version, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ProgramTemplateSet_NodeVersion Variable.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ProgramTemplateSet_NodeVersion = new ExpandedNodeId(Variables.LiHaUnitType_ProgramManager_ProgramTemplateSet_NodeVersion, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ProgramTemplateSet_Upload_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ProgramTemplateSet_Upload_InputArguments = new ExpandedNodeId(Variables.LiHaUnitType_ProgramManager_ProgramTemplateSet_Upload_InputArguments, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the LiHaUnitType_ProgramManager_ResultSet_NodeVersion Variable.
        /// </summary>
        public static readonly ExpandedNodeId LiHaUnitType_ProgramManager_ResultSet_NodeVersion = new ExpandedNodeId(Variables.LiHaUnitType_ProgramManager_ResultSet_NodeVersion, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_AssetId Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_AssetId = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_AssetId, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_ComponentName Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_ComponentName = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_ComponentName, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_DeviceHealth Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_DeviceHealth = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_DeviceHealth, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_DeviceManual Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_DeviceManual = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_DeviceManual, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_DeviceRevision Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_DeviceRevision = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_DeviceRevision, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ComponentName Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ComponentName = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ComponentName, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_BreakLock_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_BreakLock_OutputArguments = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_BreakLock_OutputArguments, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_ExitLock_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_ExitLock_OutputArguments = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_ExitLock_OutputArguments, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_InitLock_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_InitLock_InputArguments = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_InitLock_InputArguments, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_InitLock_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_InitLock_OutputArguments = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_InitLock_OutputArguments, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_Locked Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_Locked = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_Locked, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_LockingClient Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_LockingClient = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_LockingClient, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_LockingUser Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_LockingUser = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_LockingUser, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_RemainingLockTime Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_RemainingLockTime = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_RemainingLockTime, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_RenewLock_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_RenewLock_OutputArguments = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_Lock_RenewLock_OutputArguments, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_ProgramTemplate_Author Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_ProgramTemplate_Author = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_ProgramTemplate_Author, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_ProgramTemplate_Created Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_ProgramTemplate_Created = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_ProgramTemplate_Created, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_ProgramTemplate_Description Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_ProgramTemplate_Description = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_ProgramTemplate_Description, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_ProgramTemplate_Modified Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_ProgramTemplate_Modified = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_ProgramTemplate_Modified, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_ProgramTemplate_Name Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_ProgramTemplate_Name = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_ProgramTemplate_Name, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_ProgramTemplate_Status Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_ProgramTemplate_Status = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_ProgramTemplate_Status, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_ProgramTemplate_Type Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_ProgramTemplate_Type = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_ProgramTemplate_Type, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_ProgramTemplate_Version Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_ProgramTemplate_Version = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_ProgramTemplate_Version, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_AvailableStates Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_AvailableStates = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_AvailableStates, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_AvailableTransitions Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_AvailableTransitions = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_AvailableTransitions, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_AvailableStates Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_AvailableStates = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_AvailableStates, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_AvailableTransitions Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_AvailableTransitions = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_AvailableTransitions, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_CurrentState = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_CurrentState, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_CurrentState_Id = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_CurrentState_Id, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableStates Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableStates = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableStates, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableTransitions Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableTransitions = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_AvailableTransitions, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState_Id = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_CurrentState_Id, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start_InputArguments = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start_InputArguments, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start_OutputArguments = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_ClearedStateMachine_RunningStateMachine_Start_OutputArguments, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_CurrentState = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_CurrentState, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_CurrentState_Id = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ActiveProgram_StateMachine_CurrentState_Id, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_Download_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_Download_InputArguments = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_Download_InputArguments, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_Download_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_Download_OutputArguments = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_Download_OutputArguments, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Author Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Author = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Author, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Created Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Created = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Created, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Description Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Description = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Description, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Modified Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Modified = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Modified, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Name Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Name = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Name, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Status Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Status = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Status, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Type Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Type = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Type, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Version Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Version = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_LiHaProtocolA_Version, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_NodeVersion Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_NodeVersion = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_NodeVersion, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_Remove_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_Remove_InputArguments = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_Remove_InputArguments, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_Upload_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_Upload_InputArguments = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ProgramTemplateSet_Upload_InputArguments, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ResultSet_NodeVersion Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ResultSet_NodeVersion = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_FunctionalUnitSet_LiHaUnit_ProgramManager_ResultSet_NodeVersion, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_HardwareRevision Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_HardwareRevision = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_HardwareRevision, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_Identification_Manufacturer Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_Identification_Manufacturer = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_Identification_Manufacturer, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_Identification_ProductInstanceUri Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_Identification_ProductInstanceUri = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_Identification_ProductInstanceUri, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_Identification_SerialNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_Identification_SerialNumber = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_Identification_SerialNumber, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_Lock_BreakLock_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_Lock_BreakLock_OutputArguments = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_Lock_BreakLock_OutputArguments, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_Lock_ExitLock_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_Lock_ExitLock_OutputArguments = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_Lock_ExitLock_OutputArguments, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_Lock_InitLock_InputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_Lock_InitLock_InputArguments = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_Lock_InitLock_InputArguments, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_Lock_InitLock_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_Lock_InitLock_OutputArguments = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_Lock_InitLock_OutputArguments, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_Lock_Locked Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_Lock_Locked = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_Lock_Locked, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_Lock_LockingClient Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_Lock_LockingClient = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_Lock_LockingClient, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_Lock_LockingUser Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_Lock_LockingUser = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_Lock_LockingUser, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_Lock_RemainingLockTime Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_Lock_RemainingLockTime = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_Lock_RemainingLockTime, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_Lock_RenewLock_OutputArguments Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_Lock_RenewLock_OutputArguments = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_Lock_RenewLock_OutputArguments, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_Manufacturer Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_Manufacturer = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_Manufacturer, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_Model Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_Model = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_Model, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_StateMachine_CurrentState Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_StateMachine_CurrentState = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_StateMachine_CurrentState, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the _CurrentState_Id Variable.
        /// </summary>
        public static readonly ExpandedNodeId _CurrentState_Id = new ExpandedNodeId(Variables._CurrentState_Id, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_RevisionCounter Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_RevisionCounter = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_RevisionCounter, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_SerialNumber Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_SerialNumber = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_SerialNumber, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the DeviceSet_LiHaDevice_SoftwareRevision Variable.
        /// </summary>
        public static readonly ExpandedNodeId DeviceSet_LiHaDevice_SoftwareRevision = new ExpandedNodeId(Variables.DeviceSet_LiHaDevice_SoftwareRevision, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the Namespaces_http___spectaris_de_lihasystem__IsNamespaceSubset Variable.
        /// </summary>
        public static readonly ExpandedNodeId Namespaces_http___spectaris_de_lihasystem__IsNamespaceSubset = new ExpandedNodeId(Variables.Namespaces_http___spectaris_de_lihasystem__IsNamespaceSubset, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the Namespaces_http___spectaris_de_lihasystem__NamespacePublicationDate Variable.
        /// </summary>
        public static readonly ExpandedNodeId Namespaces_http___spectaris_de_lihasystem__NamespacePublicationDate = new ExpandedNodeId(Variables.Namespaces_http___spectaris_de_lihasystem__NamespacePublicationDate, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the Namespaces_http___spectaris_de_lihasystem__NamespaceUri Variable.
        /// </summary>
        public static readonly ExpandedNodeId Namespaces_http___spectaris_de_lihasystem__NamespaceUri = new ExpandedNodeId(Variables.Namespaces_http___spectaris_de_lihasystem__NamespaceUri, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the Namespaces_http___spectaris_de_lihasystem__NamespaceVersion Variable.
        /// </summary>
        public static readonly ExpandedNodeId Namespaces_http___spectaris_de_lihasystem__NamespaceVersion = new ExpandedNodeId(Variables.Namespaces_http___spectaris_de_lihasystem__NamespaceVersion, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the Namespaces_http___spectaris_de_lihasystem__StaticNodeIdTypes Variable.
        /// </summary>
        public static readonly ExpandedNodeId Namespaces_http___spectaris_de_lihasystem__StaticNodeIdTypes = new ExpandedNodeId(Variables.Namespaces_http___spectaris_de_lihasystem__StaticNodeIdTypes, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the Namespaces_http___spectaris_de_lihasystem__StaticNumericNodeIdRange Variable.
        /// </summary>
        public static readonly ExpandedNodeId Namespaces_http___spectaris_de_lihasystem__StaticNumericNodeIdRange = new ExpandedNodeId(Variables.Namespaces_http___spectaris_de_lihasystem__StaticNumericNodeIdRange, Namespaces.LiHa);

        /// <summary>
        /// The identifier for the Namespaces_http___spectaris_de_lihasystem__StaticStringNodeIdPattern Variable.
        /// </summary>
        public static readonly ExpandedNodeId Namespaces_http___spectaris_de_lihasystem__StaticStringNodeIdPattern = new ExpandedNodeId(Variables.Namespaces_http___spectaris_de_lihasystem__StaticStringNodeIdPattern, Namespaces.LiHa);

    }
    #endregion

    #region VariableType Node Identifiers
    /// <summary>
    /// A class that declares constants for all VariableType in the Model.
    /// </summary>

    public static partial class VariableTypeIds
    {
    }
    #endregion

    #region BrowseName Declarations
    /// <summary>
    /// Declares all of the BrowseNames used in the Model.
    /// </summary>
    public static partial class BrowseNames
    {
        /// <summary>
        /// The BrowseName for the <Component> component.
        /// </summary>
        public const string Component = "<Component>";
        /// <summary>
        /// The BrowseName for the <Function> component.
        /// </summary>
        public const string Function = "<Function>";
        /// <summary>
        /// The BrowseName for the <FunctionalUnit> component.
        /// </summary>
        public const string FunctionalUnit = "<FunctionalUnit>";
        /// <summary>
        /// The BrowseName for the <Property> component.
        /// </summary>
        public const string Property = "<Property>";
        /// <summary>
        /// The BrowseName for the <ResultFileName> component.
        /// </summary>
        public const string ResultFileName_Placeholder = "<ResultFileName>";
        /// <summary>
        /// The BrowseName for the <ResultName> component.
        /// </summary>
        public const string ResultName_Placeholder = "<ResultName>";
        /// <summary>
        /// The BrowseName for the <TemplateName> component.
        /// </summary>
        public const string TemplateName_PlaceHolder = "<TemplateName>";
        /// <summary>
        /// The BrowseName for the Abort component.
        /// </summary>
        public const string Abort = "Abort";
        /// <summary>
        /// The BrowseName for the Aborted component.
        /// </summary>
        public const string Aborted = "Aborted";
        /// <summary>
        /// The BrowseName for the AbortedToCleared component.
        /// </summary>
        public const string AbortedToCleared = "AbortedToCleared";
        /// <summary>
        /// The BrowseName for the Aborting component.
        /// </summary>
        public const string Aborting = "Aborting";
        /// <summary>
        /// The BrowseName for the AbortingToAborted component.
        /// </summary>
        public const string AbortingToAborted = "AbortingToAborted";
        /// <summary>
        /// The BrowseName for the ActiveProgram component.
        /// </summary>
        public const string ActiveProgram = "ActiveProgram";
        /// <summary>
        /// The BrowseName for the ActiveProgramType component.
        /// </summary>
        public const string ActiveProgramType = "ActiveProgramType";
        /// <summary>
        /// The BrowseName for the AlarmMonitor component.
        /// </summary>
        public const string AlarmMonitor = "AlarmMonitor";
        /// <summary>
        /// The BrowseName for the AnalogControlFunctionType component.
        /// </summary>
        public const string AnalogControlFunctionType = "AnalogControlFunctionType";
        /// <summary>
        /// The BrowseName for the AnalogControlFunctionWithTotalizerType component.
        /// </summary>
        public const string AnalogControlFunctionWithTotalizerType = "AnalogControlFunctionWithTotalizerType";
        /// <summary>
        /// The BrowseName for the AnalogSensorFunctionType component.
        /// </summary>
        public const string AnalogSensorFunctionType = "AnalogSensorFunctionType";
        /// <summary>
        /// The BrowseName for the AnalogSensorFunctionWithCompensationType component.
        /// </summary>
        public const string AnalogSensorFunctionWithCompensationType = "AnalogSensorFunctionWithCompensationType";
        /// <summary>
        /// The BrowseName for the Author component.
        /// </summary>
        public const string Author = "Author";
        /// <summary>
        /// The BrowseName for the BaseControlFunctionMethodSetType component.
        /// </summary>
        public const string BaseControlFunctionMethodSetType = "BaseControlFunctionMethodSetType";
        /// <summary>
        /// The BrowseName for the BaseControlFunctionParameterSetType component.
        /// </summary>
        public const string BaseControlFunctionParameterSetType = "BaseControlFunctionParameterSetType";
        /// <summary>
        /// The BrowseName for the BaseControlFunctionType component.
        /// </summary>
        public const string BaseControlFunctionType = "BaseControlFunctionType";
        /// <summary>
        /// The BrowseName for the BaseMaintenanceInformationType component.
        /// </summary>
        public const string BaseMaintenanceInformationType = "BaseMaintenanceInformationType";
        /// <summary>
        /// The BrowseName for the BaseSensorFunctionParameterSetType component.
        /// </summary>
        public const string BaseSensorFunctionParameterSetType = "BaseSensorFunctionParameterSetType";
        /// <summary>
        /// The BrowseName for the BaseSensorFunctionType component.
        /// </summary>
        public const string BaseSensorFunctionType = "BaseSensorFunctionType";
        /// <summary>
        /// The BrowseName for the CalibrationValues component.
        /// </summary>
        public const string CalibrationValues = "CalibrationValues";
        /// <summary>
        /// The BrowseName for the Clear component.
        /// </summary>
        public const string Clear = "Clear";
        /// <summary>
        /// The BrowseName for the Cleared component.
        /// </summary>
        public const string Cleared = "Cleared";
        /// <summary>
        /// The BrowseName for the ClearedStateMachine component.
        /// </summary>
        public const string ClearedStateMachine = "ClearedStateMachine";
        /// <summary>
        /// The BrowseName for the ClearedToAborting component.
        /// </summary>
        public const string ClearedToAborting = "ClearedToAborting";
        /// <summary>
        /// The BrowseName for the Clearing component.
        /// </summary>
        public const string Clearing = "Clearing";
        /// <summary>
        /// The BrowseName for the ClearingToStopped component.
        /// </summary>
        public const string ClearingToStopped = "ClearingToStopped";
        /// <summary>
        /// The BrowseName for the Client component.
        /// </summary>
        public const string Client = "Client";
        /// <summary>
        /// The BrowseName for the Close component.
        /// </summary>
        public const string Close = "Close";
        /// <summary>
        /// The BrowseName for the Closed component.
        /// </summary>
        public const string Closed = "Closed";
        /// <summary>
        /// The BrowseName for the ClosedToLocked component.
        /// </summary>
        public const string ClosedToLocked = "ClosedToLocked";
        /// <summary>
        /// The BrowseName for the ClosedToOpen component.
        /// </summary>
        public const string ClosedToOpen = "ClosedToOpen";
        /// <summary>
        /// The BrowseName for the CompensationValue component.
        /// </summary>
        public const string CompensationValue = "CompensationValue";
        /// <summary>
        /// The BrowseName for the Complete component.
        /// </summary>
        public const string Complete = "Complete";
        /// <summary>
        /// The BrowseName for the CompleteToResetting component.
        /// </summary>
        public const string CompleteToResetting = "CompleteToResetting";
        /// <summary>
        /// The BrowseName for the Completing component.
        /// </summary>
        public const string Completing = "Completing";
        /// <summary>
        /// The BrowseName for the CompletingToComplete component.
        /// </summary>
        public const string CompletingToComplete = "CompletingToComplete";
        /// <summary>
        /// The BrowseName for the ComponentSet component.
        /// </summary>
        public const string ComponentSet = "ComponentSet";
        /// <summary>
        /// The BrowseName for the ComponentSetType component.
        /// </summary>
        public const string ComponentSetType = "ComponentSetType";
        /// <summary>
        /// The BrowseName for the Components component.
        /// </summary>
        public const string Components = "Components";
        /// <summary>
        /// The BrowseName for the Configuration component.
        /// </summary>
        public const string Configuration = "Configuration";
        /// <summary>
        /// The BrowseName for the CoverFunctionType component.
        /// </summary>
        public const string CoverFunctionType = "CoverFunctionType";
        /// <summary>
        /// The BrowseName for the CoverStateMachineType component.
        /// </summary>
        public const string CoverStateMachineType = "CoverStateMachineType";
        /// <summary>
        /// The BrowseName for the Created component.
        /// </summary>
        public const string Created = "Created";
        /// <summary>
        /// The BrowseName for the CtrlP component.
        /// </summary>
        public const string CtrlP = "CtrlP";
        /// <summary>
        /// The BrowseName for the CtrlTd component.
        /// </summary>
        public const string CtrlTd = "CtrlTd";
        /// <summary>
        /// The BrowseName for the CtrlTi component.
        /// </summary>
        public const string CtrlTi = "CtrlTi";
        /// <summary>
        /// The BrowseName for the CurrentValue component.
        /// </summary>
        public const string CurrentValue = "CurrentValue";
        /// <summary>
        /// The BrowseName for the Damping component.
        /// </summary>
        public const string Damping = "Damping";
        /// <summary>
        /// The BrowseName for the Description component.
        /// </summary>
        public const string Description = "Description";
        /// <summary>
        /// The BrowseName for the Descrition component.
        /// </summary>
        public const string Descrition = "Descrition";
        /// <summary>
        /// The BrowseName for the DeviceHealth component.
        /// </summary>
        public const string DeviceHealth = "DeviceHealth";
        /// <summary>
        /// The BrowseName for the DeviceHealthAlarms component.
        /// </summary>
        public const string DeviceHealthAlarms = "DeviceHealthAlarms";
        /// <summary>
        /// The BrowseName for the DiscreteControlFunctionType component.
        /// </summary>
        public const string DiscreteControlFunctionType = "DiscreteControlFunctionType";
        /// <summary>
        /// The BrowseName for the Download component.
        /// </summary>
        public const string Download = "Download";
        /// <summary>
        /// The BrowseName for the Error component.
        /// </summary>
        public const string Error = "Error";
        /// <summary>
        /// The BrowseName for the ErrorToOff component.
        /// </summary>
        public const string ErrorToOff = "ErrorToOff";
        /// <summary>
        /// The BrowseName for the Execute component.
        /// </summary>
        public const string Execute = "Execute";
        /// <summary>
        /// The BrowseName for the ExecuteToCompleting component.
        /// </summary>
        public const string ExecuteToCompleting = "ExecuteToCompleting";
        /// <summary>
        /// The BrowseName for the ExecuteToHolding component.
        /// </summary>
        public const string ExecuteToHolding = "ExecuteToHolding";
        /// <summary>
        /// The BrowseName for the ExecuteToSuspending component.
        /// </summary>
        public const string ExecuteToSuspending = "ExecuteToSuspending";
        /// <summary>
        /// The BrowseName for the FileSet component.
        /// </summary>
        public const string FileSet = "FileSet";
        /// <summary>
        /// The BrowseName for the FunctionSet component.
        /// </summary>
        public const string FunctionSet = "FunctionSet";
        /// <summary>
        /// The BrowseName for the FunctionSetType component.
        /// </summary>
        public const string FunctionSetType = "FunctionSetType";
        /// <summary>
        /// The BrowseName for the FunctionStateMachineType component.
        /// </summary>
        public const string FunctionStateMachineType = "FunctionStateMachineType";
        /// <summary>
        /// The BrowseName for the FunctionType component.
        /// </summary>
        public const string FunctionType = "FunctionType";
        /// <summary>
        /// The BrowseName for the FunctionalUnitSet component.
        /// </summary>
        public const string FunctionalUnitSet = "FunctionalUnitSet";
        /// <summary>
        /// The BrowseName for the FunctionalUnitSetType component.
        /// </summary>
        public const string FunctionalUnitSetType = "FunctionalUnitSetType";
        /// <summary>
        /// The BrowseName for the FunctionalUnitType component.
        /// </summary>
        public const string FunctionalUnitType = "FunctionalUnitType";
        /// <summary>
        /// The BrowseName for the GotoMaintenance component.
        /// </summary>
        public const string GotoMaintenance = "GotoMaintenance";
        /// <summary>
        /// The BrowseName for the GotoOperating component.
        /// </summary>
        public const string GotoOperating = "GotoOperating";
        /// <summary>
        /// The BrowseName for the GotoShutdown component.
        /// </summary>
        public const string GotoShutdown = "GotoShutdown";
        /// <summary>
        /// The BrowseName for the GotoStandby component.
        /// </summary>
        public const string GotoStandby = "GotoStandby";
        /// <summary>
        /// The BrowseName for the Held component.
        /// </summary>
        public const string Held = "Held";
        /// <summary>
        /// The BrowseName for the HeldToUnholding component.
        /// </summary>
        public const string HeldToUnholding = "HeldToUnholding";
        /// <summary>
        /// The BrowseName for the Hold component.
        /// </summary>
        public const string Hold = "Hold";
        /// <summary>
        /// The BrowseName for the Holding component.
        /// </summary>
        public const string Holding = "Holding";
        /// <summary>
        /// The BrowseName for the HoldingToHeld component.
        /// </summary>
        public const string HoldingToHeld = "HoldingToHeld";
        /// <summary>
        /// The BrowseName for the IMachineTagNameplateType component.
        /// </summary>
        public const string IMachineTagNameplateType = "IMachineTagNameplateType";
        /// <summary>
        /// The BrowseName for the IMachineVendorNameplateType component.
        /// </summary>
        public const string IMachineVendorNameplateType = "IMachineVendorNameplateType";
        /// <summary>
        /// The BrowseName for the IMachineryItemVendorNameplateType component.
        /// </summary>
        public const string IMachineryItemVendorNameplateType = "IMachineryItemVendorNameplateType";
        /// <summary>
        /// The BrowseName for the Identification component.
        /// </summary>
        public const string Identification = "Identification";
        /// <summary>
        /// The BrowseName for the Idle component.
        /// </summary>
        public const string Idle = "Idle";
        /// <summary>
        /// The BrowseName for the IdleToStarting component.
        /// </summary>
        public const string IdleToStarting = "IdleToStarting";
        /// <summary>
        /// The BrowseName for the InitialOperationDate component.
        /// </summary>
        public const string InitialOperationDate = "InitialOperationDate";
        /// <summary>
        /// The BrowseName for the IsEnabled component.
        /// </summary>
        public const string IsEnabled = "IsEnabled";
        /// <summary>
        /// The BrowseName for the JobID component.
        /// </summary>
        public const string JobID = "JobID";
        /// <summary>
        /// The BrowseName for the JobId component.
        /// </summary>
        public const string JobId = "JobId";
        /// <summary>
        /// The BrowseName for the LADSComponentType component.
        /// </summary>
        public const string LADSComponentType = "LADSComponentType";
        /// <summary>
        /// The BrowseName for the LADSDeviceStateMachineType component.
        /// </summary>
        public const string LADSDeviceStateMachineType = "LADSDeviceStateMachineType";
        /// <summary>
        /// The BrowseName for the LADSDeviceType component.
        /// </summary>
        public const string LADSDeviceType = "LADSDeviceType";
        /// <summary>
        /// The BrowseName for the LADSProgramBaseStateMachineType component.
        /// </summary>
        public const string LADSProgramBaseStateMachineType = "LADSProgramBaseStateMachineType";
        /// <summary>
        /// The BrowseName for the LADSProgramClearedStateMachineType component.
        /// </summary>
        public const string LADSProgramClearedStateMachineType = "LADSProgramClearedStateMachineType";
        /// <summary>
        /// The BrowseName for the LADSProgramRunningStateMachineType component.
        /// </summary>
        public const string LADSProgramRunningStateMachineType = "LADSProgramRunningStateMachineType";
        /// <summary>
        /// The BrowseName for the LastExecution component.
        /// </summary>
        public const string LastExecution = "LastExecution";
        /// <summary>
        /// The BrowseName for the LastResult component.
        /// </summary>
        public const string LastResult = "LastResult";
        /// <summary>
        /// The BrowseName for the LiHaDevice component.
        /// </summary>
        public const string LiHaDevice = "LiHaDevice";
        /// <summary>
        /// The BrowseName for the LiHaProtocolA component.
        /// </summary>
        public const string LiHaProtocolA = "LiHaProtocolA";
        /// <summary>
        /// The BrowseName for the LiHaUnit component.
        /// </summary>
        public const string LiHaUnit = "LiHaUnit";
        /// <summary>
        /// The BrowseName for the LiHaUnitType component.
        /// </summary>
        public const string LiHaUnitType = "LiHaUnitType";
        /// <summary>
        /// The BrowseName for the Location component.
        /// </summary>
        public const string Location = "Location";
        /// <summary>
        /// The BrowseName for the Lock component.
        /// </summary>
        public const string Lock = "Lock";
        /// <summary>
        /// The BrowseName for the Locked component.
        /// </summary>
        public const string Locked = "Locked";
        /// <summary>
        /// The BrowseName for the LockedToClosed component.
        /// </summary>
        public const string LockedToClosed = "LockedToClosed";
        /// <summary>
        /// The BrowseName for the MachineComponentsType component.
        /// </summary>
        public const string MachineComponentsType = "MachineComponentsType";
        /// <summary>
        /// The BrowseName for the MachineIdentificationType component.
        /// </summary>
        public const string MachineIdentificationType = "MachineIdentificationType";
        /// <summary>
        /// The BrowseName for the MachineryComponentIdentificationType component.
        /// </summary>
        public const string MachineryComponentIdentificationType = "MachineryComponentIdentificationType";
        /// <summary>
        /// The BrowseName for the MachineryItemIdentificationType component.
        /// </summary>
        public const string MachineryItemIdentificationType = "MachineryItemIdentificationType";
        /// <summary>
        /// The BrowseName for the Machines component.
        /// </summary>
        public const string Machines = "Machines";
        /// <summary>
        /// The BrowseName for the Maintenance component.
        /// </summary>
        public const string Maintenance = "Maintenance";
        /// <summary>
        /// The BrowseName for the MaintenanceToOperatingTransition component.
        /// </summary>
        public const string MaintenanceToOperatingTransition = "MaintenanceToOperatingTransition";
        /// <summary>
        /// The BrowseName for the MaintenanceToShutdownTransition component.
        /// </summary>
        public const string MaintenanceToShutdownTransition = "MaintenanceToShutdownTransition";
        /// <summary>
        /// The BrowseName for the MimeType component.
        /// </summary>
        public const string MimeType = "MimeType";
        /// <summary>
        /// The BrowseName for the Modified component.
        /// </summary>
        public const string Modified = "Modified";
        /// <summary>
        /// The BrowseName for the MonthOfConstruction component.
        /// </summary>
        public const string MonthOfConstruction = "MonthOfConstruction";
        /// <summary>
        /// The BrowseName for the Name component.
        /// </summary>
        public const string Name = "Name";
        /// <summary>
        /// The BrowseName for the NodeVersion component.
        /// </summary>
        public const string NodeVersion = "NodeVersion";
        /// <summary>
        /// The BrowseName for the Off component.
        /// </summary>
        public const string Off = "Off";
        /// <summary>
        /// The BrowseName for the OffToOn component.
        /// </summary>
        public const string OffToOn = "OffToOn";
        /// <summary>
        /// The BrowseName for the On component.
        /// </summary>
        public const string On = "On";
        /// <summary>
        /// The BrowseName for the OnToError component.
        /// </summary>
        public const string OnToError = "OnToError";
        /// <summary>
        /// The BrowseName for the OnToOff component.
        /// </summary>
        public const string OnToOff = "OnToOff";
        /// <summary>
        /// The BrowseName for the Open component.
        /// </summary>
        public const string Open = "Open";
        /// <summary>
        /// The BrowseName for the OpenToClosed component.
        /// </summary>
        public const string OpenToClosed = "OpenToClosed";
        /// <summary>
        /// The BrowseName for the Opened component.
        /// </summary>
        public const string Opened = "Opened";
        /// <summary>
        /// The BrowseName for the Operating component.
        /// </summary>
        public const string Operating = "Operating";
        /// <summary>
        /// The BrowseName for the OperatingToMaintenanceTransition component.
        /// </summary>
        public const string OperatingToMaintenanceTransition = "OperatingToMaintenanceTransition";
        /// <summary>
        /// The BrowseName for the OperatingToShutdownTransition component.
        /// </summary>
        public const string OperatingToShutdownTransition = "OperatingToShutdownTransition";
        /// <summary>
        /// The BrowseName for the OperatingToStandbyTransition component.
        /// </summary>
        public const string OperatingToStandbyTransition = "OperatingToStandbyTransition";
        /// <summary>
        /// The BrowseName for the Operational component.
        /// </summary>
        public const string Operational = "Operational";
        /// <summary>
        /// The BrowseName for the Powerup component.
        /// </summary>
        public const string Powerup = "Powerup";
        /// <summary>
        /// The BrowseName for the PowerupToOperatingTransition component.
        /// </summary>
        public const string PowerupToOperatingTransition = "PowerupToOperatingTransition";
        /// <summary>
        /// The BrowseName for the ProgramManager component.
        /// </summary>
        public const string ProgramManager = "ProgramManager";
        /// <summary>
        /// The BrowseName for the ProgramManagerType component.
        /// </summary>
        public const string ProgramManagerType = "ProgramManagerType";
        /// <summary>
        /// The BrowseName for the ProgramTemplate component.
        /// </summary>
        public const string ProgramTemplate = "ProgramTemplate";
        /// <summary>
        /// The BrowseName for the ProgramTemplateSet component.
        /// </summary>
        public const string ProgramTemplateSet = "ProgramTemplateSet";
        /// <summary>
        /// The BrowseName for the ProgramTemplateSetType component.
        /// </summary>
        public const string ProgramTemplateSetType = "ProgramTemplateSetType";
        /// <summary>
        /// The BrowseName for the ProgramTemplateType component.
        /// </summary>
        public const string ProgramTemplateType = "ProgramTemplateType";
        /// <summary>
        /// The BrowseName for the PropertySetType component.
        /// </summary>
        public const string PropertySetType = "PropertySetType";
        /// <summary>
        /// The BrowseName for the PropertyType component.
        /// </summary>
        public const string PropertyType = "PropertyType";
        /// <summary>
        /// The BrowseName for the RawValue component.
        /// </summary>
        public const string RawValue = "RawValue";
        /// <summary>
        /// The BrowseName for the Remove component.
        /// </summary>
        public const string Remove = "Remove";
        /// <summary>
        /// The BrowseName for the Reset component.
        /// </summary>
        public const string Reset = "Reset";
        /// <summary>
        /// The BrowseName for the ResetTotalizer component.
        /// </summary>
        public const string ResetTotalizer = "ResetTotalizer";
        /// <summary>
        /// The BrowseName for the Resetting component.
        /// </summary>
        public const string Resetting = "Resetting";
        /// <summary>
        /// The BrowseName for the ResettingToIdle component.
        /// </summary>
        public const string ResettingToIdle = "ResettingToIdle";
        /// <summary>
        /// The BrowseName for the ResultFileSetType component.
        /// </summary>
        public const string ResultFileSetType = "ResultFileSetType";
        /// <summary>
        /// The BrowseName for the ResultFileType component.
        /// </summary>
        public const string ResultFileType = "ResultFileType";
        /// <summary>
        /// The BrowseName for the ResultPropertiesDataType component.
        /// </summary>
        public const string ResultPropertiesDataType = "ResultPropertiesDataType";
        /// <summary>
        /// The BrowseName for the ResultPropertiesType component.
        /// </summary>
        public const string ResultPropertiesType = "ResultPropertiesType";
        /// <summary>
        /// The BrowseName for the ResultSet component.
        /// </summary>
        public const string ResultSet = "ResultSet";
        /// <summary>
        /// The BrowseName for the ResultSetType component.
        /// </summary>
        public const string ResultSetType = "ResultSetType";
        /// <summary>
        /// The BrowseName for the ResultType component.
        /// </summary>
        public const string ResultType = "ResultType";
        /// <summary>
        /// The BrowseName for the Running component.
        /// </summary>
        public const string Running = "Running";
        /// <summary>
        /// The BrowseName for the RunningStateMachine component.
        /// </summary>
        public const string RunningStateMachine = "RunningStateMachine";
        /// <summary>
        /// The BrowseName for the RunningToStopped component.
        /// </summary>
        public const string RunningToStopped = "RunningToStopped";
        /// <summary>
        /// The BrowseName for the SampleIDs component.
        /// </summary>
        public const string SampleIDs = "SampleIDs";
        /// <summary>
        /// The BrowseName for the SampleIds component.
        /// </summary>
        public const string SampleIds = "SampleIds";
        /// <summary>
        /// The BrowseName for the Select component.
        /// </summary>
        public const string Select = "Select";
        /// <summary>
        /// The BrowseName for the SensorValue component.
        /// </summary>
        public const string SensorValue = "SensorValue";
        /// <summary>
        /// The BrowseName for the Shutdown component.
        /// </summary>
        public const string Shutdown = "Shutdown";
        /// <summary>
        /// The BrowseName for the Standby component.
        /// </summary>
        public const string Standby = "Standby";
        /// <summary>
        /// The BrowseName for the StandbyToOperatingTransition component.
        /// </summary>
        public const string StandbyToOperatingTransition = "StandbyToOperatingTransition";
        /// <summary>
        /// The BrowseName for the Start component.
        /// </summary>
        public const string Start = "Start";
        /// <summary>
        /// The BrowseName for the StartFunctions component.
        /// </summary>
        public const string StartFunctions = "StartFunctions";
        /// <summary>
        /// The BrowseName for the Started component.
        /// </summary>
        public const string Started = "Started";
        /// <summary>
        /// The BrowseName for the Starting component.
        /// </summary>
        public const string Starting = "Starting";
        /// <summary>
        /// The BrowseName for the StartingToExecute component.
        /// </summary>
        public const string StartingToExecute = "StartingToExecute";
        /// <summary>
        /// The BrowseName for the StartingToHolding component.
        /// </summary>
        public const string StartingToHolding = "StartingToHolding";
        /// <summary>
        /// The BrowseName for the StateMachine component.
        /// </summary>
        public const string StateMachine = "StateMachine";
        /// <summary>
        /// The BrowseName for the Status component.
        /// </summary>
        public const string Status = "Status";
        /// <summary>
        /// The BrowseName for the Stop component.
        /// </summary>
        public const string Stop = "Stop";
        /// <summary>
        /// The BrowseName for the StopFunctions component.
        /// </summary>
        public const string StopFunctions = "StopFunctions";
        /// <summary>
        /// The BrowseName for the Stopped component.
        /// </summary>
        public const string Stopped = "Stopped";
        /// <summary>
        /// The BrowseName for the StoppedToRunning component.
        /// </summary>
        public const string StoppedToRunning = "StoppedToRunning";
        /// <summary>
        /// The BrowseName for the Stopping component.
        /// </summary>
        public const string Stopping = "Stopping";
        /// <summary>
        /// The BrowseName for the StoppingToStopped component.
        /// </summary>
        public const string StoppingToStopped = "StoppingToStopped";
        /// <summary>
        /// The BrowseName for the Supply component.
        /// </summary>
        public const string Supply = "Supply";
        /// <summary>
        /// The BrowseName for the SupplySet component.
        /// </summary>
        public const string SupplySet = "SupplySet";
        /// <summary>
        /// The BrowseName for the SupplySetType component.
        /// </summary>
        public const string SupplySetType = "SupplySetType";
        /// <summary>
        /// The BrowseName for the SupplyType component.
        /// </summary>
        public const string SupplyType = "SupplyType";
        /// <summary>
        /// The BrowseName for the SupportedPropertySet component.
        /// </summary>
        public const string SupportedPropertySet = "SupportedPropertySet";
        /// <summary>
        /// The BrowseName for the Suspend component.
        /// </summary>
        public const string Suspend = "Suspend";
        /// <summary>
        /// The BrowseName for the Suspended component.
        /// </summary>
        public const string Suspended = "Suspended";
        /// <summary>
        /// The BrowseName for the SuspendedToHolding component.
        /// </summary>
        public const string SuspendedToHolding = "SuspendedToHolding";
        /// <summary>
        /// The BrowseName for the SuspendedToUnsuspending component.
        /// </summary>
        public const string SuspendedToUnsuspending = "SuspendedToUnsuspending";
        /// <summary>
        /// The BrowseName for the Suspending component.
        /// </summary>
        public const string Suspending = "Suspending";
        /// <summary>
        /// The BrowseName for the SuspendingToHolding component.
        /// </summary>
        public const string SuspendingToHolding = "SuspendingToHolding";
        /// <summary>
        /// The BrowseName for the SuspendingToSuspended component.
        /// </summary>
        public const string SuspendingToSuspended = "SuspendingToSuspended";
        /// <summary>
        /// The BrowseName for the TargetValue component.
        /// </summary>
        public const string TargetValue = "TargetValue";
        /// <summary>
        /// The BrowseName for the Task component.
        /// </summary>
        public const string Task = "Task";
        /// <summary>
        /// The BrowseName for the TaskSet component.
        /// </summary>
        public const string TaskSet = "TaskSet";
        /// <summary>
        /// The BrowseName for the TaskSetType component.
        /// </summary>
        public const string TaskSetType = "TaskSetType";
        /// <summary>
        /// The BrowseName for the TaskType component.
        /// </summary>
        public const string TaskType = "TaskType";
        /// <summary>
        /// The BrowseName for the Template component.
        /// </summary>
        public const string Template = "Template";
        /// <summary>
        /// The BrowseName for the TemplatePropertiesDataType component.
        /// </summary>
        public const string TemplatePropertiesDataType = "TemplatePropertiesDataType";
        /// <summary>
        /// The BrowseName for the ToComplete component.
        /// </summary>
        public const string ToComplete = "ToComplete";
        /// <summary>
        /// The BrowseName for the TotalOperationCycles component.
        /// </summary>
        public const string TotalOperationCycles = "TotalOperationCycles";
        /// <summary>
        /// The BrowseName for the TotalOperationDuration component.
        /// </summary>
        public const string TotalOperationDuration = "TotalOperationDuration";
        /// <summary>
        /// The BrowseName for the TotalizedValue component.
        /// </summary>
        public const string TotalizedValue = "TotalizedValue";
        /// <summary>
        /// The BrowseName for the Tuning component.
        /// </summary>
        public const string Tuning = "Tuning";
        /// <summary>
        /// The BrowseName for the Type component.
        /// </summary>
        public const string Type = "Type";
        /// <summary>
        /// The BrowseName for the TypeDictionary component.
        /// </summary>
        public const string TypeDictionary_XmlSchema = "TypeDictionary";
        /// <summary>
        /// The BrowseName for the URL component.
        /// </summary>
        public const string URL = "URL";
        /// <summary>
        /// The BrowseName for the Unhold component.
        /// </summary>
        public const string Unhold = "Unhold";
        /// <summary>
        /// The BrowseName for the Unholding component.
        /// </summary>
        public const string Unholding = "Unholding";
        /// <summary>
        /// The BrowseName for the UnholdingToExecute component.
        /// </summary>
        public const string UnholdingToExecute = "UnholdingToExecute";
        /// <summary>
        /// The BrowseName for the UnholdingToHolding component.
        /// </summary>
        public const string UnholdingToHolding = "UnholdingToHolding";
        /// <summary>
        /// The BrowseName for the Unlock component.
        /// </summary>
        public const string Unlock = "Unlock";
        /// <summary>
        /// The BrowseName for the Unsuspend component.
        /// </summary>
        public const string Unsuspend = "Unsuspend";
        /// <summary>
        /// The BrowseName for the Unsuspending component.
        /// </summary>
        public const string Unsuspending = "Unsuspending";
        /// <summary>
        /// The BrowseName for the UnsuspendingToExecute component.
        /// </summary>
        public const string UnsuspendingToExecute = "UnsuspendingToExecute";
        /// <summary>
        /// The BrowseName for the UnsuspendingToHolding component.
        /// </summary>
        public const string UnsuspendingToHolding = "UnsuspendingToHolding";
        /// <summary>
        /// The BrowseName for the Upload component.
        /// </summary>
        public const string Upload = "Upload";
        /// <summary>
        /// The BrowseName for the User component.
        /// </summary>
        public const string User = "User";
        /// <summary>
        /// The BrowseName for the Utilizes component.
        /// </summary>
        public const string Utilizes = "Utilizes";
        /// <summary>
        /// The BrowseName for the VariableSet component.
        /// </summary>
        public const string VariableSet = "VariableSet";
        /// <summary>
        /// The BrowseName for the Version component.
        /// </summary>
        public const string Version = "Version";
        /// <summary>
        /// The BrowseName for the YearOfConstruction component.
        /// </summary>
        public const string YearOfConstruction = "YearOfConstruction";
        /// <summary>
        /// The BrowseName for the http://opcfoundation.org/UA/Machinery/ component.
        /// </summary>
        public const string http___opcfoundation_org_UA_Machinery_ = "http://opcfoundation.org/UA/Machinery/";
        /// <summary>
        /// The BrowseName for the http://spectaris.de/LADS/ component.
        /// </summary>
        public const string http___spectaris_de_LADS_ = "http://spectaris.de/LADS/";
        /// <summary>
        /// The BrowseName for the http://spectaris.de/lihasystem/ component.
        /// </summary>
        public const string http___spectaris_de_lihasystem_ = "http://spectaris.de/lihasystem/";
    }
    #endregion

    #region Namespace Declarations
    /// <summary>
    /// Defines constants for all namespaces referenced by the Model.
    /// </summary>
    public static partial class Namespaces
    {
        /// <summary>
        /// The URI for the OpcUa namespace (.NET code namespace is 'Opc.Ua').
        /// </summary>
        public const string OpcUa = "http://opcfoundation.org/UA/";

        /// <summary>
        /// The URI for the OpcUaXsd namespace (.NET code namespace is 'Opc.Ua').
        /// </summary>
        public const string OpcUaXsd = "http://opcfoundation.org/UA/2008/02/Types.xsd";

        /// <summary>
        /// The URI for the Machinery namespace.
        /// </summary>
        public const string Machinery = "http://opcfoundation.org/UA/Machinery/";

        /// <summary>
        /// The URI for the MachineryXsd namespace.
        /// </summary>
        public const string MachineryXsd = "http://opcfoundation.org/UA/Machinery/Types.xsd";

        /// <summary>
        /// The URI for the LADS namespace.
        /// </summary>
        public const string LADS = "http://spectaris.de/LADS/";

        /// <summary>
        /// The URI for the LADSXsd namespace.
        /// </summary>
        public const string LADSXsd = "http://spectaris.de/LADS/Types.xsd";

        /// <summary>
        /// The URI for the LiHa namespace.
        /// </summary>
        public const string LiHa = "http://yourorganisation.org/lihasystem/";

        /// <summary>
        /// The URI for the LiHaXsd namespace.
        /// </summary>
        public const string LiHaXsd = "http://yourorganisation.org/lihasystem/Types.xsd";
    }
    #endregion
}

